[{"path":".github/workflows/FormatLintTestBuild.yml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"name: Auto Java Formatter","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"on: push","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"permissions:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"  contents: write","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"jobs:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"  format:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"    if: github.actor !\u003d \u0027Auto Formatter\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"    name: Auto Java Formatter","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout code","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"      - name: Download google-java-format","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"          wget https://github.com/google/google-java-format/releases/download/v1.15.0/google-java-format-1.15.0-all-deps.jar -O /tmp/google-java-format.jar","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"      - name: Fix Java formatting with google-java-format","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"          java --add-exports jdk.compiler/com.sun.tools.javac.parser\u003dALL-UNNAMED -jar /tmp/google-java-format.jar -a --replace $(find . -name \"*.java\")","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"      - name: Commit formatted code","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"          git config --global user.name \"Auto Formatter\"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"          git config --global user.email \"auto_formatter@gmail.com\"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"          # Check if there are any changes","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"          if [[ -n \"$(git status --porcelain)\" ]]; then","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"            git add .","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"            git commit -m \"Apply google-java-format to Java files\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"            git push","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"            echo \"CHANGES_PUSHED\u003dtrue\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"          else","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"            echo \"No formatting changes detected.\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"            echo \"CHANGES_PUSHED\u003dfalse\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"          fi","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"        env:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"  lint:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    name: Lint Code Base","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    needs: format","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    if: always() ","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"      - name: Lint Code Base","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"        uses: github/super-linter@v4","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"        env:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"          RUN-LOCAL: false","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"          LINTER_RULES_PATH: config/checkstyle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"          JAVA_FILE_NAME: ../../config/checkstyle/checkstyle.xml","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"          VALIDATE_ALL_CODEBASE: true","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"          VALIDATE_JAVA: true","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"  test:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"    name: Run Tests with Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"    needs: lint","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"      - name: Grant execute permission for Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"        run: chmod +x gradlew","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"      - name: Run Gradle Tests","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        run: ./gradlew test","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"  build:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"    name: Build \u0026 Upload JAR","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"    needs: test","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"      - name: Grant execute permission for Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"        run: chmod +x gradlew","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"      - name: Build JAR without Checkstyle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"        run: ./gradlew build -x checkstyleMain -x checkstyleTest","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"      - name: Find JAR File","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"flyingapricot"},"content":"          JAR_PATH\u003d$(find build/libs -name \"*.jar\" | head -n 1)","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"          echo \"JAR_PATH\u003d$JAR_PATH\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"flyingapricot"},"content":"      - name: Upload JAR as an Artifact","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/upload-artifact@v4","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"flyingapricot"},"content":"          name: javatro-jar","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"flyingapricot"},"content":"          path: ${{ env.JAR_PATH }}","lastModifiedDate":"2025-03-02","isFullCredit":false}],"authorContributionMap":{"flyingapricot":153}},{"path":".github/workflows/gradle.yml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"name: Java CI","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"on:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"  workflow_run:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"    workflows: [\"Lint Code Basee\"]","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"    types:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"      - completed","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"jobs:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"  build:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"    strategy:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"      matrix:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"        platform: [ubuntu-latest, macos-latest, windows-latest]","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    runs-on: ${{ matrix.platform }}","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"    steps:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"      - name: Set up repository","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        uses: actions/checkout@master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"      - name: Set up repository","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"        uses: actions/checkout@master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"        with:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"          ref: master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"      - name: Merge to master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        run: git checkout --progress --force ${{ github.sha }}","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"      - name: Validate Gradle Wrapper","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        uses: gradle/wrapper-validation-action@v1","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        with:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"          java-package: jdk+fx","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"      - name: Build and check with Gradle","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        run: ./gradlew check","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (*NIX)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if: runner.os \u003d\u003d \u0027Linux\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"        run: ./runtest.sh","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (MacOS)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if: always() \u0026\u0026 runner.os \u003d\u003d \u0027macOS\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        run: ./runtest.sh","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (Windows)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if: always() \u0026\u0026 runner.os \u003d\u003d \u0027Windows\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"        shell: cmd","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"        run: runtest.bat","lastModifiedDate":"2020-05-24","isFullCredit":false}],"authorContributionMap":{"flyingapricot":5,"-":49}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"# javatro - CLI Roguelike Deck-Building Game [![Super-Linter](https://github.com/AY2425S2-CS2113-W13-1/tp/actions/workflows/FormatLintTestBuild.yml/badge.svg)](https://github.com/marketplace/actions/super-linter)","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Overview","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"javatro is a text-based roguelike deck-building game designed for those who love strategic gameplay without the need for graphical interfaces. Inspired by the game *Balatro*, it combines elements of poker and roguelike mechanics to create a deeply replayable, strategic experience that can be enjoyed through a simple command-line interface (CLI).","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"- Deck-Building: Build and customize your deck of cards, each with unique effects and abilities.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"- Turn-Based Combat: Engage in strategic, turn-based combat, making every move count.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"- Replayability: With random encounters, different challenges, and evolving strategies, no two runs are ever the same.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"- Minimalist Design: A lightweight, no-graphics interface focuses on depth and gameplay rather than visual aesthetics.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"- Cross-Platform: Works seamlessly on various operating systems, including Windows, macOS, and Linux.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Installation","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Prerequisites","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"- Java 11 or higher","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"- Command-line interface (CLI) access","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"### Steps","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Clone the repository:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"      git clone https://github.com/yourusername/javatro.git","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"   cd javatro","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"2. Compile and run the game:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"      javac javatro.java","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"   java javatro","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"3. Enjoy the game!","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"## Gameplay","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Objective","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"The goal of javatro is to progress through a series of challenging encounters by strategically building and managing your deck of cards. Each card has unique effects that can be used during combat to defeat enemies, gain resources, and navigate different challenges.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"### How to Play","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Start a New Game: Upon starting the game, you\u0027ll be prompted to create a deck and begin your journey.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"2. Turn-Based Combat: During combat, you\u0027ll choose cards from your deck to perform actions like attacking, defending, or gaining buffs.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"3. Card Management: As you progress, you\u0027ll acquire new cards that can be added to your deck, allowing you to tailor your strategy.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"4. Roguelike Elements: Each run is procedurally generated with different events, enemies, and challenges, providing endless replayability.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"### Commands","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"- `start`: Start a new game.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"- `draw`: Draw a card from your deck.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"- `attack`: Attack an enemy using a card\u0027s effect.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"- `defend`: Defend against an enemy\u0027s attack.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"- `exit`: Quit the game.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"### Card Types","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"- Attack Cards: Deal damage to enemies.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"- Defend Cards: Block or reduce incoming damage.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"- Special Cards: Provide unique abilities like healing, buffs, or drawing extra cards.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"## Target Audience","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"- Card Game Enthusiasts: Players who enjoy the depth of card games and strategic decision-making.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"- Roguelike Fans: Those who love procedural generation and the challenge of each new run.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"- Tech-Savvy Players: Individuals comfortable with command-line interfaces and minimalist gameplay.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"- Cross-Platform Gamers: Users who want a consistent gaming experience across various platforms.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"## Contributing","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"We welcome contributions to the development of javatro! If you\u0027d like to contribute, please follow these steps:","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Fork the repository.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"2. Create a new branch for your changes.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"3. Make your changes and commit them with descriptive messages.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"4. Push your changes and create a pull request.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"## License","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"javatro is licensed under the MIT License.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Contact","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"For more information or support, please contact us at:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"- Email: support@javatrogame.com","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"- GitHub Repository: https://github.com/yourusername/javatro","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"Special thanks to the creators of *Balatro*, whose game inspired the design and mechanics of javatro.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"Enjoy the game, and may your strategic decisions lead you to victory!","lastModifiedDate":"2025-02-19","isFullCredit":false}],"authorContributionMap":{"Markneoneo":8,"flyingapricot":1,"-":90}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.0\u0027","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-engine:5.7.0\u0027","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"sourceSets {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    main {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        resources {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"            srcDirs \u003d [\u0027src/main/java\u0027]","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"            include \u0027**/*.txt\u0027","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"    mainClass.set(\"javatro.Javatro\")","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    archiveBaseName.set(\"javatro\")","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"swethacool":2,"Markneoneo":9,"-":46,"jwyk":1}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for the coding standard at","lastModifiedDate":"2022-05-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://se-education.org/guides/conventions/java/basic.html","lastModifiedDate":"2022-05-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        \u003cproperty name\u003d\"file\" value\u003d\"/github/workspace/config/checkstyle/suppressions.xml\"/\u003e","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        IMPORT CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"        An import statement is redundant if:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"          * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for unused import statements.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"        An import statement is unused if:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"          It\u0027s not referenced in the file.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"        NAMING CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"            \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"        LENGTH and CODING CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"          Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"          C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"            the same line. e.g., the following example is fine:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"              } else","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"            \u003c!-- This next example is not fine:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"              }","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"              else","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"            \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"            if (true) return 1; // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"            if (true) { return 1; } // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"            else if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"              return 1; // else if should always be multi line","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"            if (true)","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"              return 1; // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"            \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"            some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"        ORDER CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"          1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"          2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"          3. Constructors","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"          4. Methods","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"-"},"content":"        \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that default is after all cases in a switch statement --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"DefaultComesLast\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"                 8.4.3.  The prescribed order is:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"                 public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"                 synchronized, native, strictfp","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"              --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"-"},"content":"        WHITESPACE CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"throwsIndent\" value\u003d\"8\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NoWhitespaceBeforeCaseDefaultColon\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"-"},"content":"        JAVADOC CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all block-tags are ordered correctly. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that Javadoc block tags appear only at the beginning of the line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocBlockTagLocation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all Javadoc comments start from the second line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocContentLocationCheck\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each line in Javadoc has leading asterisks. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingLeadingAsterisk\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each non-empty line in Javadoc has whitespace after leading asterisk. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingWhitespaceAfterAsterisk\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that for block tags, indentation of continuation lines is at least 4 spaces. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocTagContinuationIndentation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every class, enumeration and interface. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every method (excluding getters, setters and constructors). --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"accessModifiers\" value\u003d\"public\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false}],"authorContributionMap":{"flyingapricot":1,"-":286}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jian Quan | [Github](https://github.com/K-J-Q/) | [Portfolio](docs/team/jianquan.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"![](https://nus.instructure.com/images/thumbnails/1889759/an0Mp6dUc8X7JQSsTru3w37v24OKL2CvjasETO58) | Neeraj Kumbar | [Github](https://github.com/flyingapricot) | [Portfolio](docs/team/neerajkumbar.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"![gumball.jpg](https://encrypted-tbn0.gstatic.com/images?q\u003dtbn:ANd9GcRgZ7j0HTP8PmUJFy4_7VREGM8F625LVsfXXQ\u0026s) | Mark Neo Qi Hao | [Github](https://github.com/Markneoneo) | [Portfolio](docs/team/Markneoqihao.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"![](https://avatars.githubusercontent.com/u/63852595?v\u003d4)| John Woo Yi Kai | [Github](https://github.com/jwyk) | [Portfolio](docs/team/johnwooyikai.md)","lastModifiedDate":"2025-03-05","isFullCredit":false}],"authorContributionMap":{"Markneoneo":1,"flyingapricot":1,"K-J-Q":1,"-":4,"jwyk":1}},{"path":"src/main/java/javatro/Javatro.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javatro.display.screens.StartScreen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * The {@code javatro} class serves as the main entry point for the application. It initializes the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":" * necessary components, including the view, core logic, and manager, and sets the screen of the","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" * manager to the start screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Javatro {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** The view component of the application. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private static final UI javatroView \u003d new UI();","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** The core logic component of the application. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    private static final JavatroCore javatroCore \u003d new JavatroCore();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /** The manager responsible for handling interactions between the view and core components. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    private static final JavatroManager javatroManager;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    static {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"            javatroManager \u003d new JavatroManager(javatroView, javatroCore);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"     * The main entry point of the application. It initializes the start screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"     * @param args Command-line arguments (not used in this application).","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    public static void main(String[] args) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        assert false : \"dummy assertion set to fail\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(new StartScreen());","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":20,"flyingapricot":12,"-":9}},{"path":"src/main/java/javatro/core/Ante.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"package javatro.core;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @author swethaiscool","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":" * The {@code Ante} class represents the ante system in a poker game, managing the current round,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" * ante values, and blind progression.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"public class Ante {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"    private Ante ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"    private static final int MAX_ANTE_COUNT \u003d 8;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /** Enum representing different blind levels with associated multipliers and names. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"    public enum Blind {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"        SMALL_BLIND(1.0, \"SMALL BLIND\"),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"        LARGE_BLIND(1.5, \"LARGE BLIND\"),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"        BOSS_BLIND(2.0, \"BOSS BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"        private final double multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"        private final String name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"        /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"         * Constructs a Blind with a multiplier and a name.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"         *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"         * @param multiplier The multiplier applied to the ante score.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"         * @param name The name of the blind level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"         */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"        Blind(double multiplier, String name) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"            this.multiplier \u003d multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"            this.name \u003d name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"        /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"         * Gets the multiplier associated with this blind.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"         *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"         * @return The multiplier value.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"         */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"        public double getMultiplier() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"            return multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"        /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"         * Gets the name of the blind.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"         *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"         * @return The name of the blind.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"         */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"        public String getName() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"            return name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"    private static int anteCount;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"swethacool"},"content":"    private Blind blind;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"swethacool"},"content":"    private final int[] anteScore \u003d {300, 800, 2000, 5000, 11000, 20000, 35000, 50000};","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"swethacool"},"content":"     * Constructs an {@code Ante} object with an initial ante count of 1 and the small blind level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"swethacool"},"content":"    public Ante() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"swethacool"},"content":"        anteCount \u003d 1;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"swethacool"},"content":"        blind \u003d Blind.SMALL_BLIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"swethacool"},"content":"     * Calculates the round score based on the ante level and blind multiplier.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"swethacool"},"content":"     * @return The round score as an integer.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"swethacool"},"content":"    public int getRoundScore() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"swethacool"},"content":"        return (int) (anteScore[anteCount - 1] * blind.multiplier);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"swethacool"},"content":"     * Gets the base ante score for the current round.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"swethacool"},"content":"     * @return The ante score as an integer.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"swethacool"},"content":"    public int getAnteScore() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"swethacool"},"content":"        return anteScore[anteCount - 1];","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"    // @author K-J-Q","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"     * Sets the ante count for the game.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"     * @param anteCount The new ante count to set.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if the ante count is not between 1 and {@link","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *     #MAX_ANTE_COUNT}","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"    public void setAnteCount(int anteCount) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"        if (anteCount \u003c 1 || anteCount \u003e MAX_ANTE_COUNT) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"            // not using javatro exception since this method should only be used in tests","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"                    \"Ante count must be between 1 and \" + MAX_ANTE_COUNT);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"        Ante.anteCount \u003d anteCount;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /** Resets the ante to the first round with the small blind. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"swethacool"},"content":"    public void resetAnte() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"swethacool"},"content":"        anteCount \u003d 1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /** Moves to the next round of the ante system, adjusting the blind level and ante count. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"swethacool"},"content":"    public void nextRound() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"swethacool"},"content":"        if (blind \u003d\u003d Blind.SMALL_BLIND) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"swethacool"},"content":"            blind \u003d Blind.LARGE_BLIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"swethacool"},"content":"        } else if (blind \u003d\u003d Blind.LARGE_BLIND) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"swethacool"},"content":"            blind \u003d Blind.BOSS_BLIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"swethacool"},"content":"        } else {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"swethacool"},"content":"            if (anteCount \u003d\u003d MAX_ANTE_COUNT) return;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"swethacool"},"content":"            blind \u003d Blind.SMALL_BLIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"swethacool"},"content":"            anteCount++;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"swethacool"},"content":"     * Sets the blind level manually.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"swethacool"},"content":"     * @param blind The new blind level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"swethacool"},"content":"    public void setBlind(Blind blind) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"swethacool"},"content":"        this.blind \u003d blind;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"swethacool"},"content":"     * Gets the current blind level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"swethacool"},"content":"     * @return The current {@code Blind} level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"swethacool"},"content":"    public Blind getBlind() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"swethacool"},"content":"        return blind;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"swethacool"},"content":"     * Gets the current ante count.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"swethacool"},"content":"     * @return The ante count as an integer.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"swethacool"},"content":"    public int getAnteCount() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"swethacool"},"content":"        return anteCount;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"swethacool":116,"K-J-Q":14,"-":12,"jwyk":1}},{"path":"src/main/java/javatro/core/Card.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import java.util.Objects;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a playing card with a rank and a suit. Each card has a rank (e.g., ACE, KING, QUEEN)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * and a suit (e.g., HEARTS, SPADES). The rank also determines the chip value of the card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"public record Card(Rank rank, Suit suit) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"    /** Copy Constructor for the Card Class */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    public Card(Card other) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"        this(other.rank(), other.suit());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** Enum representing the rank of a card, along with its symbol and chip value. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    public enum Rank {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        TWO(\"2\", 2),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        THREE(\"3\", 3),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        FOUR(\"4\", 4),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        FIVE(\"5\", 5),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        SIX(\"6\", 6),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        SEVEN(\"7\", 7),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        EIGHT(\"8\", 8),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        NINE(\"9\", 9),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        TEN(\"10\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        JACK(\"J\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        QUEEN(\"Q\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        KING(\"K\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        ACE(\"A\", 11);","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        private final String symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        private final int chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"         * Constructs a rank with the given symbol and chip value.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"         * @param symbol The symbol representing the rank (e.g., \"A\" for ACE).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"         * @param chips The chip value associated with the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        Rank(String symbol, int chips) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"            this.symbol \u003d symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"            this.chips \u003d chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"         * Returns the symbol of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"         * @return The symbol of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        public String getSymbol() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"            return symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"         * Returns the chip value of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"         * @return The chip value of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        public int getChips() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"            return chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /** Enum representing the suit of a card. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    public enum Suit {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"        HEARTS(\"Hearts\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"        CLUBS(\"Clubs\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"        SPADES(\"Spades\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"        DIAMONDS(\"Diamonds\");","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        private final String name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"         * Constructs a suit with the given name.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"         * @param name The name of the suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        Suit(String name) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"            this.name \u003d name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"         * Returns the name of the suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"         * @return The name of the suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        public String getName() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"            return name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"     * Returns the chip value of the card based on its rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     * @return The chip value of the card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"    public int getChips() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        return rank.getChips();","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"    public String toString() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"        return String.format(\"%s of %s\", rank.getSymbol(), suit.getName());","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"    // For displaying the card in the game","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"    public String getSimplified() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String suitVal \u003d","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"                Objects.equals(suit().getName(), \"Hearts\")","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"                        ? \"H\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"                        : Objects.equals(suit().getName(), \"Clubs\")","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"                                ? \"C\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"                                : Objects.equals(suit().getName(), \"Spades\")","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"                                        ? \"S\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"                                        : Objects.equals(suit().getName(), \"Diamonds\") ? \"D\" : \"-\";","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"        return rank.getSymbol() + suitVal;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":91,"flyingapricot":8,"-":16,"jwyk":5}},{"path":"src/main/java/javatro/core/Deck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import java.util.Collections;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"/*","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":" * Holds all the free cards the player has","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":" * Contains an ArrayList of type Card: with 0 being the top of the deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" * and ArrayList.size() being the bottom","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"public class Deck {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e deck;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    private DeckType deckType;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"     * Initialize the deck with cards that the player owns If no new cards owned or a new game has","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"     * started, initializes a new deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    public Deck(DeckType deckType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        this.deckType \u003d deckType;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        this.deck \u003d populateNewDeck(deckType);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /** Copy Constructor for deck class */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    Deck(Deck oldDeck) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"        this.deck \u003d new ArrayList\u003cCard\u003e(oldDeck.deck.size());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"        this.deckType \u003d oldDeck.deckType;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        for (Card card : oldDeck.deck) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"            this.deck.add(new Card(card));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    /** Draws and returns a card from the top of the deck */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    public Card draw() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        return deck.remove(0);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /** Returns an integer containing the cards left in the deck */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"    public int getRemainingCards() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        return deck.size();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"    /** Returns an ArrayList containing all the remaining cards in the deck */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"    public ArrayList\u003cCard\u003e getWholeDeck() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e wholeDeckList \u003d new ArrayList\u003cCard\u003e(deck.size());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        for (Card card : deck) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"            wholeDeckList.add(new Card(card));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"        return wholeDeckList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /** Returns an DeckType containing the deck variant you are using */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"    public DeckType getDeckName() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"        return deckType;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"    /** Shuffle the deck you are using */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"    public void shuffle() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(deck);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /** Initialize a new deck for the game, based on the deckType given. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateNewDeck(DeckType deckType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"        //","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"        if (deckType \u003d\u003d DeckType.CHECKERED) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"            newDeck \u003d populateNewCheckeredDeck();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"        } else if (deckType \u003d\u003d DeckType.ABANDONED) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"            newDeck \u003d populateNewAbandonedDeck();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"            newDeck \u003d populateDefaultDeck();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"        assert newDeck !\u003d null;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"     * Initialize a new shuffled 52 card deck for a new game Consists of the standard Poker Deck: 13","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"     * Cards of the 4 Suits","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateDefaultDeck() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jwyk"},"content":"        for (Card.Rank rank : Card.Rank.values()) {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"            for (Card.Suit suit : Card.Suit.values()) {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jwyk"},"content":"                newDeck.add(new Card(rank, suit));","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(newDeck);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"     * Initialize a new shuffled 52 card deck for a new game Consists of the standard Poker Deck: 26","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"     * Cards of the 2 Suites: Spades and Hearts.","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateNewCheckeredDeck() {","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"        for (Card.Rank rank : Card.Rank.values()) {","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"            // Populate for Hearts","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"            Card.Suit suitHeart \u003d Card.Suit.valueOf(Card.Suit.HEARTS.toString());","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"            newDeck.add(new Card(rank, suitHeart));","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"            newDeck.add(new Card(rank, suitHeart));","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jwyk"},"content":"            // Populate for Spades","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"            Card.Suit suitSpades \u003d Card.Suit.valueOf(Card.Suit.SPADES.toString());","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"            newDeck.add(new Card(rank, suitSpades));","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jwyk"},"content":"            newDeck.add(new Card(rank, suitSpades));","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(newDeck);","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jwyk"},"content":"     * Initialize a new shuffled 52 card deck for a new game Consists of the standard Poker Deck: 26","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jwyk"},"content":"     * Cards of the 2 Suites: Spades and Hearts.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateNewAbandonedDeck() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"        Arrays.stream(Card.Rank.values())","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .filter(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"                        rank -\u003e","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"                                rank !\u003d Card.Rank.KING","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"                                        \u0026\u0026 rank !\u003d Card.Rank.QUEEN","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"                                        \u0026\u0026 rank !\u003d Card.Rank.JACK)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .forEach(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"                        rank -\u003e {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jwyk"},"content":"                            Arrays.stream(Card.Suit.values())","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jwyk"},"content":"                                    .forEach(suit -\u003e newDeck.add(new Card(rank, suit)));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jwyk"},"content":"                        });","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(newDeck);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Enum representing the type of the deck. Test Deck is not to be used, and is a default deck.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jwyk"},"content":"    public enum DeckType {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"jwyk"},"content":"        ABANDONED(\"Abandoned\"),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"jwyk"},"content":"        BLUE(\"Blue\"),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jwyk"},"content":"        CHECKERED(\"Checkered\"),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"jwyk"},"content":"        RED(\"Red\"),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jwyk"},"content":"        DEFAULT(\"Default\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"jwyk"},"content":"        private final String name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"jwyk"},"content":"        DeckType(String name) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"jwyk"},"content":"            this.name \u003d name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"jwyk"},"content":"        /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"jwyk"},"content":"         * Returns the symbol of the rank.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"jwyk"},"content":"         *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"jwyk"},"content":"         * @return The symbol of the rank.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"jwyk"},"content":"         */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"jwyk"},"content":"        public String getName() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"jwyk"},"content":"            return name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":1,"flyingapricot":1,"-":12,"jwyk":149}},{"path":"src/main/java/javatro/core/HandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FIVE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.*;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import java.util.HashMap;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import java.util.Map;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The `HandResult` class evaluates a poker hand based on the given cards. It supports hands with 1","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" * to 5 cards and determines the best possible poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"public class HandResult {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     * Evaluates the poker hand based on the given list of cards.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * @param cards A list of cards to evaluate. Must contain between 1 and 5 cards.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @return A `PokerHand` object representing the evaluated hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     * @throws IllegalArgumentException If the input is null or contains fewer than 1 card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public static PokerHand evaluateHand(List\u003cCard\u003e cards) throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        if (cards \u003d\u003d null || cards.isEmpty() || cards.size() \u003e 5) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidPlayedHand();","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        // First check for Flush Five (all cards identical)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        if (isFlushFive(cards)) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FLUSH_FIVE);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // Counts occurrences of each rank (e.g., {\"A\":1, \"K\":1, \"Q\":1, \"J\":1, \"10\":1} for a Royal","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Flush).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cCard.Rank, Integer\u003e rankCount \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        // Counts occurrences of each suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cCard.Suit, Integer\u003e suitCount \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        // card.rank() retrieves the rank of the card (e.g., Rank.ACE, Rank.KING, Rank.TEN, etc.).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        // rankCount.getOrDefault(card.rank(), 0) checks if the rank is already in the map:","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        //   - If yes, it gets the current count.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        //   - If not, it returns 0 (default value).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        // +1 increments the count for that rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        // put() updates the rank count in the map.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"            rankCount.put(card.rank(), rankCount.getOrDefault(card.rank(), 0) + 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"            suitCount.put(card.suit(), suitCount.getOrDefault(card.suit(), 0) + 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        boolean isFlush \u003d suitCount.containsValue(5); // All 5 cards have the same suit","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        boolean isStraight \u003d isStraight(rankCount); // Cards form a consecutive sequence","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        boolean isRoyal \u003d isRoyal(rankCount); // Special case: A, K, Q, J, 10","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        // Check remaining special hands","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        PokerHand specialHand \u003d checkSpecialHands(rankCount, isFlush);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        if (specialHand !\u003d null) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"            return specialHand;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        // Determine the best poker hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"        if (cards.size() \u003d\u003d 1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(HIGH_CARD); // Single card is always a high card","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        } else {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"            return evaluateMultiCardHand(rankCount, isFlush, isStraight, isRoyal);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /** Checks if all cards are exactly identical (same rank and suit) */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isFlushFive(List\u003cCard\u003e cards) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        if (cards.size() !\u003d 5) return false;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        Card first \u003d cards.get(0);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"            if (!card.rank().equals(first.rank()) || !card.suit().equals(first.suit())) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"                return false;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        return true;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /** Checks for special poker hands (Flush Five, Flush House, Five of a Kind). */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    private static PokerHand checkSpecialHands(Map\u003cCard.Rank, Integer\u003e rankCount, boolean isFlush) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        // Five of a Kind (all cards same rank, but possibly different suits)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"        if (rankCount.size() \u003d\u003d 1 \u0026\u0026 rankCount.values().iterator().next() \u003d\u003d 5) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FIVE_OF_A_KIND);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        // Flush House (full house where all cards same suit)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"        if (isFlush \u0026\u0026 rankCount.size() \u003d\u003d 2) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"            boolean hasThree \u003d false;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"            boolean hasTwo \u003d false;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"            for (int count : rankCount.values()) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                if (count \u003d\u003d 3) hasThree \u003d true;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"                if (count \u003d\u003d 2) hasTwo \u003d true;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"            if (hasThree \u0026\u0026 hasTwo) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"                return new PokerHand(FLUSH_HOUSE);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"        return null;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"     * Evaluates poker hands with 2 to 5 cards using a priority-based approach.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"     * @param isFlush Whether the hand is a flush.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"     * @param isStraight Whether the hand is a straight.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"     * @param isRoyal Whether the hand is a royal flush.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"     * @return A `HandResult` object representing the evaluated hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private static PokerHand evaluateMultiCardHand(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"            Map\u003cCard.Rank, Integer\u003e rankCount,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"            boolean isFlush,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"            boolean isStraight,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"            boolean isRoyal) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        // Check for the strongest hands first","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        if (isRoyal \u0026\u0026 isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(ROYAL_FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        } else if (isStraight \u0026\u0026 isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(STRAIGHT_FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(4)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FOUR_OF_A_KIND);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(3) \u0026\u0026 rankCount.containsValue(2)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FULL_HOUSE);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"        } else if (isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"        } else if (isStraight) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(STRAIGHT);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(3)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(THREE_OF_A_KIND);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.values().stream().filter(count -\u003e count \u003d\u003d 2).count() \u003d\u003d 2) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(TWO_PAIR);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(2)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(PAIR);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        // Default case: High Card","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        return new PokerHand(HIGH_CARD);","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the given hand forms a straight (consecutive sequence of ranks).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"     * @return `true` if the hand is a straight, `false` otherwise.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isStraight(Map\u003cCard.Rank, Integer\u003e rankCount) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        // rankCount.keySet() gets the unique card ranks in the hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard.Rank\u003e ranks \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"                rankCount.keySet().stream()","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"                        .sorted() // sorts the ranks in ascending order.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"                        .toList(); // converts the result into a list.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        // A straight must have five distinct card ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"        if (ranks.size() \u003d\u003d 5) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"            boolean normalStraight \u003d true;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"            // Loops through the sorted list and checks if each rank follows the previous rank","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"            // consecutively","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"            // ordinal() returns the numerical position of the enum value.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"            // If the difference between consecutive ranks is not exactly 1, return false.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"            for (int i \u003d 0; i \u003c 4; i++) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"                if (ranks.get(i + 1).ordinal() !\u003d ranks.get(i).ordinal() + 1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"                    normalStraight \u003d false;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"                    break;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"            // Special case: Ace-low straight (A-2-3-4-5)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"            boolean aceLowStraight \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"                    ranks.contains(ACE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(TWO)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(THREE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(FOUR)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(FIVE);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"            return normalStraight || aceLowStraight;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"        return false;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the given hand is a royal flush (A, K, Q, J, 10 of the same suit).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"     * @return `true` if the hand is a royal flush, `false` otherwise.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isRoyal(Map\u003cCard.Rank, Integer\u003e rankCount) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"        return rankCount.containsKey(ACE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(KING)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(QUEEN)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(JACK)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(TEN);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":191,"-":19}},{"path":"src/main/java/javatro/core/HoldingHand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import java.util.Comparator;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import java.util.HashSet;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import java.util.Set;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"/*","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" * Tracks the 8 cards held in a hand","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":" * Handles the draw function and discard function","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class HoldingHand {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    public List\u003cCard\u003e Hand;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    private int HOLDING_LIMIT; // The maximum number of cards a hand can hold","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Instantiate an empty List of Cards. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    public HoldingHand() {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        Hand \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        this.HOLDING_LIMIT \u003d 8;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"     * Adds a Card to the Hand.","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis function should not be called if Hand size \u003e\u003d HOLDING_LIMIT","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    public void add(Card cardToAdd) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        if (Hand.size() \u003c HOLDING_LIMIT) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"            Hand.add(cardToAdd);","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"            throw new JavatroException(\"Exceeded Cards to be added.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"     * Draws a specified number of cards from the deck and adds them to the Hand.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"     * @param numberOfDraws The number of cards to draw from the deck","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"     * @param deck Deck containing the remaining cards","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    public void draw(int numberOfDraws, Deck deck) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c numberOfDraws; i++) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"            if (Hand.size() \u003c HOLDING_LIMIT) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"                Card tempCard \u003d deck.draw();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"                Hand.add(tempCard);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"            } else {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"                throw new JavatroException(\"Exceeded Cards to be added.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"     * Returns the specified cards as requested by the player Hand will then draw the same number of","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"     * cards back from the deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"     * \u003cp\u003eThis function should not be called if there are no cards played.","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"     * @param cardsToPlay List containing cards to be played","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"    public List\u003cCard\u003e play(List\u003cInteger\u003e cardsToPlay) throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e playList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"        // Validate that cardsToPlay and the played card positions are valid inputs","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"        if (cardsToPlay.size() \u003e 5) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new JavatroException(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"                    \"Number of cards played \"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                            + \"(\"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                            + cardsToPlay.size()","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                            + \")\"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                            + \" exceeds maximum allowed. (5)\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"            for (int index : cardsToPlay) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"                if (index \u003c 0 || index \u003e\u003d Hand.size()) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"                    throw new JavatroException(\"Invalid index in cards to be played: \" + index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"                }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jwyk"},"content":"        // Create a set to mark indices for removal","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"        Set\u003cInteger\u003e indicesToRemove \u003d new HashSet\u003c\u003e(cardsToPlay);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"        // Add cards that should be played in order of cardsToPlay","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"        for (int index : cardsToPlay) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"            if (indicesToRemove.contains(index)) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"                Card card \u003d Hand.get(index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jwyk"},"content":"                playList.add(card);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"        // Remove the cardsToPlay from the Hand in descending order of indices","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"        List\u003cInteger\u003e sortedToRemove \u003d new ArrayList\u003c\u003e(indicesToRemove);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"        sortedToRemove.sort(Comparator.reverseOrder());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"        for (int index : sortedToRemove) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jwyk"},"content":"            Hand.remove(index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"        return playList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"     * Discards a set number of cards. This function should not be used if the number of discards","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"     * left is 0.","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"     * @param cardsToDiscard List containing the cards at specified positions to be discarded","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"    public List\u003cCard\u003e discard(List\u003cInteger\u003e cardsToDiscard) throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e discardList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jwyk"},"content":"        // Validate that cardsToDiscard and the played card positions are valid inputs","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"        if (cardsToDiscard.size() \u003e 5) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new JavatroException(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"                    \"Number of cards discarded \"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"                            + \"(\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"                            + cardsToDiscard.size()","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"                            + \")\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"                            + \" exceeds maximum allowed. (5)\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jwyk"},"content":"            for (int index : cardsToDiscard) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jwyk"},"content":"                if (index \u003c 0 || index \u003e\u003d Hand.size()) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"                    throw new JavatroException(\"Invalid index in cards to be discarded: \" + index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"                }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        // Store the cards to be discarded","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        Set\u003cInteger\u003e indicesToDiscard \u003d new HashSet\u003c\u003e(cardsToDiscard);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        for (int index : indicesToDiscard) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"            discardList.add(Hand.get(index)); // Add card to discard list before removing","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"        // Remove the cardsToPlay from the Hand in descending order of indices","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e sortedToRemove \u003d new ArrayList\u003c\u003e(indicesToDiscard);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jwyk"},"content":"        sortedToRemove.sort(Comparator.reverseOrder());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jwyk"},"content":"        for (int index : sortedToRemove) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jwyk"},"content":"            Hand.remove(index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        return discardList;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Sorts the hand first by suit (Spades \u003e Hearts \u003e Clubs \u003e Diamonds), then by rank (Ace \u003e King \u003e","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Queen \u003e ... \u003e Two) within each suit.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"    public void sortBySuit() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Hand.sort(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                Comparator.comparingInt(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"                                (Card card) -\u003e","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"                                        switch (card.suit()) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"                                            case SPADES -\u003e 0;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"                                            case HEARTS -\u003e 1;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"                                            case CLUBS -\u003e 2;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"                                            case DIAMONDS -\u003e 3;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"                                            default -\u003e 4; // shouldn\u0027t happen","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"                                        })","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"                        .thenComparingInt(card -\u003e -card.rank().ordinal()));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Sorts the hand first by rank (Ace \u003e King \u003e Queen \u003e ... \u003e Two), then by suit (Spades \u003e Hearts","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * \u003e Clubs \u003e Diamonds) within each rank.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"    public void sortByRank() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Hand.sort(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"                Comparator.comparingInt((Card card) -\u003e -card.rank().ordinal())","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"                        .thenComparingInt(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"                                card -\u003e","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"                                        switch (card.suit()) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"                                            case SPADES -\u003e 0;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"                                            case HEARTS -\u003e 1;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"                                            case CLUBS -\u003e 2;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"                                            case DIAMONDS -\u003e 3;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"                                            default -\u003e 4; // shouldn\u0027t happen","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"                                        }));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"flyingapricot"},"content":"     * Retrieves the list of cards in the player\u0027s hand.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"flyingapricot"},"content":"     * @return A {@code List} of {@code Card} objects representing the player\u0027s hand.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"flyingapricot"},"content":"    public List\u003cCard\u003e getHand() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"flyingapricot"},"content":"        return Hand;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"    // Sets input as current hand","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void setHand(List\u003cCard\u003e hand) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"        this.Hand \u003d hand;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * Change the HOLDING_LIMIT of the HoldingHand Class. This function is used when you need to","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * manually change the HOLDING_LIMIT","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"jwyk"},"content":"    public void setHOLDINGLIMIT(int holdingLimit) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"jwyk"},"content":"        HOLDING_LIMIT \u003d holdingLimit;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":39,"flyingapricot":9,"K-J-Q":15,"-":35,"jwyk":102}},{"path":"src/main/java/javatro/core/JavatroCore.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code JavatroCore} class represents the main game model, responsible for managing game","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * rounds and initializing the game state.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.core.Deck.DeckType;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import java.util.EnumMap;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import java.util.Map;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"/** The core game logic class that manages the game state and rounds. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"public class JavatroCore {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    /** The current active round in the game. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    public static Round currentRound;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    /** The current ante for the game. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    protected static Ante ante;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    /** The current round count of the game. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    protected static int roundCount;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    /** The number of plays give per round (Default value \u003d 4). */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    public static int totalPlays;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    /** The deck used throughout the game. (A copy of this deck is made for every new Round) */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    public static Deck deck;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    /** The deck used throughout the game. (A copy of this deck is made for every new Round) */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    public static HeldJokers heldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    /** Stores the play counts for each poker hand type */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Map\u003cPokerHand.HandType, Integer\u003e pokerHandPlayCounts \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"            new EnumMap\u003c\u003e(PokerHand.HandType.class);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    // @author swethaiscool","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"     * Retrieves the current ante.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"     * @return the current {@link Ante} instance","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"    public static Ante getAnte() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        return ante;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"     * Retrieves the current round count.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"     * @return the current round count","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    public static int getRoundCount() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"        return roundCount;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /** Advances the game to the next round, updating the ante and incrementing the round count. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"    public void nextRound() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"        roundCount++;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"        startNewRound(classicRound());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /** Initializes a new game by resetting the ante, round count, jokers and decks. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    public void setupNewGame(DeckType deckType) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"        ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"        roundCount \u003d 1;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"        totalPlays \u003d 4;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"        deck \u003d new Deck(deckType);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"    // @author swethaiscool","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"     * Starts a new round and assigns it to the current round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"     * @param round The new round to start.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while initializing the round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"    private static void startNewRound(Round round) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"        currentRound \u003d round;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"        assert currentRound !\u003d null;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"     * Creates a new classic round with predefined settings.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"     * @return A {@code Round} instance configured as a classic round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while creating the round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jwyk"},"content":"    private static Round classicRound() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"        Deck d;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"            d \u003d new Deck(deck);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"            d.shuffle();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return new Round(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    ante, 4, d, heldJokers, ante.getBlind().getName(), ante.getBlind().getName());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException javatroException) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"            System.out.println(javatroException.getMessage());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"        return null;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Starts the game by initializing a new set of game parameters. This method is called when the","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * game begins.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while starting the game.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"    public void beginGame() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        startNewRound(classicRound());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /** Initializes poker hand play counts at game start */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"    public static void initializePokerHandStats() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"            pokerHandPlayCounts.put(handType, 0);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /** Gets the play count for a specific hand type */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"    public static int getPlayCount(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"        return pokerHandPlayCounts.getOrDefault(handType, 0);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /** Increments the play count for a specific hand type */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"    public static void incrementPlayCount(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        pokerHandPlayCounts.put(handType, getPlayCount(handType) + 1);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-16","isFullCredit":false}],"authorContributionMap":{"Markneoneo":20,"flyingapricot":36,"K-J-Q":1,"-":16,"jwyk":57}},{"path":"src/main/java/javatro/core/JavatroException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * Represents a custom exception class for handling domain-specific errors in the javatro","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * application.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis class extends {@link Exception} and provides static factory methods to create exceptions","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":" * for different error scenarios. It is used to handle errors related to invalid game states, such","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":" * as invalid card plays, invalid deck configurations, and more.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" * @see Exception","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"public final class JavatroException extends Exception {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code JavatroException} with the specified error message.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     * @param message The detailed error message explaining the exception.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    public JavatroException(String message) {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        super(UI.RED + message + UI.END);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code JavatroException} with the specified error message and cause.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     * @param message The detailed error message explaining the exception.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param cause The cause of the exception (which is saved for later retrieval by the {@link","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *     #getCause()} method).","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    public JavatroException(String message, Throwable cause) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        super(message, cause);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an invalid number of cards played.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the user plays an invalid number of cards.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the correct number of cards to play.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidPlayedHand() {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"A poker hand must contain between 1 and 5 cards.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an invalid number of plays per round.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to start a round with an invalid number of","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"     * plays.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the correct number of plays per round.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidPlaysPerRound() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Number of plays per round must be greater than 0.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an invalid blind score.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to start a round with an invalid blind score.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the correct blind score.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidBlindScore() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"swethacool"},"content":"        return new JavatroException(\"Blind score must be greater than or equal to 0!\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an invalid deck.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to start a round with an invalid deck.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the correct deck.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidDeck() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Deck cannot be null.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating no plays remaining.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to play cards when no plays are remaining.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating that no plays are remaining.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException noPlaysRemaining() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"No plays remaining.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating invalid card input.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the user provides invalid input for card selection.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating invalid card input.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidCardInput() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Invalid input! Please enter valid numbers.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Creates an exception indicating that the user has exceeded the maximum allowed card","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * selection.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the user selects more cards than allowed.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsToSelect the maximum number of cards allowed to be selected","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the maximum allowed card selection.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException exceedsMaxCardSelection(int maxCardsToSelect) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"You can only select up to \" + maxCardsToSelect + \" cards.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating invalid menu input.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the user provides invalid input for menu navigation.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"     * @param maxRange the maximum valid input range","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the valid input range.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidMenuInput(int maxRange) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return new JavatroException(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"                \"Invalid input! Please enter a number between 1 and \" + maxRange + \".\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating invalid input type.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when the user provides non-numeric input where a number is","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * expected.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating that a number is required.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidInputType() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Invalid input! Please enter a number.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an invalid options title.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the options title is null or empty.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the options title is invalid.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidOptionsTitle() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Options title cannot be null or empty.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidOptionsSize() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Number of options cannot be null or empty.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an invalid screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the screen is null.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the screen is invalid.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Screen cannot be null.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an index is out of bounds.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when an invalid index is accessed.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"     * @param index The invalid index that caused the exception.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the index is out of bounds.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException indexOutOfBounds(int index) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Index is out of bounds: \" + index);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an error loading the logo from a file.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the logo file cannot be loaded.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"     * @param fileName The name of the file that could not be loaded.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the error loading the logo.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException errorLoadingLogo(String fileName) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Error loading logo from: \" + fileName);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an invalid selection limit.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the selection limit is less than 1.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the selection limit must be a positive value.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidSelectionLimit() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Selection limit must be a positive value.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating no remaining discards are available.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to discard cards but no discards remain.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"K-J-Q"},"content":"     * @return A {@code JavatroException} indicating that no discards are available.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException noRemainingDiscards() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"No remaining discards available\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating too many cards are being discarded.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to discard more cards than allowed.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"K-J-Q"},"content":"     * @return A {@code JavatroException} indicating too many cards are being discarded.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException tooManyDiscards() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Too many cards selected for discarding\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an attempt to discard zero cards.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to discard zero cards.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"K-J-Q"},"content":"     * @return A {@code JavatroException} indicating that zero cards cannot be discarded.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException cannotDiscardZeroCards() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Cannot discard zero cards\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"jwyk"},"content":"     * Creates an exception indicating no more Jokers can be added.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when adding 1 Joker would exceed the HOLDING_LIMIT defined in","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * {@HeldJokers}.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"jwyk"},"content":"     * @return A {@code JavatroException} indicating that the Joker cannot be added.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"jwyk"},"content":"    public static JavatroException exceedsMaxJokers() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"        return new JavatroException(","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"                \"Cannot add more Jokers, or the maximum limit will be exceeded.\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-08","isFullCredit":false}],"authorContributionMap":{"Markneoneo":151,"swethacool":1,"K-J-Q":69,"-":19,"jwyk":8}},{"path":"src/main/java/javatro/core/PlanetCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import java.util.EnumMap;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import java.util.Map;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"public class PlanetCard {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private static final Map\u003cPokerHand.HandType, Integer\u003e LEVELS \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"            new EnumMap\u003c\u003e(PokerHand.HandType.class);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    private static final Map\u003cPokerHand.HandType, PlanetCard\u003e CARDS \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"            new EnumMap\u003c\u003e(PokerHand.HandType.class);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    static {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"        // Initialize all levels to 1","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"            LEVELS.put(handType, 1);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        // Predefine all planet cards with unique paths","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"                PokerHand.HandType.HIGH_CARD,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Pluto\", 10, 1, PokerHand.HandType.HIGH_CARD, \"planet_pluto.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.PAIR,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Mercury\", 15, 1, PokerHand.HandType.PAIR, \"planet_mercury.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"                PokerHand.HandType.TWO_PAIR,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Uranus\", 20, 1, PokerHand.HandType.TWO_PAIR, \"planet_uranus.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"                PokerHand.HandType.THREE_OF_A_KIND,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new PlanetCard(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"                        \"Venus\", 20, 2, PokerHand.HandType.THREE_OF_A_KIND, \"planet_venus.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"                PokerHand.HandType.STRAIGHT,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Saturn\", 30, 3, PokerHand.HandType.STRAIGHT, \"planet_saturn.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                PokerHand.HandType.FLUSH,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Jupiter\", 15, 2, PokerHand.HandType.FLUSH, \"planet_jupiter.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"                PokerHand.HandType.FULL_HOUSE,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Earth\", 25, 2, PokerHand.HandType.FULL_HOUSE, \"planet_earth.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"                PokerHand.HandType.FOUR_OF_A_KIND,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"                new PlanetCard(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"                        \"Mars\", 30, 3, PokerHand.HandType.FOUR_OF_A_KIND, \"planet_mars.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"                PokerHand.HandType.STRAIGHT_FLUSH,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new PlanetCard(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"                        \"Neptune\", 40, 4, PokerHand.HandType.STRAIGHT_FLUSH, \"planet_neptune.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"                PokerHand.HandType.FIVE_OF_A_KIND,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"                new PlanetCard(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                        \"Planet X\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"                        35,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"                        3,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"                        PokerHand.HandType.FIVE_OF_A_KIND,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"                        \"planet_planet_x.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"                PokerHand.HandType.FLUSH_HOUSE,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Ceres\", 40, 4, PokerHand.HandType.FLUSH_HOUSE, \"planet_ceres.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CARDS.put(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                PokerHand.HandType.FLUSH_FIVE,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Eris\", 50, 3, PokerHand.HandType.FLUSH_FIVE, \"planet_eris.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"    private final String name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    private final int chipIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    private final int multiIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"    private final PokerHand.HandType handType;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    private final String path;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private PlanetCard(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"            String name,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"            int chipIncrement,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"            int multiIncrement,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"            PokerHand.HandType handType,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"            String path) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        this.name \u003d name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        this.chipIncrement \u003d chipIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        this.multiIncrement \u003d multiIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        this.handType \u003d handType;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        this.path \u003d path;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"    public String getPath() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        return path;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"    // Get predefined PlanetCard for a hand type","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"    public static PlanetCard getForHand(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        return CARDS.get(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    // Static method to get current level for a hand type","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"    public static int getLevel(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        return LEVELS.getOrDefault(handType, 1);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"    // Static method to get chip increment for a hand type","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"    public static int getChipIncrement(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard card \u003d CARDS.get(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        return card !\u003d null ? card.chipIncrement : 0;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    // Static method to get multi increment for a hand type","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"    public static int getMultiIncrement(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard card \u003d CARDS.get(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        return card !\u003d null ? card.multiIncrement : 0;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"    // Apply level-up for this card\u0027s hand type","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jwyk"},"content":"    public void apply() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"        LEVELS.put(handType, LEVELS.getOrDefault(handType, 1) + 1);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"    // Getters","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int getChipIncrement() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return chipIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public int getMultiIncrement() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return multiIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public PokerHand.HandType getHandType() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return handType;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"    /*","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"    To level up a hand: PlanetCard.getForHand(HandType.HIGH_CARD).apply();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"    To get current stats: PlanetCard.getLevel(HandType.HIGH_CARD)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"    // Level up \"High Card\" using Pluto","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"    PlanetCard pluto \u003d PlanetCard.getForHand(PokerHand.HandType.HIGH_CARD);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"    pluto.apply();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"    // Create a High Card poker hand","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"    PokerHand highCard \u003d new PokerHand(PokerHand.HandType.HIGH_CARD);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"    System.out.println(highCard.getChips()); // 5 + (2-1)*10 \u003d 15","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"    System.out.println(highCard.getMultiplier()); // 1 + (2-1)*1 \u003d 2","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"    */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":80,"-":60,"jwyk":5}},{"path":"src/main/java/javatro/core/PokerHand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" * Represents the result of evaluating a poker hand with tracking for levels and play counts.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * @param handType The type of poker hand","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"public record PokerHand(HandType handType) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"     * Returns the base chips for this poker hand adjusted by level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"     * @return The base chips multiplied by level","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    public int getChips() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        int base \u003d handType.getChips();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"        int level \u003d PlanetCard.getLevel(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        int chipIncrement \u003d PlanetCard.getChipIncrement(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        return base + (level - 1) * chipIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"     * Returns the multiplier for this poker hand adjusted by level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     * @return The multiplier","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    public int getMultiplier() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        int base \u003d handType.getMultiplier();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        int level \u003d PlanetCard.getLevel(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        int multiIncrement \u003d PlanetCard.getMultiIncrement(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        return base + (level - 1) * multiIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"     * Returns the hand name for this poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     * @return The hand name.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    public String getHandName() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        return handType.getHandName();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    public int getPlayCount() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        return JavatroCore.getPlayCount(handType);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"     * Creates a new PokerHand with an incremented played count.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"     * @return A new PokerHand instance with playCount + 1","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    public PokerHand incrementPlayed() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        JavatroCore.incrementPlayCount(handType);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        return this; // Return same instance since stats are managed by JavatroCore","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    public String toString() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return String.format(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"                \"%s (Level: %d, Chips: %d, Multiplier: %d, Played: %d)\",","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                handType.getHandName(),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"                PlanetCard.getLevel(handType),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"                getChips(),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"                handType.getMultiplier(),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"                getPlayCount());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"     * Enum representing all possible poker hand types, along with their base chips and multipliers.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"    public enum HandType {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        FLUSH_FIVE(\"Flush Five\", 160, 16),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"        FLUSH_HOUSE(\"Flush House\", 140, 14),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        FIVE_OF_A_KIND(\"Five of a Kind\", 120, 12),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        ROYAL_FLUSH(\"Royal Flush\", 100, 8),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        STRAIGHT_FLUSH(\"Straight Flush\", 100, 8),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        FOUR_OF_A_KIND(\"Four of a Kind\", 60, 7),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        FULL_HOUSE(\"Full House\", 40, 4),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        FLUSH(\"Flush\", 35, 4),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        STRAIGHT(\"Straight\", 30, 4),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        THREE_OF_A_KIND(\"Three of a Kind\", 30, 3),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        TWO_PAIR(\"Two Pair\", 20, 2),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        PAIR(\"Pair\", 10, 2),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        HIGH_CARD(\"High Card\", 5, 1);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        private final String handName;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        private final int chips;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        private final int multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        HandType(String handName, int chips, int multiplier) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"            this.handName \u003d handName;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"            this.chips \u003d chips;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"            this.multiplier \u003d multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        public String getHandName() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"            return handName;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        public int getChips() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"            return chips;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"        public int getMultiplier() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"            return multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":102,"-":6}},{"path":"src/main/java/javatro/core/Round.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.Deck.DeckType;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"/** Represents a round in the Javatro game. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"public class Round {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"    /** The initial number of cards dealt to the player. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"    public static final int INITIAL_HAND_SIZE \u003d 8;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"    /** The maximum number of discards allowed per round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    public static final int MAX_DISCARDS_PER_ROUND \u003d 4;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"    /** The maximum number of cards in a hand. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    public static final int MAX_HAND_SIZE \u003d 5;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    /** The player\u0027s current hand of cards. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    public HoldingHand playerHand;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    /** The player\u0027s current held jokers. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    public HeldJokers playerJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    /** The cards previously played/discarded in the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    private List\u003cCard\u003e chosenCards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    /** The state of the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    private final RoundState state;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"    /** The configuration of the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    private final RoundConfig config;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"    /** The actions available in the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"    private final RoundActions actions;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"    /** The observer pattern implementation. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"    private final RoundObservable observable;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    /** The deck of cards used in the round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    public static Deck deck;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"     * Constructs a new round with detailed configuration.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param ante The ante configuration containing the target score for this round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param remainingPlays The initial number of plays allowed in this round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @param deck The deck of cards to be used for this round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @param heldJokers The player\u0027s collection of jokers available for this round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @param roundName The display name for this round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @param roundDescription A detailed description of the round\u0027s rules or theme","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws JavatroException If any of the provided parameters are invalid","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Round(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"            Ante ante,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"            Deck deck,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"            HeldJokers heldJokers,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"            String roundName,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"            String roundDescription)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        validateParameters(ante, remainingPlays, deck);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"        Round.deck \u003d deck;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"        this.playerHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"        this.playerJokers \u003d heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"        // Create config with round name and description","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"        this.config \u003d new RoundConfig(roundName, roundDescription, ante.getRoundScore());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"        // Create state with initial values","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"        this.state \u003d new RoundState(0, MAX_DISCARDS_PER_ROUND, remainingPlays);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"        // Apply special deck modifications","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"        applyDeckVariants(deck);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"        // Create observable for notifications","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"        this.observable \u003d new RoundObservable(this);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"        // Create actions for game mechanics","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"        this.actions \u003d new RoundActions(this);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"        // Initial draw","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"        playerHand.draw(INITIAL_HAND_SIZE, deck);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"        validatePostConstruction();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"     * Validates the input parameters for round creation.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"     * @param ante The ante configuration to validate","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"     * @param remainingPlays The number of plays to validate","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"     * @param deck The deck to validate","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If validation fails for any parameter","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void validateParameters(Ante ante, int remainingPlays, Deck deck)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"        if (ante.getRoundScore() \u003c 0) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidBlindScore();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"        if (remainingPlays \u003c\u003d 0) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidPlaysPerRound();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"        if (deck \u003d\u003d null) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidDeck();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"     * Applies special rules based on the deck variant.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"     * @param deck The deck to check for special variants","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"    private void applyDeckVariants(Deck deck) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"        DeckType deckName \u003d deck.getDeckName();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"        if (deckName \u003d\u003d DeckType.RED) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"            this.state.increaseRemainingDiscards(1);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jwyk"},"content":"        } else if (deckName \u003d\u003d DeckType.BLUE) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"            this.state.increaseRemainingPlays(1);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /** Validates the post-construction state of the round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"    private void validatePostConstruction() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"K-J-Q"},"content":"        assert this.state.getCurrentScore() \u003d\u003d 0 : \"Initial score must be zero\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assert this.state.getRemainingDiscards() \u003e\u003d MAX_DISCARDS_PER_ROUND","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"                : \"Initial discards must be at least the maximum\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assert this.playerHand.getHand().size() \u003d\u003d INITIAL_HAND_SIZE","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"                : \"Player should have exactly \" + INITIAL_HAND_SIZE + \" cards initially\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Constructs a new round with the specified ante and blind settings without specifying round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * name and description.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public Round(Ante ante, int remainingPlays, Deck deck, HeldJokers heldJokers)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"        this(ante, remainingPlays, deck, heldJokers, \"Default Round\", \"Default Description\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"     * Registers a listener for round state changes.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @param pcl The property change listener to register","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"    public void addPropertyChangeListener(PropertyChangeListener pcl) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"        observable.addPropertyChangeListener(pcl);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /** Notifies all registered observers of changes in the round state. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"flyingapricot"},"content":"    public void updateRoundVariables() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"        observable.updateRoundVariables();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"     * Plays a selection of cards from the player\u0027s hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * @param cardIndices Indices of cards to play from the holding hand","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * @throws JavatroException If the play is invalid or no plays remain","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"K-J-Q"},"content":"     * @see RoundActions#playCards(List)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"K-J-Q"},"content":"    public void playCards(List\u003cInteger\u003e cardIndices) throws JavatroException {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"jwyk"},"content":"        chosenCards \u003d actions.playCards(cardIndices);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"K-J-Q"},"content":"     * Discards a selection of cards from the player\u0027s hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * @param cardIndices Indices of cards to discard from the holding hand","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * @throws JavatroException If the discard is invalid or no discards remain","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"K-J-Q"},"content":"     * @see RoundActions#discardCards(List)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"jwyk"},"content":"    public void discardCards(List\u003cInteger\u003e cardIndices) throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"jwyk"},"content":"        chosenCards \u003d actions.discardCards(cardIndices);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"K-J-Q"},"content":"     * Gets the current score accumulated in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"K-J-Q"},"content":"     * @return The current score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"jwyk"},"content":"    public long getCurrentScore() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"K-J-Q"},"content":"        return state.getCurrentScore();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"K-J-Q"},"content":"     * Gets the target score needed to win this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"K-J-Q"},"content":"     * @return The blind score target","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"K-J-Q"},"content":"    public int getBlindScore() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"K-J-Q"},"content":"        return config.getBlindScore();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"K-J-Q"},"content":"     * Gets the number of remaining discards available to the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"K-J-Q"},"content":"     * @return The number of remaining discards","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingDiscards() {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"K-J-Q"},"content":"        return state.getRemainingDiscards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"K-J-Q"},"content":"     * Gets the number of remaining plays available to the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"K-J-Q"},"content":"     * @return The number of remaining plays","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingPlays() {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"K-J-Q"},"content":"        return state.getRemainingPlays();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"K-J-Q"},"content":"     * Gets the cards currently in the player\u0027s hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"K-J-Q"},"content":"     * @return A list of the player\u0027s current cards","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"flyingapricot"},"content":"    public List\u003cCard\u003e getPlayerHand() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"K-J-Q"},"content":"        assert playerHand !\u003d null : \"Player hand cannot be null\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"flyingapricot"},"content":"        return playerHand.getHand();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the game is lost based on game rules.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"     * @return true if the game is lost, false otherwise","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"    public boolean isLost() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"        // Game ends if no plays are remaining","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"K-J-Q"},"content":"        return state.getRemainingPlays() \u003c\u003d 0 \u0026\u0026 !isWon();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"K-J-Q"},"content":"     * Checks if the round was won by the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"K-J-Q"},"content":"     * @return true if the player won the round, false otherwise","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"K-J-Q"},"content":"    public boolean isWon() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"K-J-Q"},"content":"        return state.getCurrentScore() \u003e\u003d config.getBlindScore();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"K-J-Q"},"content":"     * Checks if the round is over based on game rules.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"K-J-Q"},"content":"     * @return true if the game is lost, false otherwise","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"K-J-Q"},"content":"    public boolean isRoundOver() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"K-J-Q"},"content":"        // Round ends if no plays are remaining","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"K-J-Q"},"content":"        return state.getRemainingPlays() \u003c\u003d 0 | isWon();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"K-J-Q"},"content":"     * Gets the display name of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"K-J-Q"},"content":"     * @return The round name","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"flyingapricot"},"content":"    public String getRoundName() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"K-J-Q"},"content":"        return config.getRoundName();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"K-J-Q"},"content":"     * Sets the display name of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * @param roundName The new round name","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"flyingapricot"},"content":"    public void setRoundName(String roundName) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"K-J-Q"},"content":"        config.setRoundName(roundName);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"K-J-Q"},"content":"     * Gets the description of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"K-J-Q"},"content":"     * @return The round description","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"flyingapricot"},"content":"    public String getRoundDescription() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"K-J-Q"},"content":"        return config.getRoundDescription();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"K-J-Q"},"content":"     * Sets the description of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"     * @param roundDescription The new round description","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"flyingapricot"},"content":"    public void setRoundDescription(String roundDescription) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"K-J-Q"},"content":"        config.setRoundDescription(roundDescription);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"K-J-Q"},"content":"     * Gets the state object for this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"K-J-Q"},"content":"     * @return The round state object","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"K-J-Q"},"content":"    RoundState getState() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"K-J-Q"},"content":"        return state;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"K-J-Q"},"content":"     * Gets the configuration object for this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"K-J-Q"},"content":"     * @return The round configuration object","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"K-J-Q"},"content":"    RoundConfig getConfig() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"K-J-Q"},"content":"        return config;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"K-J-Q"},"content":"     * Gets the observable object for this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"K-J-Q"},"content":"     * @return The round observable object","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"K-J-Q"},"content":"    RoundObservable getObservable() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"K-J-Q"},"content":"        return observable;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"K-J-Q"},"content":"     * Gets the actions object for this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"K-J-Q"},"content":"     * @return The round actions object","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"K-J-Q"},"content":"    public List\u003cCard\u003e getPlayedCards() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"jwyk"},"content":"        return chosenCards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"K-J-Q"},"content":"     * Gets the played hand of cards in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"K-J-Q"},"content":"     * @return The poker hand evaluated from the played cards","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If the played cards are invalid or empty","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"K-J-Q"},"content":"    public PokerHand getPlayedHand() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"jwyk"},"content":"        return HandResult.evaluateHand(chosenCards);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":6,"flyingapricot":33,"K-J-Q":233,"-":37,"jwyk":20}},{"path":"src/main/java/javatro/core/RoundActions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import java.util.HashSet;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"import java.util.List;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"import java.util.Set;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"/** Implements the game actions available in a round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"public class RoundActions {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"    /** The round these actions apply to. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"    private final Round round;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"     * Creates a new set of actions for the given round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"     * @param round The round to operate on","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"    public RoundActions(Round round) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"        this.round \u003d round;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"     * Plays a set of cards as a poker hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"     * @param cardIndices Indices of cards to play from the holding hand","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If the play is invalid","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    public List\u003cCard\u003e playCards(List\u003cInteger\u003e cardIndices) throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"        assert cardIndices !\u003d null : \"Card indices cannot be null\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"        // Validation","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"        if (cardIndices.size() \u003e Round.MAX_HAND_SIZE || cardIndices.isEmpty()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidPlayedHand();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"        RoundState state \u003d round.getState();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"        if (state.getRemainingPlays() \u003c\u003d 0) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.noPlaysRemaining();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"        assert !cardIndices.isEmpty() : \"Card indices cannot be empty\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"        assert cardIndices.size() \u003c\u003d Round.MAX_HAND_SIZE","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"                : \"Cannot play more than \" + Round.MAX_HAND_SIZE + \" cards\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        assert state.getRemainingPlays() \u003e 0 : \"No plays remaining to execute this action\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"        long oldScore \u003d state.getCurrentScore();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"        int oldRemainingPlays \u003d state.getRemainingPlays();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"        // Execute play","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"        List\u003cCard\u003e playedCards \u003d round.playerHand.play(cardIndices);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"        PokerHand result \u003d HandResult.evaluateHand(playedCards);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        Score handScore \u003d new Score();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"        long pointsEarned \u003d handScore.getScore(result, playedCards, round.playerJokers);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"        state.addScore(pointsEarned);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"        // Draw new cards to replace played ones","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"        round.playerHand.draw(cardIndices.size(), Round.deck);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"        state.decrementPlays();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"        assert state.getRemainingPlays() \u003d\u003d oldRemainingPlays - 1","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"                : \"Remaining plays should decrease by exactly 1\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assert state.getCurrentScore() \u003e\u003d oldScore","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"                : \"Score should not decrease after playing cards\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"        assert round.playerHand.getHand().size() \u003d\u003d Round.INITIAL_HAND_SIZE","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"                : \"Hand size should be maintained after play\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"        round.updateRoundVariables();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"        return playedCards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"     * Discards cards from the player\u0027s hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"     * @param cardIndices Indices of cards to discard from the holding hand","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If the discard is invalid","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"    public List\u003cCard\u003e discardCards(List\u003cInteger\u003e cardIndices) throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"        RoundState state \u003d round.getState();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"        Integer numberOfDiscards \u003d cardIndices.size();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"        assert cardIndices !\u003d null : \"Card indices cannot be null\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"        // Validation","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"        if (state.getRemainingDiscards() \u003c\u003d 0) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.noRemainingDiscards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (numberOfDiscards \u003e round.playerHand.getHand().size()","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"                || numberOfDiscards \u003e state.getRemainingDiscards()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.tooManyDiscards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"        if (cardIndices.size() \u003c 1) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.cannotDiscardZeroCards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"        assert !cardIndices.isEmpty() : \"Cannot discard zero cards\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"        assert state.getRemainingDiscards() \u003e 0 : \"No discards remaining to execute this action\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"        // Handle duplicates by using a Set","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"        Set\u003cInteger\u003e indicesToDiscard \u003d new HashSet\u003c\u003e(cardIndices);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"        int handSizeBefore \u003d round.playerHand.getHand().size();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"        int oldRemainingDiscards \u003d state.getRemainingDiscards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"        // Execute discard","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e discardedCards \u003d round.playerHand.discard(cardIndices);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"        state.decrementDiscards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"        round.playerHand.draw(indicesToDiscard.size(), Round.deck);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"        assert state.getRemainingDiscards() \u003d\u003d oldRemainingDiscards - 1","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"                : \"Remaining discards should decrease by exactly 1\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"        assert round.playerHand.getHand().size() \u003d\u003d handSizeBefore","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"                : \"Hand size should be maintained after discard\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"        round.updateRoundVariables();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jwyk"},"content":"        return discardedCards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"K-J-Q":109,"-":5,"jwyk":3}},{"path":"src/main/java/javatro/core/RoundConfig.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"/** Stores configuration details for a game round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"public class RoundConfig {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"    /** The minimum score required to win the round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"    private final int blindScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"    /** The name of the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"    private String roundName;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"    /** The description of the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"    private String roundDescription;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"     * Creates a new round configuration.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"     * @param roundName The display name of the round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"     * @param roundDescription The description of the round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"     * @param blindScore The target score required to win","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"    public RoundConfig(String roundName, String roundDescription, int blindScore) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"        this.roundName \u003d roundName;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"        this.roundDescription \u003d roundDescription;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"        this.blindScore \u003d blindScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"     * Gets the target score needed to win this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"     * @return The blind score target","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"    public int getBlindScore() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"        return blindScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"     * Gets the display name of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"     * @return The round name","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"    public String getRoundName() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"        return roundName;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"     * Sets the display name of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"     * @param roundName The new round name","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"    public void setRoundName(String roundName) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"        this.roundName \u003d roundName;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"     * Gets the description of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"     * @return The round description","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"    public String getRoundDescription() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        return roundDescription;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"     * Sets the description of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"     * @param roundDescription The new round description","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"    public void setRoundDescription(String roundDescription) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"        this.roundDescription \u003d roundDescription;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"K-J-Q":68,"-":1}},{"path":"src/main/java/javatro/core/RoundObservable.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"import java.beans.PropertyChangeSupport;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"/** Handles observer notifications for round state changes. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"public class RoundObservable {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"    private final Round round;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"    private final PropertyChangeSupport support;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"     * Creates a new observable for the given round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"     * @param round The round to observe","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    public RoundObservable(Round round) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"        this.round \u003d round;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"        this.support \u003d new PropertyChangeSupport(round);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"     * Registers an observer to listen for property changes.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"     * @param pcl The property change listener to register.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    public void addPropertyChangeListener(PropertyChangeListener pcl) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"        support.addPropertyChangeListener(pcl);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /** Fires property change events to notify observers of updated round variables. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"    public void updateRoundVariables() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"        RoundConfig config \u003d round.getConfig();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"        RoundState state \u003d round.getState();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"blindScore\", null, config.getBlindScore());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"remainingPlays\", null, state.getRemainingPlays());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"remainingDiscards\", null, state.getRemainingDiscards());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"roundName\", null, config.getRoundName());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"roundDescription\", null, config.getRoundDescription());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"holdingHand\", null, round.getPlayerHand());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"currentScore\", null, state.getCurrentScore());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"K-J-Q":41,"-":2}},{"path":"src/main/java/javatro/core/RoundState.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"/**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":" * Encapsulates the state of a round in the game, including score and play limits.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":" *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":" * @see Round The main game round class that uses this state","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":" */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"public class RoundState {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"    /** The player\u0027s current score in the round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"    private long currentScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"    /** The number of remaining discards allowed. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    private int remainingDiscards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"    /** The number of remaining plays in the round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"    private int remainingPlays;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"     * Creates a new round state with initial values.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"     * @param currentScore The starting score for the round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"     * @param remainingDiscards The initial number of discards available","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"     * @param remainingPlays The initial number of plays available","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"    public RoundState(long currentScore, int remainingDiscards, int remainingPlays) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"        this.currentScore \u003d currentScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"        this.remainingDiscards \u003d remainingDiscards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"        this.remainingPlays \u003d remainingPlays;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"     * Gets the current score accumulated in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"     * @return The current score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"    public long getCurrentScore() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"        return currentScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"     * Adds points to the current score.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"     * @param points The number of points to add to the score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"    public void addScore(long points) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        currentScore +\u003d points;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"     * Gets the number of remaining discards available to the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"     * @return The number of remaining discards","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingDiscards() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"        return remainingDiscards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /** Reduces the number of remaining discards by one. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"    public void decrementDiscards() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        remainingDiscards--;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"     * Increases the number of remaining discards by a specified amount.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"     * @param amount The number of additional discards to add","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"    public void increaseRemainingDiscards(int amount) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"        remainingDiscards +\u003d amount;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"     * Gets the number of remaining plays available to the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"     * @return The number of remaining plays","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingPlays() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"        return remainingPlays;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /** Reduces the number of remaining plays by one. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"    public void decrementPlays() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"        remainingPlays--;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"     * Increases the number of remaining plays by a specified amount.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"     * @param amount The number of additional plays to add","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"    public void increaseRemainingPlays(int amount) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"        remainingPlays +\u003d amount;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"K-J-Q":90,"-":2}},{"path":"src/main/java/javatro/core/Score.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"/** Contains the algorithm for calculating the final score and played hand. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"public class Score {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"    public double totalChips \u003d 0;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    public double totalMultiplier \u003d 0;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    public static List\u003cCard\u003e playedCardsList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    public ArrayList\u003cJoker\u003e jokerList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"     * Returns the final score from total chips * total multiplier, after rounding.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"     * @param totalChips The chip total of the played hand","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"     * @param totalMultiplier The multiplier total of the played hand","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    private static long calculateFinalScore(double totalChips, double totalMultiplier) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        return (long) Math.ceil(Math.round(totalChips) * Math.round(totalMultiplier));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /** Returns the score of the played hand by calculating the value of the hand. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public long getScore(PokerHand pokerHand, List\u003cCard\u003e playedCardList, HeldJokers heldJokers)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        // Highlight any boss blind effects that apply here","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        // Cannot play suits, cannot play Face Cards, Must play 5 cards","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        jokerList \u003d heldJokers.getJokers();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"        playedCardsList \u003d playedCardList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"        // First add pokerHand\u0027s chip and mult base to the scores.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"        totalChips \u003d pokerHand.getChips();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        totalMultiplier \u003d pokerHand.getMultiplier();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        // Score the cards and apply any Jokers that have effects on play here.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        for (Card currentCard : playedCardList) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"            if (isValidCard(currentCard)) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"                scoreCard(currentCard);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // From here, check each joker in heldJokers applies post round effects, in the order they","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // are placed.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c jokerList.size(); i++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"            Joker currentJoker \u003d jokerList.get(i);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"            if (currentJoker.scoreType \u003d\u003d Joker.ScoreType.AFTERHANDPLAY) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"                currentJoker.interact(this, null);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"        // Round the score and return the correct score value.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"        return calculateFinalScore(totalChips, totalMultiplier);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns whether the card should be considered for scoring. This boolean will return false if","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * the card falls under boss blind conditions.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"     * @param card The card to be checked for validity","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"     * @param","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"    private boolean isValidCard(Card card) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"        // To be checked for in boss blind","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Apply boss blind logic to return this as true or false based on the card\u0027s","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // characteristics.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"        return true;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"     * Adds the card\u0027s value to the score, and check for any joker interactions with the card.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"     * @param card The card to be scored","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"     * @param","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"    private void scoreCard(Card card) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"        totalChips +\u003d card.getChips();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jwyk"},"content":"        // From here, check each joker in heldJokers can apply effects on card play, in the","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"        // order they are placed.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c jokerList.size(); i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"            Joker currentJoker \u003d jokerList.get(i);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"            if (currentJoker.scoreType \u003d\u003d Joker.ScoreType.ONCARDPLAY) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"                currentJoker.interact(this, card);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"-":14,"jwyk":76}},{"path":"src/main/java/javatro/core/jokers/HeldJokers.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"/** Holds all the Jokers the player has in an ArrayList of type Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"public class HeldJokers {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"    private static int HOLDING_LIMIT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"    public ArrayList\u003cJoker\u003e heldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /** Constructor for the HeldJokers Class. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    public HeldJokers() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new ArrayList\u003cJoker\u003e(5);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"        // By Default, HOLDING_LIMIT is 5.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"        HOLDING_LIMIT \u003d 5;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** Adds 1 Joker to the HeldJokers Class. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    public void add(Joker joker) throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        if (heldJokers.size() \u003e 5) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"            throw JavatroException.exceedsMaxJokers();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(joker);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    /** Removes the Joker from the specified index. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    public void remove(int index) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"        if (index \u003c 0 || index \u003e\u003d heldJokers.size()) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"            throw JavatroException.indexOutOfBounds(index);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        heldJokers.remove(index);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns a soft copy of the ArrayList of HeldJokers. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    public ArrayList\u003cJoker\u003e getJokers() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        return heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"-":5,"jwyk":34}},{"path":"src/main/java/javatro/core/jokers/Joker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Joker card. Each Joker card has a description and a string representation of the","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Joker Object.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"public abstract class Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"    protected static String name;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    protected static String description;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"    protected static String path;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    public ScoreType scoreType;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    /** Enum representing the type of Joker Card. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    public enum ScoreType {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"        AFTERHANDPLAY,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        ONCARDPLAY,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Abstract method of Joker for scoring purposes. The playedCard parameter should be null if not","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * required. Overriden by Joker subclasses.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"     * @param playedCard","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param scoreClass Score Class containing relevant information such as totalChips,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *     totalMultiplier.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    public abstract void interact(Score scoreClass, Card playedCard);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    public String getName() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        return name;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        return description;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public String getPath() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return path;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":4,"-":10,"jwyk":29}},{"path":"src/main/java/javatro/core/jokers/JokerFactory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addchip.OddToddJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addchip.ScaryFaceJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.jokers.addmult.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.jokers.addmult.AbstractJoker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Random;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Supplier;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"/** Factory for creating and distributing Jokers. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"public class JokerFactory {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final List\u003cSupplier\u003cJoker\u003e\u003e jokerSuppliers \u003d","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"            List.of(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"                    OddToddJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"                    ScaryFaceJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"                    AbstractJoker::new,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"                    GluttonousJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"                    GreedyJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"                    HalfJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"                    LustyJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"                    WrathfulJoker::new);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    private static final Random random \u003d new Random();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"     * Returns a random Joker from the above list.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"     * @return A RandomJoker","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    public static Joker createRandomJoker() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"        return jokerSuppliers.get(random.nextInt(jokerSuppliers.size())).get();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"Markneoneo":3,"-":8,"jwyk":24}},{"path":"src/main/java/javatro/core/jokers/addchip/OddToddJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addchip;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"/** Represents a OddToddJoker Joker */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class OddToddJoker extends Joker {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    public OddToddJoker() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Odd Todd\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"                        \"Played cards with %s%sOdd%s%s rank gives %s%s+31 Chips%s%s when scored (A,\"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"                                + \" 9, 7, 5, 3)\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"                        YELLOW, BOLD, END, BLACK_B, BLUE, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        path \u003d \"joker_odd_todd.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        if ((playedCard.getChips()) % 2 !\u003d 0) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalChips +\u003d 31;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        return \"+31 Chips for Odd\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"Markneoneo":9,"-":9,"jwyk":21}},{"path":"src/main/java/javatro/core/jokers/addchip/ScaryFaceJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addchip;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"/** Represents a AbstractJoker Joker, based off the Abstract Joker of Balatro. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class ScaryFaceJoker extends Joker {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    public ScaryFaceJoker() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Scary Face\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"                        \"Played %s%sFace%s%s (K, Q, J) Cards give %s%s+30 Chips%s%s\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"                        YELLOW, BOLD, END, BLACK_B, BLUE, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        path \u003d \"joker_scary_face.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (playedCard.rank() \u003d\u003d Card.Rank.KING","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"                || playedCard.rank() \u003d\u003d Card.Rank.QUEEN","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || playedCard.rank() \u003d\u003d Card.Rank.JACK) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalChips +\u003d 30;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        return \"+30 Chips for Face\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"Markneoneo":10,"-":10,"jwyk":20}},{"path":"src/main/java/javatro/core/jokers/addmult/AbstractJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"/** Represents a AbstractJoker Joker, based off the Abstract Joker of Balatro. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"public class AbstractJoker extends Joker {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    private int numberOfJokers;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    public AbstractJoker() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        super();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        name \u003d \"Abstract\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        this.numberOfJokers \u003d 1;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"                        \"%s%s+3 Mult%s%s for each %s%sJoker%s%s card held (Currently %s%s+%d%s%s\"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"                                + \" Mult)\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"                        RED,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"                        BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"                        YELLOW,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"                        RED,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"                        numberOfJokers * 3,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"                        BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        path \u003d \"joker_abstract.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        this.scoreType \u003d ScoreType.AFTERHANDPLAY;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        this.numberOfJokers \u003d scoreClass.jokerList.size();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"                        \"%s%s+3 Mult%s%s for each %s%sJoker%s%s card held (Currently %s%s+%d\"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"                                + \" Mult%s%s)\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"                        RED,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                        BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"                        YELLOW,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"                        BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"                        RED,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"                        numberOfJokers * 3,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                        BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        scoreClass.totalMultiplier +\u003d numberOfJokers * 3;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    public String toString() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        return \"+3 Mult per Joker\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":30,"-":39}},{"path":"src/main/java/javatro/core/jokers/addmult/GluttonousJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"/** Represents a GluttonousJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class GluttonousJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    public GluttonousJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Gluttonous\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"                        \"Played cards with %s%sClub%s%s suit give %s%s+3 Mult%s%s when scored\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"                        BLUE, BOLD, END, BLACK_B, RED, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        path \u003d \"joker_gluttonous.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"        if (playedCard.suit() \u003d\u003d Card.Suit.CLUBS) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        return \"+3 Mult for Clubs\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":8,"-":9,"jwyk":21}},{"path":"src/main/java/javatro/core/jokers/addmult/GreedyJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static javatro.display.UI.ORANGE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"/** Represents a GreedyJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class GreedyJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    public GreedyJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Greedy\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"                        \"Played cards with %s%sDiamond%s%s suit give %s%s+3 Mult%s%s when scored\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"                        ORANGE, BOLD, END, BLACK_B, RED, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        path \u003d \"joker_greedy.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"        if (playedCard.suit() \u003d\u003d Card.Suit.DIAMONDS) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        return \"+3 Mult for Diamond\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":7,"-":10,"jwyk":21}},{"path":"src/main/java/javatro/core/jokers/addmult/HalfJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"/** Represents a HalfJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class HalfJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    public HalfJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Half\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"                        \"%s%s+20 Mult%s%s if played hand has %s%s3 or fewer%s%s cards\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"                        RED, BOLD, END, BLACK_B, YELLOW, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        path \u003d \"joker_half.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.AFTERHANDPLAY;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"        if (scoreClass.playedCardsList.size() \u003c\u003d 3) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 20;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        return \"+20 Mult for \u003c\u003d 3 Cards\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":7,"-":10,"jwyk":20}},{"path":"src/main/java/javatro/core/jokers/addmult/LustyJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"/** Represents a LustyJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"public class LustyJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    public LustyJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Lusty\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"                        \"Played cards with %s%sHeart%s%s suit give %s%s+3 Mult%s%s when scored\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"                        RED, BOLD, END, BLACK_B, RED, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        path \u003d \"joker_lusty.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"        if (playedCard.suit() \u003d\u003d Card.Suit.HEARTS) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        return \"+3 Mult for Hearts\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":7,"-":9,"jwyk":21}},{"path":"src/main/java/javatro/core/jokers/addmult/WrathfulJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static javatro.display.UI.PURPLE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"/** Represents a WrathfulJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class WrathfulJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    public WrathfulJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Wrathful\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"                        \"Played cards with %s%sSpade%s%s suit give %s%s+3 Mult%s%s when scored\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"                        PURPLE, BOLD, END, BLACK_B, RED, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        path \u003d \"joker_wrathful.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"        if (playedCard.suit() \u003d\u003d Card.Suit.SPADES) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        return \"+3 Mult for Spade\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":7,"-":10,"jwyk":21}},{"path":"src/main/java/javatro/core/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":" * The {@code core} package contains the core game logic and data structures necessary for managing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * the game state, rounds, cards, and hands.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis package is responsible for handling the deck, player hands, and round mechanics while","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * interacting with the game manager and view components.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eClasses in this package:\u003c/h2\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.Card} - Represents an individual playing card.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.Deck} - Manages the deck of cards used in the game.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" *   \u003cli\u003e{@link javatro.core.HandResult} - Stores and evaluates the result of a player\u0027s hand.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.HoldingHand} - Represents the player\u0027s current hand.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   \u003cli\u003e{@link javatro.core.JavatroCore} - The main game model responsible for game state and round","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":" *       management.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":" *   \u003cli\u003e{@link javatro.core.PokerHand} - Defines and evaluates different types of poker hands.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.Round} - Represents an individual game round.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":12,"-":5,"jwyk":4}},{"path":"src/main/java/javatro/display/CardRenderer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"public class CardRenderer {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"     * Renders a card as an array of strings, each representing one line of ASCII art.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"     * @param card The card to render.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"     * @return A String array containing the lines of the rendered card.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    public static String[] renderCard(Card card) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        String rank \u003d card.rank().getSymbol();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"        String suitSymbol \u003d getSuitSymbol(card.suit());","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        //        String leftSpacing \u003d HAIR_SPACE.repeat(14);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        //        String rightSpacing \u003d getRightSpacing(card.suit());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        String colour \u003d getColour(card.suit());","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        // The card art is 7 lines tall","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        String[] cardArt \u003d new String[5];","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        cardArt[0] \u003d WHITE_B + String.format(\" %s%s%-2s      \", colour, BOLD, rank) + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        cardArt[1] \u003d WHITE_B + \"         \" + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        //        cardArt[2] \u003d WHITE_B + leftSpacing + suitSymbol + rightSpacing + END;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        cardArt[2] \u003d WHITE_B + String.format(\"    %s%s    \", colour, suitSymbol) + END;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        cardArt[3] \u003d WHITE_B + \"         \" + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        cardArt[4] \u003d WHITE_B + String.format(\"      %s%s%2s \", colour, BOLD, rank) + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        return cardArt;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"     * Maps the card suit to its Unicode symbol.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     * @param suit The suit of the card.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     * @return A string containing the Unicode symbol for the suit.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    private static String getSuitSymbol(Card.Suit suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        return switch (suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"                //            case HEARTS -\u003e \"♥️\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"                //            case DIAMONDS -\u003e \"♦️\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"                //            case CLUBS -\u003e \"♣️\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"                //            case SPADES -\u003e \"♠️\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"                //            case HEARTS -\u003e \"♥\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"                //            case DIAMONDS -\u003e \"♦\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"                //            case CLUBS -\u003e \"♣\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"                //            case SPADES -\u003e \"♠\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"            case HEARTS -\u003e \"H\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"            case DIAMONDS -\u003e \"D\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"            case CLUBS -\u003e \"C\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"            case SPADES -\u003e \"S\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    // Custom spacing because diff suits have diff spacing","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    private static String getRightSpacing(Card.Suit suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        return switch (suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"            case HEARTS, CLUBS -\u003e HAIR_SPACE.repeat(13);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"            case DIAMONDS -\u003e HAIR_SPACE.repeat(14);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"            case SPADES -\u003e HAIR_SPACE.repeat(12) + THIN_SPACE;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"    private static String getColour(Card.Suit suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        return switch (suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"            case HEARTS -\u003e UI.RED;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"            case DIAMONDS -\u003e UI.ORANGE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"            case CLUBS -\u003e UI.BLUE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"            case SPADES -\u003e UI.PURPLE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-25","isFullCredit":false}],"authorContributionMap":{"Markneoneo":71,"-":2}},{"path":"src/main/java/javatro/display/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeSupport;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import java.util.Objects;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" * Handles parsing and validation of user input for the javatro application.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis class is responsible for:","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":" *   \u003cli\u003eProcessing user input for card selections","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":" *   \u003cli\u003eHandling menu navigation input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":" *   \u003cli\u003eValidating input ranges and formats","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":" *   \u003cli\u003eNotifying observers (e.g., {@code JavatroManager}) of user input changes","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"public class Parser {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String MENU_PROMPT \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            BLUE + BOLD + \"Enter Option Index (1-%d)\\n\" + ARROW + END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String CARD_PROMPT \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"            BLUE","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    + UI.BOLD","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"                    + \"Enter Card Indices between 1-%d. Up to %d cards only. (e.g. 1,2,3,4,5)\\n\"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"                    + UI.ARROW","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"                    + UI.END;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"    /** Property change support for notifying observers of user input changes. */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"    private final PropertyChangeSupport support \u003d new PropertyChangeSupport(this);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     * Registers an observer to listen for user input changes.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"     * @param pcl the property change listener to register","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    public void addPropertyChangeListener(PropertyChangeListener pcl) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        if (pcl \u003d\u003d null) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidScreen();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"        support.addPropertyChangeListener(pcl);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     * Handles user input for navigating the current screen and notifies observers.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis method:","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eDisplays current screen options","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eValidates input is within the allowed range","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eNotifies registered listeners of the valid input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eClears the screen after successful input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if no options are available in current screen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"    public void getOptionInput() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"        int maxRange \u003d getCurrentScreen().getOptionsSize();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        if (maxRange \u003c\u003d 0) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidOptionsSize();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        while (true) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"                UI.clearScreen();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                getCurrentScreen().displayOptions();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                System.out.printf(MENU_PROMPT, maxRange);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"                if (!scanner.hasNextInt()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"                    //                    scanner.nextLine(); // Clear invalid input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.invalidInputType();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"                int input \u003d scanner.nextInt();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"                //                scanner.nextLine(); // Consume newline","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"                if (input \u003e\u003d 1 \u0026\u0026 input \u003c\u003d maxRange) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"                    support.firePropertyChange(\"userInput\", null, input);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"                    return;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"                throw JavatroException.invalidMenuInput(maxRange);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            } catch (Exception e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                scanner.nextLine(); // Clear invalid input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"     * Prompts the user to select card numbers and returns a list of selected card indices.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsAvailable the maximum number of available cards (1-based)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsToSelect the maximum number of cards a user can select","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"     * @return an unmodifiable list of selected card indices (0-based)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"    public static List\u003cInteger\u003e getCardInput(int maxCardsAvailable, int maxCardsToSelect) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"        while (true) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"            try {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"                // Clear screen and show header","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"                UI.clearScreen();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"                System.out.printf(CARD_PROMPT, maxCardsAvailable, maxCardsToSelect);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"                String input \u003d scanner.nextLine().trim();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"                if (input.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.invalidCardInput();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                List\u003cInteger\u003e userInput \u003d parseCardInput(input, maxCardsAvailable);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"                if (userInput.size() \u003e maxCardsToSelect) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.exceedsMaxCardSelection(maxCardsToSelect);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"                return List.copyOf(userInput);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"     * Parses and validates card input string.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"     * @param input the comma-separated input string","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsAvailable the maximum allowed card number","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"     * @return list of validated card indices (0-based)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if no valid numbers are found","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"    private static List\u003cInteger\u003e parseCardInput(String input, int maxCardsAvailable)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e userInput \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                Arrays.stream(input.split(\",\"))","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"                        .map(String::trim)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"                        .filter(s -\u003e !s.isEmpty())","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"                        .map(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"                                numStr -\u003e {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"                                    try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"                                        return Integer.parseInt(numStr);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"                                    } catch (NumberFormatException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"                                        return null;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"                                    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"                                })","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"                        .filter(Objects::nonNull)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"                        .filter(num -\u003e num \u003e\u003d 1 \u0026\u0026 num \u003c\u003d maxCardsAvailable)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"                        .map(num -\u003e num - 1)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"                        .distinct()","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        if (userInput.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidCardInput();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        return userInput;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-22","isFullCredit":false}],"authorContributionMap":{"Markneoneo":111,"flyingapricot":42,"-":19}},{"path":"src/main/java/javatro/display/UI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.DeckViewScreen;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import java.io.IOException;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import java.io.InputStream;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The {@code display} class is responsible for managing and displaying different screens in the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":" * application. It handles user input, manages screen transitions, and notifies observers of user","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":" * actions. This class follows the Singleton pattern to ensure a single instance manages all","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":" * display-related operations.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"public class UI {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /** Fixed width for the bordered message display. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    public static final int BORDER_WIDTH \u003d 100;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /** display-related constants for display formatting. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    public static final String CARD \u003d \"\\uD83C\\uDCCF\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    // region FORMATTING STRINGS","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    public static final String HEARTS \u003d \"♥️\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    public static final String SPADES \u003d \"♠️\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public static final String DIAMONDS \u003d \"♦️\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    public static final String CLUBS \u003d \"♣️\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    public static final String WARNING \u003d \"⚠️ \";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    public static final String WRITE \u003d \"✍️ \";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    public static final String ARROW \u003d \"╰┈➤ \";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    public static final String END \u003d \"\\033[0m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    public static final String BOLD \u003d \"\\033[1m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    public static final String ITALICS \u003d \"\\033[3m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    public static final String UNDERLINE \u003d \"\\033[4m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    public static final String WHITE \u003d \"\\033[97m\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    public static final String RED \u003d \"\\033[91m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    public static final String GREEN \u003d \"\\033[92m\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    public static final String YELLOW \u003d \"\\033[93m\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    public static final String BLUE \u003d \"\\033[94m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    //    public static final String PURPLE \u003d \"\\033[95m\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    public static final String PURPLE \u003d \"\\033[38;2;115;14;147m\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    public static final String CYAN \u003d \"\\033[96m\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    public static final String ORANGE \u003d \"\\033[38;2;255;165;0m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    public static final String BLACK \u003d \"\\033[30m\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    public static final String WHITE_B \u003d \"\\033[107m\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    public static final String BLACK_B \u003d \"\\033[40m\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    public static final String BLUE_B \u003d \"\\033[104m\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    public static final String RED_B \u003d \"\\033[41m\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    public static final String PURPLE_B \u003d \"\\033[48;2;115;14;147m\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    public static final String ORANGE_B \u003d \"\\033[48;2;255;165;0m\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /** Custom border characters */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"    public static final char TOP_LEFT \u003d \u0027╔\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"    public static final char TOP_RIGHT \u003d \u0027╗\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    public static final char BOTTOM_LEFT \u003d \u0027╚\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"    public static final char BOTTOM_RIGHT \u003d \u0027╝\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"    public static final char HORIZONTAL \u003d \u0027═\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    public static final char VERTICAL \u003d \u0027║\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    public static final char CROSS \u003d \u0027╬\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_UP \u003d \u0027╩\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_DOWN \u003d \u0027╦\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_LEFT \u003d \u0027╣\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_RIGHT \u003d \u0027╠\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    // Unicode spacing characters for experimentation","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"    public static final String NORMAL_SPACE \u003d \" \"; // U+0020","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    public static final String EN_SPACE \u003d \" \"; // U+2002 (1.5× normal space)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"    public static final String EM_SPACE \u003d \" \"; // U+2003 (2× normal space)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"    public static final String THIN_SPACE \u003d \" \"; // U+2009 (~½ normal space)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"    public static final String HAIR_SPACE \u003d \" \"; // U+200A (~⅓ normal space)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"    public static final String ZERO_WIDTH_SPACE \u003d \"​\"; // U+200B (invisible)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    public static final String ZERO_WIDTH_JOINER \u003d \"‍\"; // U+200D","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"    public static final String ZERO_WIDTH_NON_JOINER \u003d \"‌\"; // U+200C","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"    // endregion","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /** Parser instance for handling user input. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"    private static final Parser PARSER \u003d new Parser();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /** Predefined game-related screens. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"    private static final GameScreen GAME_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    private static final DiscardCardScreen DISCARD_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"    private static final PlayCardScreen PLAY_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"    private static final HelpScreen HELP_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"    private static final StartScreen START_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"    private static final DeckSelectScreen DECK_SELECT_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"    private static final DeckViewScreen DECK_VIEW_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"    private static final PokerHandScreen POKER_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"    private static final BlindSelectScreen BLIND_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"    private static final WinRoundScreen WIN_ROUND_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"    private static final WinGameScreen WIN_GAME_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"    private static final LoseScreen LOSE_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /** The current screen being displayed to the user. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"    private static Screen currentScreen;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"    /** The screen displayed before current screen. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"    private static Screen previousScreen;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jwyk"},"content":"    static {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"        try {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"            GAME_SCREEN \u003d new GameScreen();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"            DISCARD_SCREEN \u003d new DiscardCardScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"            PLAY_SCREEN \u003d new PlayCardScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jwyk"},"content":"            HELP_SCREEN \u003d new HelpScreen();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jwyk"},"content":"            START_SCREEN \u003d new StartScreen();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"            DECK_VIEW_SCREEN \u003d new DeckViewScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"            DECK_SELECT_SCREEN \u003d new DeckSelectScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jwyk"},"content":"            POKER_SCREEN \u003d new PokerHandScreen();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"            BLIND_SCREEN \u003d new BlindSelectScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"            WIN_ROUND_SCREEN \u003d new WinRoundScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"            WIN_GAME_SCREEN \u003d new WinGameScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"            LOSE_SCREEN \u003d new LoseScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"            System.err.println(\"Failed to initialize screens: \" + e.getMessage());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jwyk"},"content":"            throw new RuntimeException(\"Failed to initialize screens\", e);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"    // region PRINTING FUNCTIONS","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"    public static void printBlackB(String input) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(UI.BLACK_B + input + UI.END);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Prints a bordered message or menu with a title and dynamically generated content. Uses a","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * default width of 100.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"     * @param title the title of the message or menu","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"     * @param content a list of content lines","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"    public static void printBorderedContent(String title, List\u003cString\u003e content) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"        printBorderedContent(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"                title,","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"                content,","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"                BORDER_WIDTH,","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"                BORDER_WIDTH); // Calls the main method with default width","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"     * Prints a bordered message or menu with a title and dynamically generated content.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"     * @param title the title of the message or menu","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"     * @param content a list of content lines","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"     * @param titleWidth the width of the bordered content title","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public static void printBorderedContent(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"            String title, List\u003cString\u003e content, int titleWidth, int contentWidth) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        // Top border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"        printBlackB(TOP_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + TOP_RIGHT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        // Centered title","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(centerText(title, titleWidth));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"        // Middle border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"        printBlackB(T_RIGHT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + T_LEFT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"        // Display content (lines from the provider)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"        for (String line : content) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"            printBlackB(centerText(line, contentWidth));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"            System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"        // Bottom border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"        printBlackB(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"                BOTTOM_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + BOTTOM_RIGHT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Centers the given text within a specified width, padding it with spaces on both sides. This","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * version handles ANSI escape codes and Unicode characters correctly.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"     * @param text the text to center","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"     * @param width the total width to center within","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"     * @return the centered text surrounded by borders","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"    public static String centerText(String text, int width) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"        // Calculate display length accounting for ANSI codes and Unicode characters","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"        int displayLength \u003d getDisplayLength(text);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"        // Ensure width is sufficient","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"        if (width \u003c\u003d displayLength + 2) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"            return BLACK_B + VERTICAL + \" \" + text + \" \" + VERTICAL + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        // Calculate padding","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"        int paddingSize \u003d (width - displayLength - 2) / 2;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"        int extraPadding \u003d (width - displayLength - 2) % 2; // Handles odd width cases","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"        // Format the centered text with borders","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"        return BLACK_B","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"                + VERTICAL","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"                + \" \".repeat(paddingSize)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"                + text","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"                + BLACK_B","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"                + \" \".repeat(paddingSize + extraPadding)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"                + VERTICAL","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"                + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"    // Helper: pad or truncate a string to exactly \u0027width\u0027 characters.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"    public static String padToWidth(String text, int width) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"        if (getDisplayLength(text) \u003e width) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"            return text.substring(0, width);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"        } else {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"            return String.format(\"%-\" + width + \"s\", text);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"    // Helper method to pad a string to the right to a specified length.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"    public static String padRight(String text, int width) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"        if (getDisplayLength(text) \u003e\u003d width) return text.substring(0, width);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"        return String.format(\"%-\" + width + \"s\", text);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"     * Calculates the visible display length of text, ignoring ANSI codes and accounting for special","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * Unicode characters.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"     * @param text the text to measure","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"     * @return the visible length of the text","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"    public static int getDisplayLength(String text) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"        // Remove ANSI escape codes","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"        String strippedText \u003d text.replaceAll(\"\\033\\\\[[;\\\\d]*m\", \"\");","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"        // Calculate adjusted length accounting for special characters","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"        double length \u003d 0;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c strippedText.length(); i++) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"            char c \u003d strippedText.charAt(i);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"            if (c \u003d\u003d \u0027\\u200A\u0027) { // Hair space","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 0.3;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"            } else if (c \u003d\u003d \u0027\\u2009\u0027) { // Thin space","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 0.5;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"            } else if (c \u003d\u003d \u0027\\u2002\u0027) { // En space","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 1.5;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"            } else if (c \u003d\u003d \u0027\\u2003\u0027) { // Em space","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 2;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"            } else if (c \u003d\u003d \u0027\\u200B\u0027 || c \u003d\u003d \u0027\\u200C\u0027 || c \u003d\u003d \u0027\\u200D\u0027) { // Zero-width","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"                // No addition to length","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"Markneoneo"},"content":"            } else if (c \u003e\u003d \u0027\\uD800\u0027 \u0026\u0026 c \u003c\u003d \u0027\\uDFFF\u0027) { // Surrogate pairs (emoji)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 2;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"Markneoneo"},"content":"                i++; // Skip the next char in the pair","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"            } else {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 1;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"Markneoneo"},"content":"        return (int) Math.round(length);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"     * Generates a list of strings representing the ASCII art lines for all cards in the hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"     * @param holdingHand the list of cards to render","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"     * @return List of strings where each string represents a line of card art","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"Markneoneo"},"content":"    public static List\u003cString\u003e getCardArtLines(List\u003cCard\u003e holdingHand) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e cardArtLines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"Markneoneo"},"content":"        int cardCount \u003d holdingHand.size();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"Markneoneo"},"content":"        int cardLength \u003d 5; // Number of lines per card","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"Markneoneo"},"content":"        // Render each card into its ASCII art representation","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"Markneoneo"},"content":"        String[][] renderedCards \u003d new String[cardCount][cardLength];","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c cardCount; i++) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"Markneoneo"},"content":"            renderedCards[i] \u003d CardRenderer.renderCard(holdingHand.get(i));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"        // Combine the card art line by line","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"        for (int line \u003d 0; line \u003c cardLength; line++) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"Markneoneo"},"content":"            StringBuilder lineBuilder \u003d new StringBuilder();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"Markneoneo"},"content":"            for (int i \u003d 0; i \u003c cardCount; i++) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"                lineBuilder.append(renderedCards[i][line]);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"                if (i \u003c cardCount - 1) { // Add space only if there\u0027s another card after this one","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"Markneoneo"},"content":"                    lineBuilder.append(BLACK_B + \"  \" + END);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"Markneoneo"},"content":"            cardArtLines.add(lineBuilder.toString());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"Markneoneo"},"content":"        return cardArtLines;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"Markneoneo"},"content":"    public static void printANSI(String fileName) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"-"},"content":"        try (InputStream inputStream \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"-"},"content":"                WinRoundScreen.class.getResourceAsStream(\"/javatro/display/ansi/\" + fileName)) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"Markneoneo"},"content":"            if (inputStream \u003d\u003d null) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"Markneoneo"},"content":"                throw JavatroException.errorLoadingLogo(fileName);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"Markneoneo"},"content":"            try (Scanner scanner \u003d new Scanner(inputStream, StandardCharsets.UTF_8)) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"-"},"content":"                System.out.println(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"-"},"content":"                        scanner.useDelimiter(\"\\\\A\").next()); // Print file content directly","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"Markneoneo"},"content":"        } catch (IOException | JavatroException e) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"Markneoneo"},"content":"            System.err.println(JavatroException.errorLoadingLogo(fileName).getMessage());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"Markneoneo"},"content":"            System.out.println(\"JIMBO\"); // Fallback print if file is not found","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"Markneoneo"},"content":"    //    static {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"Markneoneo"},"content":"    //        try (InputStream inputStream \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"-"},"content":"    //                     StartScreen.class.getResourceAsStream(\"/javatro/display/ansi/jimbo.txt\"))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"-"},"content":"    // {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"Markneoneo"},"content":"    //            if (inputStream \u003d\u003d null) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"Markneoneo"},"content":"    //                throw JavatroException.errorLoadingLogo(\"jimbo.txt\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"Markneoneo"},"content":"    //            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"Markneoneo"},"content":"    //            try (Scanner scanner \u003d new Scanner(inputStream, StandardCharsets.UTF_8)) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"Markneoneo"},"content":"    //                JIMBO \u003d scanner.useDelimiter(\"\\\\A\").next(); // Read the entire file","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"Markneoneo"},"content":"    //            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"Markneoneo"},"content":"    //        } catch (IOException | JavatroException e) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"Markneoneo"},"content":"    //            JIMBO \u003d \"JIMBO\"; // Fallback in case of error","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"Markneoneo"},"content":"    //            System.err.println(JavatroException.errorLoadingLogo(\"jimbo.txt\").getMessage());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"Markneoneo"},"content":"    //        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"Markneoneo"},"content":"    //    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"Markneoneo"},"content":"    // endregion","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"jwyk"},"content":"     * Gets the current screen being displayed.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"jwyk"},"content":"     * @return the current {@link Screen}","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"jwyk"},"content":"    public static Screen getCurrentScreen() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"jwyk"},"content":"        return currentScreen;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"flyingapricot"},"content":"     * Sets the current screen and displays it.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"Markneoneo"},"content":"     * @param screen the screen to be displayed","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"Markneoneo"},"content":"     * @throws IllegalArgumentException if the provided screen is {@code null}","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"Markneoneo"},"content":"    public void setCurrentScreen(Screen screen) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"Markneoneo"},"content":"        if (screen \u003d\u003d null) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"Markneoneo"},"content":"        // Store the current screen as previous before changing","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"Markneoneo"},"content":"        if (currentScreen !\u003d null) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"Markneoneo"},"content":"            previousScreen \u003d currentScreen;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"-"},"content":"        System.out.printf(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"-"},"content":"                \"%s%sTransitioning to: %s%s\\n\",","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"-"},"content":"                ORANGE, UNDERLINE, screen.getClass().getSimpleName(), END);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"Markneoneo"},"content":"        currentScreen \u003d screen;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"flyingapricot"},"content":"        currentScreen.displayScreen();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"Markneoneo"},"content":"        PARSER.getOptionInput(); // This will handle retries internally","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"Markneoneo"},"content":"     * Gets the previous screen that was displayed before the current one.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"Markneoneo"},"content":"     * @return the previous {@link Screen}, or null if there wasn\u0027t one","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"Markneoneo"},"content":"    public static Screen getPreviousScreen() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"Markneoneo"},"content":"        return previousScreen;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"-"},"content":"    /** Clears the console screen. This method uses ANSI escape codes to clear the console. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"Markneoneo"},"content":"    public static void clearScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"Markneoneo"},"content":"        final String FLUSH \u003d \"\\033[H\\033[2J\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(FLUSH);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"Markneoneo"},"content":"        System.out.flush(); // Ensure the output is flushed","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"Markneoneo"},"content":"     * Gets the parser instance for handling user input.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link Parser} instance","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"flyingapricot"},"content":"    public static Parser getParser() {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"Markneoneo"},"content":"        return PARSER;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"Markneoneo"},"content":"    // region Screen Getters","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"Markneoneo"},"content":"     * Gets the screen where users select cards to discard.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link DiscardCardScreen} instance","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"Markneoneo"},"content":"    public static DiscardCardScreen getDiscardScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"Markneoneo"},"content":"        return DISCARD_SCREEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"Markneoneo"},"content":"     * Gets the screen where users select cards to play.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link PlayCardScreen} instance","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"Markneoneo"},"content":"    public static PlayCardScreen getPlayScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"Markneoneo"},"content":"        return PLAY_SCREEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"flyingapricot"},"content":"     * Gets the game screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link GameScreen} instance","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"flyingapricot"},"content":"    public static GameScreen getGameScreen() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"Markneoneo"},"content":"        return GAME_SCREEN;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"flyingapricot"},"content":"     * Gets the start screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link StartScreen} instance","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"flyingapricot"},"content":"    public static StartScreen getStartScreen() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"Markneoneo"},"content":"        return START_SCREEN;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"Markneoneo"},"content":"     * Gets the help screen.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link HelpScreen} instance","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"Markneoneo"},"content":"    public static HelpScreen getHelpScreen() {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"Markneoneo"},"content":"        return HELP_SCREEN;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"Markneoneo"},"content":"     * Gets the poker hand screen.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link PokerHandScreen} instance","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"Markneoneo"},"content":"    public static PokerHandScreen getPokerHandScreen() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"Markneoneo"},"content":"        return POKER_SCREEN;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"Markneoneo"},"content":"     * Gets the Deck screen.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link DeckViewScreen} instance","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"Markneoneo"},"content":"    public static DeckViewScreen getDeckViewScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"Markneoneo"},"content":"        return DECK_VIEW_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"jwyk"},"content":"     * Gets the help screen.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"jwyk"},"content":"     * @return the {@link HelpScreen} instance","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"Markneoneo"},"content":"    public static DeckSelectScreen getDeckSelectScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"jwyk"},"content":"        return DECK_SELECT_SCREEN;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"Markneoneo"},"content":"     * Gets the help screen.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link HelpScreen} instance","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"Markneoneo"},"content":"    public static WinRoundScreen getWinRoundScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"Markneoneo"},"content":"        return WIN_ROUND_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"Markneoneo"},"content":"     * Gets the help screen.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link HelpScreen} instance","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"Markneoneo"},"content":"    public static WinGameScreen getWinGameScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"Markneoneo"},"content":"        return WIN_GAME_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"Markneoneo"},"content":"     * Gets the help screen.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link HelpScreen} instance","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"Markneoneo"},"content":"    public static LoseScreen getLoseScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"Markneoneo"},"content":"        return LOSE_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"-"},"content":"    // @@author swethaiscool","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"-"},"content":"     * Returns the singleton instance of the {@code BlindSelectScreen}.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"-"},"content":"     * @return the {@code BlindSelectScreen} instance.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"-"},"content":"    public static BlindSelectScreen getBlindScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"-"},"content":"        return BLIND_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"-"},"content":"    // @@author swethaiscool","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":502,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":363,"flyingapricot":33,"-":61,"jwyk":45}},{"path":"src/main/java/javatro/display/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code View} package contains all the classes related to the game\u0027s user interface (display).","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * This includes screen management, user interactions, and visual representation of game elements.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis package is responsible for rendering different game screens, handling user input, and","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * managing screen transitions.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eClasses in this package:\u003c/h2\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.GameScreen} - Displays the current game round, including player","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" *       stats and cards.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.JavatroView} - Manages the overall display and controls screen","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" *       transitions.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.OptionScreen} - Represents the options menu where users can","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":" *       change game settings.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.Screen} - An abstract base class for all screens, providing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":" *       common functionalities.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.SelectCardsToDiscardScreen} - Allows users to select cards to","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" *       discard.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.SelectCardsToPlayScreen} - Allows users to select cards to","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":" *       play.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.SelectionScreen} - A screen for selecting game elements,","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":" *       extended by other selection screens.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.StartScreen} - The main menu screen that provides options to","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":" *       start or exit the game.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":19,"-":10}},{"path":"src/main/java/javatro/display/screens/BlindSelectScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.Ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.manager.options.AcceptBlindOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import javatro.manager.options.RejectBlindOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"// @@author swethaiscool","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Represents the screen for selecting the blind in the game. This screen provides options to accept","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":" * or reject the blind and visually displays the current blind settings.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class BlindSelectScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Constructs a BlindSelectScreen and initializes the available options.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws JavatroException if there is an error initializing the screen.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public BlindSelectScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(\"BLIND MENU\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        commandMap.add(new AcceptBlindOption());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        commandMap.add(new RejectBlindOption());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Displays the Blind Selection screen with highlighted sections based on the current blind","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * setting.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"        int activeSelection \u003d getCurrentBlindIndex();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        int sectionWidth \u003d UI.BORDER_WIDTH / 3;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        drawTopBorder(activeSelection, sectionWidth);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"        drawContentRows(activeSelection, sectionWidth);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"        drawBottomBorder(activeSelection, sectionWidth);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Determines the index of the current active blind setting.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @return the index of the current blind (0 for Small Blind, 1 for Large Blind, 2 for Boss","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     Blind).","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private int getCurrentBlindIndex() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Ante.Blind currentBlind \u003d JavatroCore.getAnte().getBlind();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return (currentBlind \u003d\u003d Ante.Blind.SMALL_BLIND)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"                ? 0","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"                : (currentBlind \u003d\u003d Ante.Blind.LARGE_BLIND) ? 1 : 2;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Draws the top border of the screen with highlighted sections.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param activeSelection the index of the currently active blind.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param sectionWidth the width of each section.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void drawTopBorder(int activeSelection, int sectionWidth) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"        System.out.print(getHighlightedChar(activeSelection \u003d\u003d 0, UI.TOP_LEFT));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"            if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003c\u003d 1, UI.T_DOWN));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"            String horizontalLine \u003d String.valueOf(UI.HORIZONTAL).repeat(sectionWidth - 1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"            System.out.print(getHighlightedChar(activeSelection \u003d\u003d i, horizontalLine));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"            if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003e\u003d 1, UI.T_DOWN));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"        System.out.println(getHighlightedChar(activeSelection \u003d\u003d 2, UI.TOP_RIGHT));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Draws the content rows of the screen, displaying blind options and their corresponding","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * values.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @param activeSelection the index of the currently active blind.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @param sectionWidth the width of each section.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private void drawContentRows(int activeSelection, int sectionWidth) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"        List\u003cString[]\u003e contentRows \u003d generateContentData();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"        for (String[] row : contentRows) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"            System.out.print(getHighlightedChar(activeSelection \u003d\u003d 0, UI.VERTICAL));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"                if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    System.out.print(getHighlightedChar(activeSelection \u003c\u003d 1, UI.VERTICAL));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"                String centeredText \u003d centerInSection(row[i], sectionWidth - 1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003d\u003d i, centeredText));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"                if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"                    System.out.print(getHighlightedChar(activeSelection \u003e\u003d 1, UI.VERTICAL));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"            System.out.println(getHighlightedChar(activeSelection \u003d\u003d 2, UI.VERTICAL));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Generates the content data for the blind selection display.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @return a list of string arrays representing different rows of the screen.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private List\u003cString[]\u003e generateContentData() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"        List\u003cString[]\u003e contentRows \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"            contentRows.add(new String[] {\"\", \"\", \"\"});","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"        contentRows.add(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"                new String[] {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"                    Ante.Blind.SMALL_BLIND.getName(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"                    Ante.Blind.LARGE_BLIND.getName(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    Ante.Blind.BOSS_BLIND.getName()","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"                });","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"        contentRows.add(new String[] {\"\", \"\", \"\"});","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"        contentRows.add(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"                new String[] {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"                    String.valueOf(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"                            (int)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"                                    (JavatroCore.getAnte().getAnteScore()","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"                                            * Ante.Blind.SMALL_BLIND.getMultiplier())),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"                    String.valueOf(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"                            (int)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"                                    (JavatroCore.getAnte().getAnteScore()","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"                                            * Ante.Blind.LARGE_BLIND.getMultiplier())),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"                    String.valueOf(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"                            (int)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"                                    (JavatroCore.getAnte().getAnteScore()","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                                            * Ante.Blind.BOSS_BLIND.getMultiplier()))","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"                });","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"            contentRows.add(new String[] {\"\", \"\", \"\"});","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"        return contentRows;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Draws the bottom border of the screen with highlighted sections.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * @param activeSelection the index of the currently active blind.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * @param sectionWidth the width of each section.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"    private void drawBottomBorder(int activeSelection, int sectionWidth) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"        System.out.print(getHighlightedChar(activeSelection \u003d\u003d 0, UI.BOTTOM_LEFT));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"            if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003c\u003d 1, UI.T_UP));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"            String horizontalLine \u003d String.valueOf(UI.HORIZONTAL).repeat(sectionWidth - 1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"            System.out.print(getHighlightedChar(activeSelection \u003d\u003d i, horizontalLine));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"            if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003e\u003d 1, UI.T_UP));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"        System.out.println(getHighlightedChar(activeSelection \u003d\u003d 2, UI.BOTTOM_RIGHT));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Centers text within a given width.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * @param text the text to center.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * @param width the width of the section.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * @return the centered text.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"    private String centerInSection(String text, int width) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"        int textLength \u003d text.length();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"        int padding \u003d Math.max(0, width - textLength);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"        int leftPad \u003d padding / 2;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"        int rightPad \u003d padding - leftPad;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return \" \".repeat(leftPad) + text + \" \".repeat(rightPad);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Highlights a character if it is part of the active selection.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * @param isActive whether the section is active.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * @param character the character to highlight.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * @return the highlighted character.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"    private String getHighlightedChar(boolean isActive, char character) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"        return getHighlightedChar(isActive, String.valueOf(character));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * Highlights a string if it is part of the active selection.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * @param isActive whether the section is active.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * @param text the text to highlight.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * @return the highlighted text.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"-"},"content":"    private String getHighlightedChar(boolean isActive, String text) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"        if (isActive) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return UI.YELLOW + text + UI.END;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"            return text;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"-":214,"jwyk":11}},{"path":"src/main/java/javatro/display/screens/CardSelectScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BORDER_WIDTH;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOTTOM_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOTTOM_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.HORIZONTAL;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.TOP_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.TOP_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.T_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.T_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.centerText;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static javatro.display.UI.getCardArtLines;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.printBlackB;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.printBorderedContent;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.HoldingHand;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" * The {@code CardSelectScreen} class represents an abstract screen where users select cards from","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":" * their hand. It provides methods for updating and displaying the player\u0027s current hand. This class","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":" * is intended to be extended by specific screens like {@code DiscardCardScreen} and {@code","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":" * PlayCardScreen}.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThe class includes functionality to:","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":" *   \u003cli\u003eUpdate the player\u0027s current hand of cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":" *   \u003cli\u003eDisplay the player\u0027s hand in a formatted layout.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":" *   \u003cli\u003eProvide a default selection limit for card selection.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":" * @see Screen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"public abstract class CardSelectScreen extends Screen {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /** The list of cards currently in the player\u0027s hand. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"    private List\u003cCard\u003e holdingHand;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"    private SortOrder currentSortOrder;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Constructs a {@code CardSelectScreen} with a custom options title and initializes it with a","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * resume game command.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"     * @param optionsTitle The title to display for the option menu.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during initialization.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"     * @throws IllegalArgumentException if the options title is null or empty.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"    public CardSelectScreen(String optionsTitle) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        super(optionsTitle);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        // Add the \"Select Cards\" and \"Resume Game\" options","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new CardSelectOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new SortBySuitOption(this));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new SortByRankOption(this));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new PokerHandOption());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new DeckViewOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new ResumeGameOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"     * Updates the holding hand by retrieving the player\u0027s current hand from the game core.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"     * @param sortOrder The sorting order to apply (null for no sorting)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"    public void updateHoldingHand(SortOrder sortOrder) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        // Get current Holding Hand","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        this.holdingHand \u003d new ArrayList\u003c\u003e(JavatroCore.currentRound.getPlayerHand());","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        this.currentSortOrder \u003d sortOrder !\u003d null ? sortOrder : SortOrder.ORIGINAL;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        // Apply sorting if requested","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        if (sortOrder !\u003d null \u0026\u0026 sortOrder !\u003d SortOrder.ORIGINAL) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"            HoldingHand tempHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"            tempHand.Hand \u003d new ArrayList\u003c\u003e(this.holdingHand);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"            switch (sortOrder) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"                case BY_SUIT:","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"                    tempHand.sortBySuit();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"                    break;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"                case BY_RANK:","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"                    tempHand.sortByRank();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"                    break;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"                default: // Should not happen at all.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"                    break;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"            this.holdingHand \u003d tempHand.getHand();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        // Update holding hand for proper selection index","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        JavatroCore.currentRound.playerHand.setHand(holdingHand);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"     * Generates and returns the formatted card indices title string for the player\u0027s hand.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"     * @param cardCount the number of cards in the hand","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"     * @return formatted string showing card indices with proper spacing and coloring","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"    protected String getCardIndicesTitle(int cardCount) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder title \u003d new StringBuilder();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 1; i \u003c\u003d cardCount; i++) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"            title.append(YELLOW).append(BOLD).append(\"\u003c\").append(i).append(\"\u003e\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"            // Only add spacing if not the last element","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"            if (i \u003c cardCount) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"                //                title.append(HAIR_SPACE.repeat(18));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"                title.append(\" \".repeat(8));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"        title.append(END);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"        return title.toString();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Displays the player\u0027s current hand of cards in a formatted layout with borders. The cards are","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * displayed with their indices and ASCII art, with special formatting for the middle line of","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * card art.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"    public void displayHoldingHand() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        // Sort hand if chosen","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"        updateHoldingHand(currentSortOrder);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"        if (holdingHand.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"            printBorderedContent(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    \"CURRENT HOLDING HAND\", List.of(RED + \"YOU HAVE NO MORE CARDS!\" + END));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"            return;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        int cardCount \u003d holdingHand.size();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"        // Top border","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"        printBlackB(TOP_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + TOP_RIGHT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"        // Card Indices title","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        String indicesTitle \u003d getCardIndicesTitle(cardCount);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(centerText(indicesTitle, 100)); // 81","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"        // Middle border","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"        printBlackB(T_RIGHT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + T_LEFT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        // Get and display card art","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e cardArtLines \u003d getCardArtLines(holdingHand);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c cardArtLines.size(); i++) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"            String line \u003d cardArtLines.get(i);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"            // Apply a different border style for the 3rd line (index 2)","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"            if (i \u003d\u003d 2) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"                printBlackB(centerText(line, 100)); // 110","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"            } else {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"                printBlackB(centerText(line, BORDER_WIDTH));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"            System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"        // Bottom border","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"        printBlackB(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"                BOTTOM_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + BOTTOM_RIGHT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Displays the screen. This method is intended to be overridden by subclasses to provide","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * specific screen display behavior.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"    public abstract void displayScreen();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"jwyk"},"content":"    // Add an enum for sorting options","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"jwyk"},"content":"    public enum SortOrder {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"jwyk"},"content":"        ORIGINAL,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"jwyk"},"content":"        BY_SUIT,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"jwyk"},"content":"        BY_RANK,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":131,"-":28,"jwyk":28}},{"path":"src/main/java/javatro/display/screens/DeckSelectScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"/**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * The {@code DeckSelectScreen} class represents the game screen where players can select the","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * desired deck they want.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public class DeckSelectScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"     * Constructs a {@code StartScreen} and initializes available commands.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"     * @throws JavatroException if the options title is invalid or if there is an error initializing","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"     *     the screen","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    public DeckSelectScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        super(\"Select Your Deck\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"        super.commandMap.add(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"                new DeckSelectOption(\"Red Deck: +1 Discards per Round\", Deck.DeckType.RED));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super.commandMap.add(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"                new DeckSelectOption(\"Blue Deck: +1 Hands per Round\", Deck.DeckType.BLUE));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        super.commandMap.add(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new DeckSelectOption(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"                        \"Checkered Deck: Start with 26 Hearts, 26 Spades\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"                        Deck.DeckType.CHECKERED));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super.commandMap.add(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new DeckSelectOption(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"                        \"Abandoned Deck: Start with no Face Cards (K, Q, J)\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        Deck.DeckType.ABANDONED));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    /** Displays the Deck Select screen. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    public void displayScreen() {}","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":4,"-":14,"jwyk":20}},{"path":"src/main/java/javatro/display/screens/DeckViewScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLUE_B;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOTTOM_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOTTOM_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.CROSS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.HORIZONTAL;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.ORANGE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.ORANGE_B;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.PURPLE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.PURPLE_B;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.TOP_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.TOP_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.T_DOWN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.T_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.T_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.T_UP;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.VERTICAL;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.WHITE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.centerText;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.padToWidth;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"import javatro.core.Round;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"import javatro.manager.options.ReturnOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":" * DeckViewScreen prints the current deck as a two-dimensional table with totals. - The rows","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":" * represent card suits (Spades, Hearts, Clubs, Diamonds) with an extra column at the end showing","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":" * the total number of cards in that suit. - The columns represent card ranks in descending order:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":" * A, K, Q, J, 10, 9, …, 2, with an extra row at the bottom showing the total count for each rank.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":" * The bottom right cell displays the grand total.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"public class DeckViewScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    // Overall dimensions: total width \u003d LEFT_WIDTH + RIGHT_WIDTH + 3 (for the vertical borders)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    private static final int LEFT_WIDTH \u003d 17; // For deck name or suit names (including suit totals)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    private static final int RIGHT_WIDTH \u003d 80; // For rank headers and the numbers matrix","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    // Total width \u003d 17 + 80 + 3 \u003d 100","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a screen with the specified options title.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the options title is null or empty","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    public DeckViewScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        super(\"Your Current Deck\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new ReturnOption());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        Deck deck \u003d Round.deck;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"        String deckType \u003d String.valueOf(deck.getDeckName());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        ArrayList\u003cCard\u003e remainingCardList \u003d deck.getWholeDeck();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        // Step 1: Build the data matrix.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        // There are 4 suits and 13 ranks.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"        int[][] counts \u003d new int[4][13];","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"        for (Card card : remainingCardList) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"            int suitIndex \u003d getSuitIndex(card.suit());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"            int rankIndex \u003d getRankIndex(card.rank());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"            if (suitIndex !\u003d -1 \u0026\u0026 rankIndex !\u003d -1) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"                counts[suitIndex][rankIndex]++;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        // Step 2: Compute totals.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        int[] suitTotals \u003d new int[4]; // Total cards per suit.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        int[] rankTotals \u003d new int[13]; // Total cards per rank.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        int grandTotal \u003d 0;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 4; i++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"            for (int j \u003d 0; j \u003c 13; j++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"                suitTotals[i] +\u003d counts[i][j];","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"                rankTotals[j] +\u003d counts[i][j];","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"                grandTotal +\u003d counts[i][j];","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        // Define the order of ranks and suits.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        // X-axis (columns): A, K, Q, J, 10, 9, ... , 2.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"        String[] rankOrder \u003d {\"A\", \"K\", \"Q\", \"J\", \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"};","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"        // Y-axis (rows): Spades, Hearts, Clubs, Diamonds.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        String[] suitOrder \u003d {\"Spades\", \"Hearts\", \"Clubs\", \"Diamonds\"};","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        // Suit Colours","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        String[] suitColour \u003d {PURPLE, RED, BLUE, ORANGE};","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"        // Suit Colour Backgrounds","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        String[] suitColourB \u003d {PURPLE_B, RED_B, BLUE_B, ORANGE_B};","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        // Step 3: Build the 4-box table manually.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"        // --- Top Border (spanning both boxes) ---","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // Format: TOP_LEFT + left box top border (LEFT_WIDTH chars) + T_DOWN + right box top border","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // (RIGHT_WIDTH chars) + TOP_RIGHT","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"                .append(TOP_LEFT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(LEFT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"                .append(T_DOWN)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(RIGHT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"                .append(TOP_RIGHT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"        // --------- Top Row Content: Left Box (Deck Name) and Right Box (Rank Header) ---------","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"        // Left box: deck name centered in LEFT_WIDTH.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jwyk"},"content":"        String deckName \u003d centerText(deckType, LEFT_WIDTH + 2);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"        // Right box: rank headers.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"        // For 13 ranks, use 5 chars each, and for the total header use 15 chars.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder rankHeader \u003d new StringBuilder();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"        for (String rank : rankOrder) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"            rankHeader.append(String.format(\"%5s\", rank));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"        rankHeader.append(String.format(\"%15s\", \"Total\" + \"     \"));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"        // Now, print the row with vertical borders.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"        sb.append(BOLD)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .append(deckName)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .append(BOLD)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"                .append(rankHeader)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"        // --- Separator between top and bottom boxes ---","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // Format: T_RIGHT + left box separator (LEFT_WIDTH chars) + CROSS + right box separator","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // (RIGHT_WIDTH chars) + T_LEFT","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"                .append(T_RIGHT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(LEFT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"                .append(CROSS)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(RIGHT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"                .append(T_LEFT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        // --- Bottom Content Rows ---","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        // We need to print 5 rows: 4 suit rows and 1 totals row (merged into the same box).","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"        // For each suit row:","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"        //        String[] suitSpace \u003d {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"        //            HAIR_SPACE.repeat(9) + THIN_SPACE,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"        //            HAIR_SPACE.repeat(10),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        //            HAIR_SPACE.repeat(10),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        //            HAIR_SPACE.repeat(8)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"        //        };","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c suitOrder.length; i++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"            // Left box: Suit label","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"            String suitLabel \u003d String.format(\"%s%s%s\", suitColour[i], suitOrder[i], END);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"            String leftContent \u003d centerText(suitLabel, LEFT_WIDTH + 2);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"            // Right box: For this suit, print 13 numbers (each in 5 chars) then pad the totals","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"            // column with spaces (15 chars).","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"            StringBuilder rightContent \u003d new StringBuilder();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"            for (int j \u003d 0; j \u003c rankOrder.length; j++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"                rightContent.append(String.format(\"%5d\", counts[i][j]));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"            rightContent.append(String.format(\"%15s\", suitTotals[i] + \"      \"));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"            String rightRow \u003d suitColourB[i] + padToWidth(rightContent.toString(), RIGHT_WIDTH);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"            // Print the row with vertical borders.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"            sb.append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"                    .append(BOLD)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"                    .append(leftContent)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"                    .append(WHITE)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"                    .append(rightRow)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"                    .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"                    .append(VERTICAL)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"                    .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"        // Totals row (for ranks) in bottom right, and label \"Total\" in bottom left.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"        String leftTotals \u003d centerText(\"Total\", LEFT_WIDTH + 2);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder rightTotals \u003d new StringBuilder();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"        for (int j \u003d 0; j \u003c rankOrder.length; j++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"            rightTotals.append(String.format(\"%5d\", rankTotals[j]));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"        rightTotals.append(String.format(\"%9d\", grandTotal));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"        String rightTotalsRow \u003d padToWidth(rightTotals.toString(), RIGHT_WIDTH);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"        sb.append(BOLD)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"                .append(leftTotals)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"                .append(rightTotalsRow)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"        // --- Bottom Border ---","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"        // Format: BOTTOM_LEFT + left box bottom border (LEFT_WIDTH chars) + T_UP + right box bottom","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // border (RIGHT_WIDTH chars) + BOTTOM_RIGHT","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"                .append(BOTTOM_LEFT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(LEFT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"                .append(T_UP)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(RIGHT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"                .append(BOTTOM_RIGHT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"                .append(END);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"        // Finally, print the complete table.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(sb);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Maps a card suit to a row index. Order: Spades -\u003e 0, Hearts -\u003e 1, Clubs -\u003e 2, Diamonds -\u003e 3.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"    private int getSuitIndex(Card.Suit suit) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"        return switch (suit) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"            case SPADES -\u003e 0;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"            case HEARTS -\u003e 1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"            case CLUBS -\u003e 2;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"            case DIAMONDS -\u003e 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"            default -\u003e -1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"    /** Maps a card rank to a column index based on the desired order: A, K, Q, J, 10, 9, …, 2. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"    private int getRankIndex(Card.Rank rank) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"        String symbol \u003d rank.getSymbol();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"        return switch (symbol) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"            case \"A\" -\u003e 0;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"            case \"K\" -\u003e 1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"            case \"Q\" -\u003e 2;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"            case \"J\" -\u003e 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"            case \"10\" -\u003e 4;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"            case \"9\" -\u003e 5;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"            case \"8\" -\u003e 6;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"            case \"7\" -\u003e 7;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"            case \"6\" -\u003e 8;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"            case \"5\" -\u003e 9;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"            case \"4\" -\u003e 10;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"            case \"3\" -\u003e 11;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"            case \"2\" -\u003e 12;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"            default -\u003e -1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":180,"-":31,"jwyk":35}},{"path":"src/main/java/javatro/display/screens/DiscardCardScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The {@code DiscardCardScreen} class represents a screen where the user selects cards to discard.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * It extends {@code CardSelectScreen} and includes commands for making a selection. The user can","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * select up to a predefined limit of cards (default is 5).","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * @see CardSelectScreen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class DiscardCardScreen extends CardSelectScreen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Constructs a {@code DiscardCardScreen} and initializes the selection command. The selection","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * limit is set to 5, meaning a maximum of 5 cards can be selected to discard.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during initialization.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    public DiscardCardScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        super(\"SELECT CARDS TO DISCARD\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Displays the current cards in the user\u0027s holding hand for selection. This method overrides","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * the parent class implementation to provide specific behavior for discarding cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        super.displayHoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":14,"flyingapricot":11,"-":7}},{"path":"src/main/java/javatro/display/screens/GameScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.centerText;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeEvent;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import java.util.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"public class GameScreen extends Screen implements PropertyChangeListener {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    private static int blindScore \u003d 0;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    private static long roundScore \u003d 0;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    private static int handsLeft \u003d 0;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    private static int discardsLeft \u003d 0;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    private static List\u003cCard\u003e holdingHand;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    private String roundName \u003d \"\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    private String roundDescription \u003d \"\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    public GameScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        super(\"GAME MENU\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new PlayCardOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new DiscardCardOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new PokerHandOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new DeckViewOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    // 100 \u003d 32 + 32 + 32 + 4 borders","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    private static final int COLUMN_WIDTH \u003d 32;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        clearScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        // --- Top Border ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"                .append(TOP_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"                .append(TOP_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        // --- Blind Name / Description ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        String blindHeader \u003d BOLD + PURPLE + roundName + END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        String blindDesc \u003d ITALICS + roundDescription + END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        sb.append(centerText(blindHeader, BORDER_WIDTH)).append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        sb.append(centerText(blindDesc, BORDER_WIDTH)).append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        // --- Separator Border ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"                .append(T_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"                .append(T_DOWN)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"                .append(T_DOWN)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"                .append(T_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"        // --- Blind Score / Ante / Round ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        String bs \u003d String.format(\"Score to beat: %d\", blindScore);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        String bScore \u003d centerText(bs, COLUMN_WIDTH + 2);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String anteCount \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"                String.format(\"          Ante: %d / 8\", JavatroCore.getAnte().getAnteCount());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        String roundCount \u003d String.format(\"            Round: %d\", JavatroCore.getRoundCount());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        // Print the row with vertical borders.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        sb.append(bScore)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"                .append(padToWidth(anteCount, COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"                .append(padToWidth(roundCount, COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"        // --- Separator Border ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"                .append(T_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"                .append(CROSS)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"                .append(CROSS)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                .append(T_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        // --- Round Score / Hands / Discards ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        String rs \u003d String.format(\"Round Score: %d\", roundScore);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        String rScore \u003d centerText(rs, COLUMN_WIDTH + 2);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"        String handCount \u003d String.format(\"            Hands: %d\", handsLeft);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"        String discardCount \u003d String.format(\"          Discards: %d\", discardsLeft);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        // Print the row with vertical borders.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        sb.append(rScore)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"                .append(padToWidth(handCount, COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"                .append(padToWidth(discardCount, COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"        // --- Separator Border ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"                .append(T_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"                .append(CROSS)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"                .append(T_UP)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"                .append(T_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH * 2 + 1))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"        // --- Deck Name / Jokers / Holding Hand ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e extraContent \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"        extraContent.add(\"Current Deck:\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jwyk"},"content":"        extraContent.add(JavatroCore.deck.getDeckName().getName());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"        extraContent.add(\"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"        extraContent.add(\"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"        extraContent.add(\"Jokers\u0027 Effects:\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"        // Iterate through heldJokers and print their toString() or \"Empty\" if null","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"        List\u003cJoker\u003e jokers \u003d JavatroCore.heldJokers.getJokers();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"            if (i \u003c jokers.size() \u0026\u0026 jokers.get(i) !\u003d null) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"                extraContent.add(jokers.get(i).toString());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"            } else {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"                extraContent.add(\"No Joker Available\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        // Split into two groups of 4","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e firstHalf \u003d holdingHand.subList(0, 4);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e secondHalf \u003d holdingHand.subList(4, 8);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"        // Get card art for both halves","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e firstCardArt \u003d getCardArtLines(firstHalf);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e secondCardArt \u003d getCardArtLines(secondHalf);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"        // Print side-by-side","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c firstCardArt.size(); i++) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"            String extraLine \u003d extraContent.get(i); // Get the corresponding line of extra content","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"            String cardLine \u003d firstCardArt.get(i); // Get the corresponding line of card art","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"            sb.append(centerText(extraLine, COLUMN_WIDTH + 2))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"                    .append(\" \".repeat(11))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"                    .append(cardLine)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"                    .append(\" \".repeat(12))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"                    .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"                    .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH * 2 + 1))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"        // Print side-by-side","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c secondCardArt.size(); i++) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"            String extraLine \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"                    extraContent.get(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"                            i + firstCardArt.size()); // Get the corresponding line of extra content","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"            String cardLine \u003d secondCardArt.get(i); // Get the corresponding line of card art","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"            sb.append(centerText(extraLine, COLUMN_WIDTH + 2))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"                    .append(\" \".repeat(12))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"                    .append(cardLine)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"                    .append(\" \".repeat(11))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"                    .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"                    .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH * 2 + 1))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"        // --- Bottom Border ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"                .append(BOTTOM_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"                .append(T_UP)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH * 2 + 1))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"                .append(BOTTOM_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"                .append(END);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"        // Finally, print the complete table.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(sb);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"flyingapricot"},"content":"    public void propertyChange(PropertyChangeEvent evt) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"flyingapricot"},"content":"        String propertyName \u003d evt.getPropertyName();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"flyingapricot"},"content":"        Object newValue \u003d evt.getNewValue();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cString, Consumer\u003cObject\u003e\u003e handlers \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"roundName\", v -\u003e roundName \u003d v.toString());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"roundDescription\", v -\u003e roundDescription \u003d v.toString());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"remainingPlays\", v -\u003e handsLeft \u003d (Integer) v);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"remainingDiscards\", v -\u003e discardsLeft \u003d (Integer) v);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"blindScore\", v -\u003e blindScore \u003d (Integer) v);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"currentScore\", v -\u003e roundScore \u003d (Long) v);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"        handlers.put(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"                \"holdingHand\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"-"},"content":"                v -\u003e {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"                    List\u003c?\u003e rawList \u003d (List\u003c?\u003e) v;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"                    holdingHand \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"                            rawList.stream()","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"                                    .filter(Card.class::isInstance)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"                                    .map(Card.class::cast)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"flyingapricot"},"content":"                                    .collect(Collectors.toList());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"flyingapricot"},"content":"                });","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"        handlers.getOrDefault(propertyName, val -\u003e {}).accept(newValue);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":199,"flyingapricot":36,"-":16,"jwyk":3}},{"path":"src/main/java/javatro/display/screens/HelpScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.HelpHowOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.HelpIntroOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.HelpRulesOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.HelpTipsOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.PokerHandOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" * The {@code HelpScreen} class represents a screen displaying the help menu in the javatro","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":" * application. It provides various help options, including an introduction, rules, how-to-play","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":" * guide, and tips. Users can also return to the main menu from this screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"public class HelpScreen extends Screen {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     * Constructs a {@code HelpScreen} instance and initializes the available help options.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"     * @throws JavatroException if an error occurs while setting up the screen","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    public HelpScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"        super(\"HELP MENU\");","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new HelpIntroOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new HelpRulesOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new HelpHowOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new HelpTipsOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new PokerHandOption());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"     * Displays the help screen. This method should be overridden to define how the help menu is","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"     * presented.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"    public void displayScreen() {}","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-18","isFullCredit":false}],"authorContributionMap":{"swethacool":40}},{"path":"src/main/java/javatro/display/screens/LoseScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import java.util.concurrent.ThreadLocalRandom;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class LoseScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e QUOTES \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"            List.of(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"                    \"Maybe Go Fish is more our speed...\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"                    \"We folded like a cheap suit!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"                    \"Time for us to shuffle off and try again!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"                    \"You know what they say, the house always wins!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"                    \"Looks like we found out who the real Joker is!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"                    \"Oh no, were you bluffing too?\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"                    \"Looks like the joke\u0027s on us!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"                    \"If I had hands I would have covered my eyes!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"                    \"I\u0027m literally a fool, what\u0027s your excuse?\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    \"What a flop!\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a screen with the specified options title.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the options title is null or empty","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    public LoseScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        super(\"\\\\\" + RED + \" GAME OVER! \" + END + BLACK_B + \"/\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     * Displays the screen content. This method must be implemented by subclasses to define the","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     * specific behavior and layout of the screen.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        printANSI(\"jimbo.txt\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        String randomQuote \u003d QUOTES.get(ThreadLocalRandom.current().nextInt(QUOTES.size()));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        // Top border","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(TOP_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + TOP_RIGHT);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(centerText(RED + BOLD + \"HA\".repeat(47) + END + BLACK_B, BORDER_WIDTH));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(centerText(ITALICS + randomQuote, BORDER_WIDTH));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        // Bottom border","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"                BOTTOM_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + BOTTOM_RIGHT);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":55,"-":5}},{"path":"src/main/java/javatro/display/screens/PlayCardScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The {@code PlayCardScreen} class represents a screen where the user selects cards to play. It","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * extends {@code CardSelectScreen} and allows selecting up to a predefined limit of cards (default","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * is 5).","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * @see CardSelectScreen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class PlayCardScreen extends CardSelectScreen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code PlayCardScreen} and sets the selection limit. The user can select up to 5","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * cards to play, and the selection command is initialized.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during initialization.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    public PlayCardScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        super(\"SELECT CARDS TO PLAY\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Displays the current cards in the user\u0027s holding hand for selection. This method overrides","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * the parent class implementation to provide specific behavior for playing cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        super.displayHoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":13,"flyingapricot":13,"-":6}},{"path":"src/main/java/javatro/display/screens/PokerHandScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLUE_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.GREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.ORANGE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.WHITE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.printBorderedContent;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.PlanetCard;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ReturnOption;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"public class PokerHandScreen extends Screen {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    // %-X \u003d X characters width","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    private static final String TITLE \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"            String.format(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"                    \"%s%s%-5s     %s%-15s       %s%-5s%s × %s%-5s%s     %s%-6s%s\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"                    BOLD,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    GREEN,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"                    \"LEVEL\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    WHITE,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    \"POKER HAND\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    BLUE_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    \"CHIPS\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    BLACK_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"                    RED_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"                    \"MULTI\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    BLACK_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    ORANGE,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    \"PLAYS\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"                    END);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    private final List\u003cPokerHand\u003e pokerHands;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    public PokerHandScreen() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        super(\"Javatro Poker Hands\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new ReturnOption());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.pokerHands \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"                Stream.of(PokerHand.HandType.values())","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"                        .map(PokerHand::new)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"        List\u003cString\u003e handDisplays \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"                pokerHands.stream()","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"                        .map(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                                hand -\u003e {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"                                    PokerHand.HandType type \u003d hand.handType();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"                                    return String.format(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"                                            \"%s%4d       %s%-15s       %s%5d%s × %s%-5d%s      \"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"                                                    + \" %s%-5d%s\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                            GREEN,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                            PlanetCard.getLevel(type),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"                                            WHITE,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                                            type.getHandName(),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                                            BLUE_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                                            hand.getChips(),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                                            BLACK_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"                                            RED_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"                                            hand.getMultiplier(),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                                            BLACK_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"                                            ORANGE,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"                                            JavatroCore.getPlayCount(hand.handType()),","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"                                            END);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                                })","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        printBorderedContent(TITLE, handDisplays);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"     * Updates the played count for a specific hand type.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"     * @param handType The hand type to update","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"    public void incrementPlayed(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"        pokerHands.replaceAll(hand -\u003e hand.handType() \u003d\u003d handType ? hand.incrementPlayed() : hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"     * Gets a specific poker hand by type.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"     * @param handType The hand type to retrieve","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"     * @return The PokerHand instance","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"    public PokerHand getHand(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        return pokerHands.stream()","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                .filter(hand -\u003e hand.handType() \u003d\u003d handType)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"                .findFirst()","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"                .orElseThrow();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":56,"-":40,"jwyk":10}},{"path":"src/main/java/javatro/display/screens/Screen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.Option;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The {@code Screen} class serves as an abstract base class for all screens in the application. It","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" * defines common behaviors such as displaying options for the user to select and handling commands.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" * Subclasses must implement the {@link #displayScreen()} method to define their specific content.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"public abstract class Screen {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    /** A list of commands associated with this screen. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    protected final List\u003cOption\u003e commandMap \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    /** The title of the options menu displayed on the screen. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    private final String optionsTitle;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a screen with the specified options title.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * @param optionsTitle the title of the options menu (cannot be null or empty)","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the options title is null or empty","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    public Screen(String optionsTitle) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        if (optionsTitle \u003d\u003d null || optionsTitle.trim().isEmpty()) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidOptionsTitle();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        this.optionsTitle \u003d String.format(\"%s::: %s :::%s\", BOLD, optionsTitle.trim(), END);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Displays the screen content. This method must be implemented by subclasses to define the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * specific behavior and layout of the screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    public abstract void displayScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Displays the available options in a formatted menu style. The menu includes a border, a","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * centered title, and a list of options with descriptions.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    public void displayOptions() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e optionLines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c commandMap.size(); i++) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"            String desc \u003d BLACK_B + commandMap.get(i).getDescription() + END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"            String option \u003d BLACK_B + BOLD + \"[\" + (i + 1) + \"] \" + END + ITALICS + desc + END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"            optionLines.add(option);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        printBorderedContent(optionsTitle, optionLines);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"     * Returns the number of available options (commands) in this screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"     * @return the number of options available","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"    public int getOptionsSize() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        return commandMap.size();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"     * Retrieves the command associated with the given index.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"     * @param index the index of the command (0-based)","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"     * @return the command at the specified index","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the index is out of bounds","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"    public Option getCommand(int index) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        if (index \u003c 0 || index \u003e\u003d commandMap.size()) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.indexOutOfBounds(index);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        return commandMap.get(index);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":73,"-":9}},{"path":"src/main/java/javatro/display/screens/StartScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.printANSI;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.HelpMenuOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.StartGameOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The {@code StartScreen} class represents the initial menu screen of the application. It provides","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" * options to start a game, access help, or exit the game.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" * \u003cp\u003eThis screen displays a visually appealing welcome message, including the javatro logo, which","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":" * is loaded from an external file during class initialization.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"public class StartScreen extends Screen {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code StartScreen} and initializes available commands.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws JavatroException if the options title is invalid or if there is an error initializing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *     the screen","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    public StartScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        super(\"MAIN MENU\");","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new StartGameOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new HelpMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /** Displays the start screen, including the game logo and available options. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        printANSI(\"javatro_logo.txt\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":15,"flyingapricot":13,"-":9}},{"path":"src/main/java/javatro/display/screens/WinGameScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import java.util.concurrent.ThreadLocalRandom;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class WinGameScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e QUOTES \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"            List.of(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"                    \"You Aced it!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"                    \"You dealt with that pretty well!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"                    \"Looks like you weren\u0027t bluffing!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"                    \"Too bad these chips are all virtual...\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"                    \"Looks like I\u0027ve taught you well!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"                    \"You made some heads up plays!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"                    \"Good thing I didn\u0027t bet against you!\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a screen with the specified options title.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the options title is null or empty","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    public WinGameScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        super(\"\\\\\" + GREEN + \" YOU WIN! \" + END + BLACK_B + \"/\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     * Displays the screen content. This method must be implemented by subclasses to define the","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     * specific behavior and layout of the screen.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        printANSI(\"jimbo.txt\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"        String randomQuote \u003d QUOTES.get(ThreadLocalRandom.current().nextInt(QUOTES.size()));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        // Top border","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(TOP_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + TOP_RIGHT);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"        System.out.println(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"                centerText(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"                        BLUE + BOLD + \"Thanks for playing our game!\" + END + BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                        BORDER_WIDTH));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(centerText(ITALICS + randomQuote, BORDER_WIDTH));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        // Bottom border","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"                BOTTOM_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + BOTTOM_RIGHT);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":51,"-":9}},{"path":"src/main/java/javatro/display/screens/WinRoundScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.jokers.JokerFactory;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.NextRoundOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import java.util.Random;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"public class WinRoundScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a screen with the specified options title.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the options title is null or empty","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    public WinRoundScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        super(\"\\\\\" + GREEN + \" You beat the Blind! \" + END + BLACK_B + \"/\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new NextRoundOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     * Displays the screen content. This method must be implemented by subclasses to define the","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     * specific behavior and layout of the screen.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        // Give the player a random joker card if boss blind is beaten","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        if (JavatroCore.getAnte().getBlind() \u003d\u003d Ante.Blind.BOSS_BLIND) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"            Joker randomJoker \u003d JokerFactory.createRandomJoker();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"            // Print Joker Card","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"            printANSI(randomJoker.getPath());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"            String title \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    \"You got a \"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"                            + CYAN","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"                            + BOLD","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"                            + randomJoker.getName()","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"                            + END","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"                            + BLACK_B","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"                            + \" Joker card!\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"            try {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"                JavatroCore.heldJokers.add(randomJoker);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"                UI.printBorderedContent(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                        title, List.of(\"\u003e\u003e \" + randomJoker.getDescription() + \" \u003c\u003c\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"                UI.printBorderedContent(title, List.of(\"Limit for Jokers has been reached!\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"            // Give the player a random free planet card if normal blinds are beaten","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        } else {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"            PokerHand.HandType[] handTypes \u003d PokerHand.HandType.values();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"            Random random \u003d new Random();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"            PokerHand.HandType randomPlanetCard \u003d handTypes[random.nextInt(handTypes.length)];","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"            PlanetCard.getForHand(randomPlanetCard).apply();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"            // Print Planet Card","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"            printANSI(PlanetCard.getForHand(randomPlanetCard).getPath());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"            String title \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"                    \"You got a \"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"                            + BLUE","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"                            + BOLD","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"                            + PlanetCard.getForHand(randomPlanetCard).getName()","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                            + END","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                            + BLACK_B","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                            + \" Planet card!\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"            String[] lines \u003d {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"                        \"Poker Hand %s%s\u003c%s\u003e%s%s Leveled Up!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"                        BOLD, YELLOW, randomPlanetCard.getHandName(), END, BLACK_B),","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"                        \"Level %s: %s%s+%d Chips%s%s and %s%s+%d Mult%s%s\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                        PlanetCard.getLevel(randomPlanetCard),","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"                        BLUE,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"                        PlanetCard.getChipIncrement(randomPlanetCard),","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"                        BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"                        RED,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"                        PlanetCard.getMultiIncrement(randomPlanetCard),","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"                        BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"            };","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"            UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":64,"-":31}},{"path":"src/main/java/javatro/manager/JavatroManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code JavatroManager} class serves as the main controller (manager) of the game,","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * coordinating interactions between the model ({@code JavatroCore}) and the view ({@code display}).","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":" * It listens for property changes and updates the game state accordingly.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import javatro.core.Ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeEvent;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Manages the interaction between the game model and the user interface. It listens for user inputs","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" * and updates the game state dynamically.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"public class JavatroManager implements PropertyChangeListener {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /** The main view responsible for rendering the user interface. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    private static UI ui;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    /** The main model responsible for handling game logic. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    public static JavatroCore jc;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    /** Stores the last recorded user input. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    private static int userInput;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    public static Ante ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    public static int roundCount \u003d 1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"     * Constructs a {@code JavatroManager} and registers it as an observer to the view.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"     * @param ui The main view of the game.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"     * @param jc The main model of the game.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    public JavatroManager(UI ui, JavatroCore jc) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.ui \u003d ui;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.jc \u003d jc;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        UI.getParser().addPropertyChangeListener(this); // Register as an observer","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"     * Changes the currently displayed screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"     * @param destinationScreen The new screen to be displayed.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    public static void setScreen(Screen destinationScreen) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"        ui.setCurrentScreen(destinationScreen);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"     * Begins the game by initializing the game model and registering necessary observers.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs during game initialization.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"    public static void beginGame(Deck.DeckType deckType) throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"        jc.setupNewGame(deckType);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Handles property change events from the view. If the property change corresponds to user","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * input, it executes the appropriate command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"     * @param evt The property change event.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"    public void propertyChange(PropertyChangeEvent evt) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"        if (evt.getPropertyName().equals(\"userInput\")) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"            // Execute the respective command","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"                UI.getCurrentScreen().getCommand((int) evt.getNewValue() - 1).execute();","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"                try {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"                    ui.setCurrentScreen(UI.getCurrentScreen());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                } catch (JavatroException ex) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                    throw new RuntimeException(ex);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":10,"flyingapricot":59,"-":8,"jwyk":8}},{"path":"src/main/java/javatro/manager/options/AcceptBlindOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"// @@author swethaiscool","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents an option to accept the current blind in the game. This class implements the {@code","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Option} interface.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class AcceptBlindOption implements Option {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns the description of this option.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @return A string representing the description of the option.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return \"Accept Blind\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Executes the action associated with accepting the blind. Currently, this method does not","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * perform any operations.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws JavatroException if an error occurs during execution.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        JavatroManager.jc.beginGame();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JavatroCore.currentRound.addPropertyChangeListener(javatro.display.UI.getGameScreen());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        JavatroCore.currentRound.updateRoundVariables();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"-":31,"jwyk":7}},{"path":"src/main/java/javatro/manager/options/CardSelectOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.*;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javatro.display.Parser;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.DiscardCardScreen;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.PlayCardScreen;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" * The {@code CardSelectOption} class represents a command that allows the player to make a","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" * selection of cards to either play or discard, based on the current game screen.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"public class CardSelectOption implements Option {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    /** The default selection limit for cards. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    public static final int DEFAULT_SELECTION_LIMIT \u003d 5;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /** The maximum number of cards that can be selected. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    private final int selectionLimit;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /** Constructs a {@code CardSelectOption} with the default selection limit of 5. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    public CardSelectOption() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        this(DEFAULT_SELECTION_LIMIT);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code CardSelectOption} with a specified selection limit.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"     * @param selectionLimit The maximum number of cards that can be selected.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the selection limit is invalid (less than 1).","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    public CardSelectOption(int selectionLimit) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        if (selectionLimit \u003c 1) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidSelectionLimit();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        this.selectionLimit \u003d selectionLimit;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        return \"Select Cards\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     * Executes the selection command, prompting the player to select cards to either play or","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"     * discard. The behavior changes based on the current screen.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during card selection.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e userInput \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"                Parser.getCardInput(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"                        JavatroCore.currentRound.getPlayerHand().size(), selectionLimit);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        // Select and play the chosen cards","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        if (UI.getCurrentScreen() instanceof PlayCardScreen) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"            JavatroCore.currentRound.playCards(userInput);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"            // Print Hand Name and Cards played","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"            PokerHand playedHand \u003d JavatroCore.currentRound.getPlayedHand();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"            String handName \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"                    String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"                            \"Achieved: %s%s\u003c%s\u003e%s%s Hand\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                            BOLD, YELLOW, playedHand.getHandName(), END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"            List\u003cString\u003e cardArtLines \u003d getCardArtLines(JavatroCore.currentRound.getPlayedCards());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"            printBorderedContent(handName, cardArtLines);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"            // Increment hand play count","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"            JavatroCore.currentRound.getPlayedHand().incrementPlayed();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"            // Discard the selected cards","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        } else if (UI.getCurrentScreen() instanceof DiscardCardScreen) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"            JavatroCore.currentRound.discardCards(userInput);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"            // Print Cards discarded","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"            String handName \u003d BOLD + \"Cards Discarded\" + END + BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"            List\u003cString\u003e cardArtLines \u003d getCardArtLines(JavatroCore.currentRound.getPlayedCards());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"            printBorderedContent(handName, cardArtLines);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (JavatroCore.currentRound.isWon()","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"                \u0026\u0026 JavatroCore.getAnte().getAnteCount() \u003d\u003d 8","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"                \u0026\u0026 JavatroCore.getAnte().getBlind() \u003d\u003d Ante.Blind.BOSS_BLIND) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"            // Game Winning Screen","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            JavatroManager.setScreen(UI.getWinGameScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        } else if (JavatroCore.currentRound.isLost()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"            // Game Losing Screen","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"            JavatroManager.setScreen(UI.getLoseScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        } else if (JavatroCore.currentRound.isWon()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"            // Round Winning Screen","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"            JavatroManager.setScreen(UI.getWinRoundScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        } else {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"            // Return to the game screen after selection","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"            JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":90,"K-J-Q":4,"-":14}},{"path":"src/main/java/javatro/manager/options/DeckSelectOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"public class DeckSelectOption implements Option {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"    private final String description;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    private final Deck.DeckType deckType;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a DeckSelectOption with a custom description and deck.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     * @param description The description of the deck option.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @param deckType The deck type associated with this option.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    public DeckSelectOption(String description, Deck.DeckType deckType) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        this.deckType \u003d deckType;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        return description;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     * Executes the command to start the game with the selected deck.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during execution.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        JavatroCore.deck \u003d new Deck(deckType);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.beginGame(deckType);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getBlindScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":46}},{"path":"src/main/java/javatro/manager/options/DeckViewOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"public class DeckViewOption implements Option {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"        return \"View Deck\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getDeckViewScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":18}},{"path":"src/main/java/javatro/manager/options/DiscardCardOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * The {@code DiscardCardOption} class represents a command that allows the player to discard","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * selected cards during the game. It updates the game screen to display the card selection","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":" * interface for discarding cards.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class DiscardCardOption implements Option {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        return \"Discard Cards\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     * Executes the discard cards command, updating the game screen to the \"Select Cards to Discard\"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * interface.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during execution.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getDiscardScreen());","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":14,"flyingapricot":17,"-":3}},{"path":"src/main/java/javatro/manager/options/ExitGameOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The {@code ExitGameOption} class represents a command that terminates the game. When executed, it","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" * prints a farewell message and exits the application.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"public class ExitGameOption implements Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"        return \"Exit Game\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Executes the exit game command, displaying a farewell message and terminating the","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * application.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        // display the end screen from the file","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        printANSI(\"end_screen.txt\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        // display the farewell message with borders and ANSI formatting","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        UI.printBorderedContent(\"GOODBYE\", List.of(RED + \"WE KNOW YOU WILL BE BACK SOON\" + END));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        System.exit(0); // Terminate the application","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"Markneoneo":13,"flyingapricot":20,"-":6}},{"path":"src/main/java/javatro/manager/options/HelpHowOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":" * The HelpHowOption class explains how to play javatro. This command is executed when the player","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":" * requests gameplay instructions.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"public class HelpHowOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"        return \"How To Play\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display instructions on how to play. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"        String title \u003d \"♥️ ♠️ 🃏 \" + UI.BOLD + \"How To Play Javatro\" + \" 🃏 ♦️ ♣️\" + UI.END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"            \"Welcome to the Javatro!\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"            \"Here\u0027s how to play and navigate the game:\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"            \"1. Start a new game with \u0027start\u0027.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"            \"2. Select the blind you desire.\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"            \"2. Draw cards using \u0027draw\u0027.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"            \"3. Play poker hands to attack enemies.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"            \"4. Earn new cards and modify your deck.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"            \"5. Survive as long as possible and improve your strategy.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"            \"Use commands like:\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"            \"   - \u0027attack\u0027  : Play a hand to deal damage.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"            \"   - \u0027defend\u0027  : Use a card to reduce incoming damage.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"            \"   - \u0027exit\u0027    : Quit the game.\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"            \"Ante and Blind System:\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"            \"   - The game uses an ante system to start each round.\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"            \"   - The ante increases as rounds progress, starting from the initial small blind,\"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"                    + \" large blind, and boss blind.\",","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"            \"   - This also means the score to beat for each round increases progressively\"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"                    + \" \\uD83D\\uDCC8\\uD83C\\uDFAF\",","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"            \"   - The blinds rotate with each new round, increasing as the game progresses.\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"swethacool"},"content":"            \"   - However do take note that the Small and Large Blinds are optional while the Boss\"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"swethacool"},"content":"                    + \" blind is compulsory in the game play.\",","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"swethacool"},"content":"            \"   - Have fun playing! \\uD83D\\uDE0E\\uD83C\\uDF89\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"swethacool"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"swethacool"},"content":"        UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"swethacool":60}},{"path":"src/main/java/javatro/manager/options/HelpIntroOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":" * The HelpIntroOption class provides an introduction to javatro. This command is executed when the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":" * player requests an introduction.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"public class HelpIntroOption implements Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"        return \"Game Introduction\";","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display the introduction message. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"        String title \u003d \"♥️ ♠️ 🃏 \" + BOLD + \"Welcome to Javatro\" + \" 🃏 ♦️ ♣️\" + END;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"            \"Javatro is a text-based roguelike deck-building game inspired by Balatro.\",","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"            \"Your goal is to strategically build a deck and progress through challenges.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"            \"Each turn, you\u0027ll play poker-style hands to defeat enemies and earn new cards.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"            \"Think strategically, manage your deck wisely, and see how far you can go!\"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"        UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"swethacool":45}},{"path":"src/main/java/javatro/manager/options/HelpMenuOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":" * The HelpMenuOption class handles displaying the help screen in javatro. This command is executed","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":" * when the player selects the help option.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"public class HelpMenuOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"        return \"Help Menu\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display the help screen. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"swethacool":29}},{"path":"src/main/java/javatro/manager/options/HelpRulesOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":" * The HelpRulesOption class provides the rules for playing javatro. This command is executed when","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":" * the player requests game rules.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"public class HelpRulesOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"        return \"Game Rules\";","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display the rules of the game. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"        String title \u003d \"♥️ ♠️ 🃏 \" + BOLD + \"Javatro Rules\" + \" 🃏 ♦️ ♣️\" + END;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"            \"1. Start with a basic deck of cards.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"            \"2. Each turn, draw cards and form poker hands to attack or defend.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"            \"3. Earn new cards after each battle and upgrade your deck.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"            \"4. If your health reaches zero, the run ends—try again with a new strategy!\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"            \"5. Different enemies and challenges appear in each run.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"            \"Remember: Careful deck management is key to survival!\"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"        UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"swethacool":47}},{"path":"src/main/java/javatro/manager/options/HelpTipsOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":" * The HelpTipsOption class provides gameplay tips for javatro. This command is executed when the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":" * player requests tips for improving their strategy.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"public class HelpTipsOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"        return \"Tips and Tricks\";","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display gameplay tips. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"        String title \u003d \"♥️ ♠️ 🃏 \" + BOLD + \"Pro Tips For Javatro\" + \" 🃏 ♦️ ♣️\" + END;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"            \"- Focus on building a balanced deck with attack and defense cards.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"            \"- Don\u0027t just add every card you find—some cards can weaken your deck.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"            \"- Save strong hands for tougher enemies.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"            \"- Adapt your strategy based on the enemies you encounter.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"            \"- Experiment with different playstyles to find what works best for you.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"            \"Good luck and have fun!\"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"        UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"swethacool":47}},{"path":"src/main/java/javatro/manager/options/MainMenuOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code MainMenuOption} class represents a command that loads the start screen, allowing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * players to navigate to the main menu.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"/** A command that loads the main menu (start screen) when executed. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class MainMenuOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        return \"Main Menu\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    /** Executes the command to change the screen to the start menu. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getStartScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":10,"flyingapricot":15,"-":4}},{"path":"src/main/java/javatro/manager/options/NextRoundOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.manager.JavatroManager.jc;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"public class NextRoundOption implements Option {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"        return \"Start Next Round\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command to move on to the next round. The command will give the player a {@code","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * PlanetCard} or a {@code Joker}, depending on the Blind won.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        // Instantiate next round","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        jc.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"        JavatroCore.currentRound.addPropertyChangeListener(javatro.display.UI.getGameScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"        JavatroCore.currentRound.updateRoundVariables();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":1,"-":2,"jwyk":26}},{"path":"src/main/java/javatro/manager/options/Option.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"public interface Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"     * Retrieves a description of the command. This method has a default implementation returning an","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * empty string.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"     * @return A string representing the command description.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"    default String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"        return \"\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * Executes the command. Implementing classes must define specific behavior.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs during execution.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    void execute() throws JavatroException;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"flyingapricot":17,"-":3}},{"path":"src/main/java/javatro/manager/options/PlayCardOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * The {@code PlayCardOption} class represents a command that allows the player to select cards to","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * play during the game. It updates the game screen to display the card selection interface for","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * playing cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class PlayCardOption implements Option {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        return \"Play Cards\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     * Executes the play cards command, updating the game screen to the \"Select Cards to Play\"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * interface.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during execution.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getPlayScreen());","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":18,"flyingapricot":15,"-":1}},{"path":"src/main/java/javatro/manager/options/PokerHandOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"public class PokerHandOption implements Option {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"        return \"View Poker Hands\";","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getPokerHandScreen());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":18}},{"path":"src/main/java/javatro/manager/options/RejectBlindOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.Ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"// @@author swethaiscool","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents an option to reject the current blind and move to the next available blind level.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Implements the {@code Option} interface.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class RejectBlindOption implements Option {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Returns the description of this option.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return A string representing the description of the option.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return \"Reject Blind\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Executes the action of rejecting the current blind level. If the current blind is {@code","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * SMALL_BLIND}, it moves to {@code LARGE_BLIND}. If the current blind is {@code LARGE_BLIND},","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * it moves to {@code BOSS_BLIND}. If already at {@code BOSS_BLIND}, a warning message is","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * displayed, indicating that the player must play at this level.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws JavatroException if an error occurs during execution.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (JavatroCore.getAnte().getBlind() \u003d\u003d Ante.Blind.SMALL_BLIND) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"            JavatroCore.getAnte().setBlind(Ante.Blind.LARGE_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"            JavatroManager.setScreen(UI.getBlindScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } else if (JavatroCore.getAnte().getBlind() \u003d\u003d Ante.Blind.LARGE_BLIND) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"            JavatroCore.getAnte().setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"            JavatroManager.setScreen(UI.getBlindScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"            String title \u003d \"⚠\\uFE0F \" + UI.BOLD + \"WARNING\" + \" ⚠\\uFE0F\" + UI.END;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"            String[] lines \u003d {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"                \"Oops! you have to play the BOSS blind to proceed, no skipping! :D\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"            };","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"            UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"            JavatroManager.setScreen(UI.getBlindScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"-":45,"jwyk":10}},{"path":"src/main/java/javatro/manager/options/ResumeGameOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code ResumeGameOption} class represents a command that allows the player to return to the","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * main game screen after navigating away.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"/** A command that enables players to return to the game screen. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"public class ResumeGameOption implements Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        return \"Return To Game\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the resume game command, updating the game screen to return the player to the main","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * game interface.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs during execution.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":3,"swethacool":1,"flyingapricot":26,"-":5}},{"path":"src/main/java/javatro/manager/options/ReturnOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code ReturnOption} class represents a command that allows the player to return to the main","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * game screen after navigating away.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static javatro.display.UI.getPreviousScreen;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"/** A command that enables players to return to the game screen. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"public class ReturnOption implements Option {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"    private Screen prev_screen;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        return \"Return To Previous Screen\";","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     * Executes the resume game command, updating the game screen to return the player to the main","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     * game interface.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException If an error occurs during execution.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        prev_screen \u003d getPreviousScreen();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        // Go back to previous screen","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(prev_screen);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":36,"-":4}},{"path":"src/main/java/javatro/manager/options/SortByRankOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.CardSelectScreen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * An option that sorts the current holding hand by rank (Ace \u003e King \u003e Queen \u003e ... \u003e Two) and","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * redisplay the hand.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public class SortByRankOption implements Option {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    private final CardSelectScreen screen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    public SortByRankOption(CardSelectScreen screen) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"        this.screen \u003d screen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        return \"Sort cards by Rank\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        // Update the screen\u0027s holding hand with sorted order","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        screen.updateHoldingHand(CardSelectScreen.SortOrder.BY_RANK);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        // Refresh the entire screen","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(screen);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-25","isFullCredit":false}],"authorContributionMap":{"Markneoneo":28,"-":2}},{"path":"src/main/java/javatro/manager/options/SortBySuitOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.CardSelectScreen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * An option that sorts the current holding hand by suit (Spades \u003e Hearts \u003e Clubs \u003e Diamonds) and","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * redisplay the hand.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public class SortBySuitOption implements Option {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    private final CardSelectScreen screen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    public SortBySuitOption(CardSelectScreen screen) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"        this.screen \u003d screen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        return \"Sort cards by Suit\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        // Update the screen\u0027s holding hand with sorted order","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        screen.updateHoldingHand(CardSelectScreen.SortOrder.BY_SUIT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        // Refresh the entire screen","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(screen);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-25","isFullCredit":false}],"authorContributionMap":{"Markneoneo":28,"-":2}},{"path":"src/main/java/javatro/manager/options/StartGameOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code StartGameOption} class represents a command that initializes and starts a new game","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * session by setting the game screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"/** A command that starts the game and loads the game screen. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class StartGameOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        return \"Start Game\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Executes the command to begin the game, restore available commands, and update the main","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * screen to display the game interface.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while starting the game.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"        // Return to game if there is an existing game.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        if (JavatroCore.currentRound \u003d\u003d null || JavatroCore.currentRound.isLost()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"            JavatroCore.currentRound \u003d null;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"            JavatroManager.setScreen(UI.getDeckSelectScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"        if (JavatroCore.currentRound !\u003d null) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"            JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":17,"flyingapricot":14,"-":6,"jwyk":5}},{"path":"src/main/java/javatro/manager/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":" * The {@code manager} package contains the core game management and command execution logic. It","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * follows the Command design pattern to handle various user actions and game state changes.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis package is responsible for managing game flow, handling user commands, and coordinating","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * between the game model and the user interface.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eClasses in this package:\u003c/h2\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.Command} - Interface defining executable game commands.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.DiscardCardsCommand} - Command for discarding selected","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" *       cards.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.ExitGameCommand} - Command for terminating the game.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.JavatroManager} - Central controller managing game state and","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":" *       user input.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.LoadGameScreenCommand} - Command for starting the game and","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":" *       loading the game screen.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.LoadOptionsScreenCommand} - Command for displaying the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" *       options menu.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.LoadStartScreenCommand} - Command for displaying the main","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":" *       menu.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.MakeSelectionCommand} - Command for selecting cards to play","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":" *       or discard.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.PlayCardsCommand} - Command for playing selected cards.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.ResumeGameCommand} - Command for returning to the main game","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":" *       screen.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager;","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":22,"-":8}},{"path":"src/test/java/javatro/core/AnteTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import java.util.Random;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"// @author swethaiscool","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"/**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":" * Test class for the {@link Ante} class. This class tests the functionality of the Ante class,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" * including the initialization of values, progression between rounds, blind multipliers, and score","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" * calculations.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"public class AnteTest {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    private Ante ante;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    private Random random;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** Initializes a new Ante object before each test. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    void setUp() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        random \u003d new Random();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Tests the initial values of the Ante object. Ensures the Ante count starts at 1, the blind is","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * set to SMALL_BLIND, and the round score is set to 300.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    void testInitialValues() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        assertEquals(1, ante.getAnteCount(), \"Ante count should start at 1\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"                Ante.Blind.SMALL_BLIND, ante.getBlind(), \"Initial blind should be SMALL_BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"        assertEquals(300, ante.getRoundScore(), \"Initial round score should be 300\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Tests the multipliers for different blinds. Verifies that each blind (SMALL_BLIND,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * LARGE_BLIND, BOSS_BLIND) has the expected multiplier.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"    void testBlindMultiplier() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"                1.0,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"                ante.getBlind().getMultiplier(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"                \"SMALL_BLIND should have a multiplier of 1.0\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"        ante.setBlind(Ante.Blind.LARGE_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                1.5,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"                ante.getBlind().getMultiplier(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \"LARGE_BLIND should have a multiplier of 1.5\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"        ante.setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"                2.0, ante.getBlind().getMultiplier(), \"BOSS_BLIND should have a multiplier of 2.0\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Tests the progression of the blind and ante count across rounds. Verifies that after each","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * round, the blind changes in the expected order, and the ante count increments correctly,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * resetting after reaching a cap.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"    void testNextRoundProgression() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"        ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"        assertEquals(Ante.Blind.LARGE_BLIND, ante.getBlind(), \"Blind should change to LARGE_BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"        ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"        assertEquals(Ante.Blind.BOSS_BLIND, ante.getBlind(), \"Blind should change to BOSS_BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"        ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"        assertEquals(2, ante.getAnteCount(), \"Ante count should increment\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"        assertEquals(Ante.Blind.SMALL_BLIND, ante.getBlind(), \"Blind should reset to SMALL_BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Tests the calculation of the round score based on the current blind. Verifies that the score","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * is calculated correctly for each blind.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"    void testRoundScoreCalculation() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"        assertEquals(300, ante.getRoundScore(), \"Score for SMALL_BLIND should be correct\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jwyk"},"content":"        ante.setBlind(Ante.Blind.LARGE_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"        assertEquals(450, ante.getRoundScore(), \"Score for LARGE_BLIND should be correct\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jwyk"},"content":"        ante.setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"        assertEquals(600, ante.getRoundScore(), \"Score for BOSS_BLIND should be correct\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Tests the maximum ante count cap. Ensures that the ante count does not exceed 8 after several","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * rounds.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"    void testMaxAnteCap() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"            ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"            ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"            ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"        assertEquals(8, ante.getAnteCount(), \"Ante count should not exceed 8\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Tests random blinds and their respective scores. Verifies that for each randomly selected","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * blind and ante count, the score matches the expected value based on the blind\u0027s multiplier.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jwyk"},"content":"    void testRandomBlindsAndScores() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jwyk"},"content":"        // Test for 10 random iterations","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c 10; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jwyk"},"content":"            // Randomly select ante count (from 1 to 8)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jwyk"},"content":"            int randomAnteCount \u003d random.nextInt(8) + 1;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jwyk"},"content":"            // Move to the selected ante count using nextRound","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jwyk"},"content":"            for (int j \u003d 1; j \u003c randomAnteCount; j++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"                ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jwyk"},"content":"            // Randomly select a blind","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"            int blindIndex \u003d random.nextInt(Ante.Blind.values().length);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jwyk"},"content":"            Ante.Blind randomBlind \u003d Ante.Blind.values()[blindIndex];","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jwyk"},"content":"            ante.setBlind(randomBlind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jwyk"},"content":"            // Get expected score","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jwyk"},"content":"            int expectedScore \u003d (int) (ante.getAnteScore() * randomBlind.getMultiplier());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jwyk"},"content":"            // Assert the score is correct","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"                    expectedScore,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    ante.getRoundScore(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"                    \"Random score calculation failed for Ante \"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"                            + randomAnteCount","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"                            + \" and Blind \"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"                            + randomBlind.getName());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"jwyk"},"content":"            // Reset the ante for the next iteration","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"jwyk"},"content":"            ante.resetAnte();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"-":38,"jwyk":108}},{"path":"src/test/java/javatro/core/DeckTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" * This class contains unit tests for the {@link Deck} class. It tests the initialisation and","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" * drawing of cards, ensuring the deck contains the proper number of cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"public class DeckTest {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    private static Deck deck;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    /** Initialize a new deck for each test. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    void init() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * Test that each Deck initialised has 52 cards, and drawing 1 card gives the correct number of","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * cards remaining.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    void testDeck() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        int cardsRemaining \u003d deck.getRemainingCards();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(52, cardsRemaining);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        Card drawOne \u003d deck.draw();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(51, deck.getRemainingCards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /** Test that a Checkered Deck has 52 cards, with 26 cards of Hearts, 26 cards of Spades. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    void testCheckeredDeck() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        Deck checkeredDeck \u003d new Deck(Deck.DeckType.CHECKERED);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"        int cardsRemaining \u003d checkeredDeck.getRemainingCards();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        assertEquals(52, cardsRemaining);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e cardArrayList \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c 52; i++) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"            Card card \u003d checkeredDeck.draw();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Suit.CLUBS, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Suit.DIAMONDS, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"    /** Test that a Abandoned Deck has 40 cards, with no Face Cards. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"    void testAbandonedDeck() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"        Deck checkeredDeck \u003d new Deck(Deck.DeckType.ABANDONED);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"        int cardsRemaining \u003d checkeredDeck.getRemainingCards();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"        assertEquals(40, cardsRemaining);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e cardArrayList \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c 40; i++) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"            Card card \u003d checkeredDeck.draw();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Rank.KING, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Rank.QUEEN, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Rank.JACK, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":31,"-":3,"jwyk":32}},{"path":"src/test/java/javatro/core/HoldingHandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.FIVE;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":" * This class contains unit tests for the {@link HoldingHandTest} class. It tests the various","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":" * methods of drawing, discarding and adding cards to ensure the correct cards are displayed and","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" * played hand is correct.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"public class HoldingHandTest {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    private static Deck deck;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    private static HoldingHand holdingHand;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    /** Initialize a new deck for each test. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    void init() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"        deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        cardOne \u003d new Card(TWO, SPADES);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"        cardTwo \u003d new Card(THREE, HEARTS);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"        cardThree \u003d new Card(FOUR, CLUBS);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        cardFour \u003d new Card(FIVE, DIAMONDS);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    /** Test that HoldingHand can add cards, draw and discard cards. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    void testHoldingHand() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        int cardsRemaining \u003d deck.getRemainingCards();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(44, cardsRemaining);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        holdingHand.discard(List.of(1, 3, 5));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(41, deck.getRemainingCards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e playedHand \u003d holdingHand.play(List.of(1, 4, 5));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(3, playedHand.size());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(38, deck.getRemainingCards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    /** Test that HoldingHand can return the hand held. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"    void testGetHoldingHand() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        Card cardOne \u003d new Card(ACE, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        Card cardTwo \u003d new Card(TWO, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        Card cardThree \u003d new Card(THREE, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        Card cardFour \u003d new Card(FOUR, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e cards \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                new ArrayList\u003cCard\u003e() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                    {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"                        add(cardOne);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"                        add(cardTwo);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"                        add(cardThree);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"                        add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"                    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"                };","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(card);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d holdingHand.getHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        assertArrayEquals(new List[] {cards}, new List[] {hand});","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"    /** Test that HoldingHand can return cards in order. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"    void testSortByRank() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e cards \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"                new ArrayList\u003cCard\u003e() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"                    {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"                        add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"                        add(cardThree);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"                        add(cardTwo);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"                        add(cardOne);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"                    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"                };","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardThree);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardTwo);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardOne);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"        holdingHand.sortByRank();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e hand \u003d holdingHand.getHand();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jwyk"},"content":"        assertArrayEquals(new List[] {cards}, new List[] {hand});","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Test that HoldingHand can return suits in a particular order. SPADES \u003e HEARTS \u003e CLUBS \u003e","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * DIAMONDS","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"    void testSortBySuit() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e cards \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"                new ArrayList\u003cCard\u003e() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jwyk"},"content":"                    {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"                        add(cardOne);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jwyk"},"content":"                        add(cardTwo);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jwyk"},"content":"                        add(cardThree);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jwyk"},"content":"                        add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jwyk"},"content":"                    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jwyk"},"content":"                };","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardThree);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardTwo);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardOne);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jwyk"},"content":"        holdingHand.sortBySuit();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e hand \u003d holdingHand.getHand();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"jwyk"},"content":"        assertArrayEquals(new List[] {cards}, new List[] {hand});","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"    /***","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"     * Test that JavatroException is thrown when an illegal card selection is played.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"    void testIllegalPlay() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e playedHand \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(-1);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"jwyk"},"content":"            holdingHand.play(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"                    UI.RED + \"Invalid index in cards to be played: -1\" + UI.END, e.getMessage());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(500);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"jwyk"},"content":"            holdingHand.play(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"                    UI.RED + \"Invalid index in cards to be played: 500\" + UI.END, e.getMessage());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"            playedHand.add(i);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"jwyk"},"content":"            holdingHand.play(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"jwyk"},"content":"                    UI.RED","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"                            + \"Number of cards played (8) \"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"                            + \"exceeds maximum allowed. (5)\"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"                            + UI.END,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"                    e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"    /***","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"     * Test that JavatroException is thrown when an illegal card selection is discarded.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"    void testIllegalDiscard() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e playedHand \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(-1);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"jwyk"},"content":"            holdingHand.discard(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"                    UI.RED + \"Invalid index in cards to be discarded: -1\" + UI.END, e.getMessage());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(500);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"jwyk"},"content":"            holdingHand.discard(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"jwyk"},"content":"                    UI.RED + \"Invalid index in cards to be discarded: 500\" + UI.END,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"                    e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"            playedHand.add(i);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"jwyk"},"content":"            holdingHand.discard(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    UI.RED + \"Number of cards discarded (8) exceeds maximum allowed. (5)\" + UI.END,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"                    e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"    /***","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"     * Test that JavatroException is thrown when a card cannot be added properly.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"    void testIllegalAdd() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"        Card cardToAdd \u003d new Card(ACE, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"        assertThrowsExactly(JavatroException.class, () -\u003e holdingHand.add(cardToAdd));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":156,"-":21,"jwyk":69}},{"path":"src/test/java/javatro/core/RoundTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import static javatro.core.Deck.DeckType.DEFAULT;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"public class RoundTest {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    private static String getExceptionMessage(String message) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"        return UI.RED + message + UI.END;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALIDPLAYEDHANDERROR \u003d","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \"A poker hand must contain between 1 and 5 cards.\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALIDPLAYSPERROUND \u003d","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \"Number of plays per round must be greater than 0.\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    private static final String INVALIDDECK \u003d \"Deck cannot be null.\";","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    private static final String INVALIDPLAYSREMAINING \u003d \"No plays remaining.\";","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    enum isWon {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        WON,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"        LOST,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        UNKNOWN","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    @BeforeAll","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    public static void init() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private void assertRoundInitialization(int anteCount, Ante.Blind blind, int remainingPlays)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"        int expectedBlindScore \u003d ante.getRoundScore();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(expectedBlindScore, round.getBlindScore());","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(remainingPlays, round.getRemainingPlays());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, round.getCurrentScore());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(4, round.getRemainingDiscards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        assertFalse(round.isRoundOver());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private void assertRoundInitializationFailure(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"            int anteCount,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"            Deck deck,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"            Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"            ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"            ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"            new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(expectedMessage), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private void assertRoundOverAfterPlays(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"            int blindScore, int totalPlays, int playsToMake, boolean expectedIsOver)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1); // Default setting","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND); // Default setting","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, totalPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c playsToMake; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(expectedIsOver, round.isRoundOver());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private void assertPlayCardsFails(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"            int anteCount,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"            int playsToMake,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"            String expectedErrorMessage)","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"            Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"            Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"            ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"            ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"            Round round \u003d new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"            // Make the specified number of valid plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"            for (int i \u003d 0; i \u003c playsToMake; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"                round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"            }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"            // Attempt one more play which should fail","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(expectedErrorMessage), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"            int anteCount,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"            List\u003cInteger\u003e cardIndices,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"            String expectedErrorMessage)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(cardIndices);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(expectedErrorMessage), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"    private void assertRoundOver(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"            int anteCount,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"            int playsToMake,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"            boolean expectedIsOver)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c playsToMake; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(expectedIsOver, round.isRoundOver());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"K-J-Q"},"content":"    public void round_correctInitialization_success() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(1, Ante.Blind.SMALL_BLIND, 3);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(2, Ante.Blind.SMALL_BLIND, 5);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(2, Ante.Blind.LARGE_BLIND, 7);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(3, Ante.Blind.BOSS_BLIND, 1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"K-J-Q"},"content":"    public void round_incorrectInitializatioin() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"                1, Ante.Blind.SMALL_BLIND, 0, new Deck(DEFAULT), INVALIDPLAYSPERROUND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(1, Ante.Blind.SMALL_BLIND, 3, null, INVALIDDECK);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_roundNotOver() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"K-J-Q"},"content":"        // Test with first blind score and plays","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertRoundOver(1, Ante.Blind.SMALL_BLIND, 3, 1, false);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"K-J-Q"},"content":"        // Test with high blind score","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertRoundOver(1, Ante.Blind.LARGE_BLIND, 10000, 1, false);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"        // Test with high ante count and plays","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertRoundOver(8, Ante.Blind.SMALL_BLIND, 10000, 1, false);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"K-J-Q"},"content":"        // Test with many remaining plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertRoundOver(8, Ante.Blind.LARGE_BLIND, 10000, 1, false);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"K-J-Q"},"content":"        // Test won","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOver(1, Ante.Blind.SMALL_BLIND, 10000, 8, true);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_roundOver() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(8);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOverAfterPlays(ante.getRoundScore(), 3, 3, true);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"K-J-Q"},"content":"        ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(8);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOverAfterPlays(ante.getRoundScore(), 5, 5, true);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"K-J-Q"},"content":"        ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(8);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOverAfterPlays(ante.getRoundScore(), 8, 8, true);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"K-J-Q"},"content":"        ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOverAfterPlays(ante.getRoundScore(), 1, 1, true);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_tooManyPlays() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"K-J-Q"},"content":"        // Test with 3 plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"        assertPlayCardsFails(1, Ante.Blind.SMALL_BLIND, 3, 3, INVALIDPLAYSREMAINING);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"K-J-Q"},"content":"        // Test with 5 plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertPlayCardsFails(1, Ante.Blind.SMALL_BLIND, 2, 2, INVALIDPLAYSREMAINING);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"K-J-Q"},"content":"        // Test with 0 plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"        assertPlayCardsFails(1, Ante.Blind.SMALL_BLIND, 0, 0, INVALIDPLAYSPERROUND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_invalidHandSize() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"                1, Ante.Blind.SMALL_BLIND, 3, List.of(0, 1, 2, 3, 4, 5), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"                1, Ante.Blind.SMALL_BLIND, 3, List.of(0, 1, 2, 3, 4, 5, 6), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"K-J-Q"},"content":"                1,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"K-J-Q"},"content":"                Ante.Blind.SMALL_BLIND,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"                3,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"                List.of(0, 1, 2, 3, 4, 5, 6, 7),","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"                INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"K-J-Q"},"content":"        // Test with 0 cards","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"-"},"content":"                1, Ante.Blind.SMALL_BLIND, 3, List.of(), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"K-J-Q"},"content":"    public void round_discardCards_success() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"K-J-Q"},"content":"        // Initial state","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(4, round.getRemainingDiscards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"K-J-Q"},"content":"        int initialHandSize \u003d round.getPlayerHand().size();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"K-J-Q"},"content":"        // Discard 2 cards","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0, 1));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"K-J-Q"},"content":"        // Check state after discard","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(initialHandSize, round.getPlayerHand().size());","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"K-J-Q"},"content":"    public void round_discardCards_tooManyDiscards() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"        // Use all 4 discards","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"Markneoneo"},"content":"        // Fifth discard should fail","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"K-J-Q"},"content":"            round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"K-J-Q"},"content":"            fail(\"Should have thrown an exception for too many discards\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(\"No remaining discards available\"), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"K-J-Q"},"content":"    public void round_emptyDiscardList() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"K-J-Q"},"content":"        // Initial state","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(4, round.getRemainingDiscards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"K-J-Q"},"content":"        int initialHandSize \u003d round.getPlayerHand().size();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"K-J-Q"},"content":"        // Discard 0 cards","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"K-J-Q"},"content":"            round.discardCards(List.of());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"K-J-Q"},"content":"            fail(\"Should have thrown an exception for discarding zero cards\");","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(\"Cannot discard zero cards\"), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(4, round.getRemainingDiscards());","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(initialHandSize, round.getPlayerHand().size());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"K-J-Q"},"content":"    public void round_setNameAndDescription() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"K-J-Q"},"content":"        // Set new values","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"K-J-Q"},"content":"        round.setRoundName(\"New Round\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"K-J-Q"},"content":"        round.setRoundDescription(\"New Description\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"K-J-Q"},"content":"        // Check values were updated","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(\"New Round\", round.getRoundName());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(\"New Description\", round.getRoundDescription());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"Markneoneo":10,"K-J-Q":238,"-":52,"jwyk":22}},{"path":"src/test/java/javatro/core/ScoreTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"public class ScoreTest {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    private static HandResult handResult;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    private static Card cardFive;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"                List.of(","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"                        new Card(NINE, DIAMONDS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"                        new Card(TEN, HEARTS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"                        new Card(JACK, CLUBS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand played with no jokers gives the correct score. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"    void testScore() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, heldJokers);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"        assertEquals(316, finalScore);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"-":1,"jwyk":53}},{"path":"src/test/java/javatro/core/handResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.EIGHT;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FIVE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.SEVEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.SIX;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static javatro.core.PokerHand.HandType.FIVE_OF_A_KIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FLUSH_FIVE;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FLUSH_HOUSE;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":" * This class contains unit tests for the {@link HandResult} class. It tests various poker hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":" * evaluations to ensure correct identification of hand types.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"class HandResultTest {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Tests that a straight flush is correctly identified. A straight flush is a hand that contains","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * five cards of sequential rank, all the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"    void testStraightFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Tests that a hand with mixed suits is not identified as a straight flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * identified as a straight instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"    void testStraightFlushFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Tests that a hand with cards not in sequence is not identified as a straight flush. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * should be identified as a flush instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"    void testStraightFlushFalseNotInSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Tests that a royal flush is correctly identified. A royal flush is a hand that contains the","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Ace, King, Queen, Jack, and Ten of the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"    void testRoyalFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Tests that a hand with an Ace as a low card is not identified as a royal flush. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * should be identified as a straight flush instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jwyk"},"content":"    void testRoyalFlushFalseAceLow() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"                        new Card(THREE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FOUR, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Tests that a flush is correctly identified. A flush is a hand that contains five cards of the","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * same suit, not in sequence.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jwyk"},"content":"    void testFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Tests that a hand with mixed suits is not identified as a flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jwyk"},"content":"    void testFlushFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Tests that a hand with less than five cards is not identified as a flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"jwyk"},"content":"    void testFlushFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Tests that a high card is correctly identified. A high card is a hand that does not fall into","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * any other category.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"jwyk"},"content":"    void testHighCardTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d List.of(new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Tests that a straight is correctly identified. A straight is a hand that contains five cards","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * of sequential rank, not all the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"jwyk"},"content":"    void testStraightTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * Tests that a hand with cards not in sequence is not identified as a straight. The hand should","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * be identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"jwyk"},"content":"    void testStraightFalseNotInSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"     * Tests that a hand with mixed sequence is not identified as a straight. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"jwyk"},"content":"    void testStraightFalseMixedSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"     * Tests that a hand with less than five cards is not identified as a straight. The hand should","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * be identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"jwyk"},"content":"    void testStraightFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"-"},"content":"     * Tests that a full house is correctly identified. A full house is a hand that contains three","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"     * cards of one rank and two cards of another rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"jwyk"},"content":"    void testFullHouseTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * Tests that a hand with two pairs is not identified as a full house. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"-"},"content":"     * identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"jwyk"},"content":"    void testFullHouseFalseTwoPair() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * Tests that a hand with less than five cards is not identified as a full house. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"-"},"content":"     * should be identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"jwyk"},"content":"    void testFullHouseFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"-"},"content":"     * Tests that a hand with three of a kind is not identified as a full house. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"-"},"content":"     * identified as three of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"jwyk"},"content":"    void testFullHouseFalseThreeOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"-"},"content":"     * Tests that three of a kind is correctly identified. Three of a kind is a hand that contains","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"-"},"content":"     * three cards of one rank and two cards of two different ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"jwyk"},"content":"    void testThreeOfAKindTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"-"},"content":"    /** Tests that three of a kind is correctly identified with only three cards. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"jwyk"},"content":"    void testThreeOfAKindTrue3Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"-"},"content":"                List.of(new Card(TEN, SPADES), new Card(TEN, DIAMONDS), new Card(TEN, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"-"},"content":"     * Tests that a full house is not identified as three of a kind. The hand should be identified","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * as a full house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"jwyk"},"content":"    void testThreeOfAKindFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"-"},"content":"     * Tests that four of a kind is correctly identified with five cards. Four of a kind is a hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"-"},"content":"     * that contains four cards of one rank and one card of another rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"jwyk"},"content":"    void testFourOfAKindTrue5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"-"},"content":"    /** Tests that four of a kind is correctly identified with four cards. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"jwyk"},"content":"    void testFourOfAKindTrue4Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"-"},"content":"     * Tests that a pair is correctly identified with five cards. A pair is a hand that contains two","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"-"},"content":"     * cards of one rank and three cards of three different ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"jwyk"},"content":"    void testPairTrue5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"-"},"content":"     * Tests that a hand with two pairs is not identified as a single pair. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"-"},"content":"     * identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"jwyk"},"content":"    void testPairFalseTwoPair() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"-"},"content":"    /** Tests that a pair is correctly identified with two cards. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"jwyk"},"content":"    void testPairTrue2Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d List.of(new Card(EIGHT, SPADES), new Card(EIGHT, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"-"},"content":"     * Tests that a full house is not identified as a pair. The hand should be identified as a full","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"-"},"content":"     * house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"jwyk"},"content":"    void testPairFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"-"},"content":"     * Tests that four of a kind is not identified as a pair. The hand should be identified as four","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"-"},"content":"     * of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"jwyk"},"content":"    void testPairFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"-"},"content":"     * Tests that two pairs are correctly identified. Two pairs is a hand that contains two cards of","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"-"},"content":"     * one rank, two cards of another rank, and one card of a third rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"jwyk"},"content":"    void testTwoPairTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"-"},"content":"     * Tests that a full house is not identified as two pairs. The hand should be identified as a","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"-"},"content":"     * full house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"jwyk"},"content":"    void testTwoPairFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":502,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":503,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":504,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":505,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":506,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":507,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":508,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":509,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":510,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":511,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":512,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":513,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":514,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":515,"author":{"gitId":"-"},"content":"     * Tests that four of a kind is not identified as two pairs. The hand should be identified as","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":516,"author":{"gitId":"-"},"content":"     * four of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":517,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":518,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":519,"author":{"gitId":"jwyk"},"content":"    void testTwoPairFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":520,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":521,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":522,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":523,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":524,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":525,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":526,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":527,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":528,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":529,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":530,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":531,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":532,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FLUSH FIVE TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":533,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":534,"author":{"gitId":"-"},"content":"    /** Tests that a Flush Five is correctly identified (all 5 cards identical in rank and suit). */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":535,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":536,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFiveTrue() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":537,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":538,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":539,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":540,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":541,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":542,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":543,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":544,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":545,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":546,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush Five\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":547,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":548,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":549,"author":{"gitId":"-"},"content":"    /** Tests that a hand with same rank but different suits is not a Flush Five. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":550,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":551,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFiveFalseDifferentSuits() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":552,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":553,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":554,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":555,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":556,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":557,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":558,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":559,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":560,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":561,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FIVE_OF_A_KIND, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":562,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":563,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":564,"author":{"gitId":"-"},"content":"    /** Tests that a hand with same suit but different ranks is not a Flush Five. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":565,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":566,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFiveFalseDifferentRanks() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":567,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":568,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":569,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":570,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":571,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":572,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":573,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":574,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":575,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":576,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":577,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":578,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":579,"author":{"gitId":"-"},"content":"    /** Tests that a hand with less than 5 cards cannot be a Flush Five. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":580,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":581,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFiveFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":582,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":583,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":584,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":585,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":586,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":587,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":588,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":589,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":590,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":591,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":592,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":593,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FIVE OF A KIND TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":594,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":595,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":596,"author":{"gitId":"Markneoneo"},"content":"     * Tests that Five of a Kind is correctly identified (all 5 cards same rank, suits can differ).","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":597,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":598,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":599,"author":{"gitId":"Markneoneo"},"content":"    void testFiveOfAKindTrue() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":600,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":601,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":602,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":603,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":604,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":605,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":606,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":607,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":608,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FIVE_OF_A_KIND, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":609,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Five of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":610,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":611,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":612,"author":{"gitId":"-"},"content":"    /** Tests that a hand with only 4 of a kind is not Five of a Kind. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":613,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":614,"author":{"gitId":"Markneoneo"},"content":"    void testFiveOfAKindFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":615,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":616,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":617,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":618,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":619,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":620,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":621,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":622,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":623,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FIVE_OF_A_KIND, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":624,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":625,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":626,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":627,"author":{"gitId":"-"},"content":"    /** Tests that a Flush Five is not mistakenly identified as Five of a Kind. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":628,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":629,"author":{"gitId":"Markneoneo"},"content":"    void testFiveOfAKindFalseFlushFive() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":630,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":631,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":632,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":633,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":634,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":635,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":636,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":637,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":638,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FIVE_OF_A_KIND, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":639,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":640,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":641,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":642,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FLUSH HOUSE TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":643,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":644,"author":{"gitId":"-"},"content":"    /** Tests that Flush House is correctly identified (full house with all cards same suit). */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":645,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":646,"author":{"gitId":"Markneoneo"},"content":"    void testFlushHouseTrue() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":647,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":648,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":649,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":650,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":651,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":652,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":653,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":654,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":655,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FLUSH_HOUSE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":656,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush House\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":657,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":658,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":659,"author":{"gitId":"-"},"content":"    /** Tests that a regular full house with mixed suits is not a Flush House. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":660,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":661,"author":{"gitId":"Markneoneo"},"content":"    void testFlushHouseFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":662,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":663,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":664,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":665,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":666,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":667,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":668,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":669,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":670,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_HOUSE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":671,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":672,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":673,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":674,"author":{"gitId":"-"},"content":"    /** Tests that a flush without the full house composition is not a Flush House. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":675,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":676,"author":{"gitId":"Markneoneo"},"content":"    void testFlushHouseFalseNotFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":677,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":678,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":679,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":680,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":681,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":682,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":683,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":684,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":685,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_HOUSE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":686,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":687,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":688,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":689,"author":{"gitId":"-"},"content":"    /** Tests that a Flush Five is not mistakenly identified as Flush House. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":690,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":691,"author":{"gitId":"Markneoneo"},"content":"    void testFlushHouseFalseFlushFive() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":692,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":693,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":694,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":695,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":696,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":697,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":698,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":699,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":700,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_HOUSE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":701,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":702,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":703,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":704,"author":{"gitId":"Markneoneo"},"content":"    // Enum values are ordered from strongest to weakest in declaration","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":705,"author":{"gitId":"Markneoneo"},"content":"    // ordinal() returns the position (0-based index) in the enum declaration","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":706,"author":{"gitId":"Markneoneo"},"content":"    // compareTo() returns negative when the first is \"less than\" (stronger than) the second","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":707,"author":{"gitId":"-"},"content":"    /** Tests hand evaluation priority - Flush Five should beat Flush House. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":708,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":709,"author":{"gitId":"Markneoneo"},"content":"    void testHandPriorityFlushFiveVsFlushHouse() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":710,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e flushFive \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":711,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":712,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":713,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":714,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":715,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":716,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":717,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":718,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e flushHouse \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":719,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":720,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":721,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":722,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":723,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":724,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, DIAMONDS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":725,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":726,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result1 \u003d HandResult.evaluateHand(flushFive);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":727,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result2 \u003d HandResult.evaluateHand(flushHouse);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":728,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":729,"author":{"gitId":"Markneoneo"},"content":"        // Verify Flush Five is stronger than Flush House","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":730,"author":{"gitId":"Markneoneo"},"content":"        assertTrue(result1.handType().compareTo(result2.handType()) \u003c 0);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":731,"author":{"gitId":"Markneoneo"},"content":"        assertTrue(result1.handType().ordinal() \u003c result2.handType().ordinal());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":732,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":733,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":734,"author":{"gitId":"-"},"content":"    /** Tests hand evaluation priority - Five of a Kind should beat Flush House. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":735,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":736,"author":{"gitId":"Markneoneo"},"content":"    void testHandPriorityFiveOfAKindVsFlushHouse() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":737,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e fiveKind \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":738,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":739,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":740,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":741,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":742,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":743,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":744,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":745,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e flushHouse \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":746,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":747,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":748,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":749,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":750,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":751,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, DIAMONDS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":752,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":753,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result1 \u003d HandResult.evaluateHand(fiveKind);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":754,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result2 \u003d HandResult.evaluateHand(flushHouse);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":755,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":756,"author":{"gitId":"Markneoneo"},"content":"        assertTrue(result1.handType().compareTo(result2.handType()) \u003e 0);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":757,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":758,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-06","isFullCredit":false}],"authorContributionMap":{"Markneoneo":568,"-":160,"jwyk":30}},{"path":"src/test/java/javatro/core/jokers/HeldJokersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import javatro.core.HandResult;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.jokers.addmult.AbstractJoker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.GluttonousJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.GreedyJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.LustyJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.WrathfulJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"public class HeldJokersTest {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"                List.of(","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"                        new Card(NINE, DIAMONDS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"                        new Card(TEN, HEARTS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"                        new Card(JACK, CLUBS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Test that a normal HeldJokers cannot add more than 5 Jokers without exceeding the maximum","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * limit.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"    void testIllegalAdd() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"        Joker gluttonousJoker \u003d new GluttonousJoker();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"        try {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"            for (int i \u003d 0; i \u003c 10; i++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"                heldJokers.add(gluttonousJoker);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"            fail();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"            assertEquals(JavatroException.exceedsMaxJokers().getMessage(), e.getMessage());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /** Test that a normal HeldJokers cannot delete a Joker at illegal positions */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"    void testIllegalDelete() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"        Joker gluttonousJoker \u003d new GluttonousJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"        try {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"            heldJokers.add(gluttonousJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"            heldJokers.remove(0);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"            heldJokers.remove(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"            fail();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"            assertEquals(JavatroException.indexOutOfBounds(1).getMessage(), e.getMessage());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jwyk"},"content":"     * Test that a hand played triggers multiple joker effects correctly and has the right score.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"    void assertScoreEquals(HeldJokers currentJokers, int expectedScore) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, currentJokers);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"        assertEquals(expectedScore, finalScore);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Test that a hand played triggers multiple joker effects correctly and has the right score.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"    void testMultipleJokersSuite() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"        Joker gluttonousJoker \u003d new GluttonousJoker();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        Joker counterJoker \u003d new AbstractJoker();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"        Joker wrathfulJoker \u003d new WrathfulJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"        Joker lustyJoker \u003d new LustyJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"        Joker greedyJoker \u003d new GreedyJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(counterJoker);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(gluttonousJoker);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(lustyJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(wrathfulJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 2212);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(greedyJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 2686);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"-":15,"jwyk":93}},{"path":"src/test/java/javatro/core/jokers/addchip/OddToddJokerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addchip;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.HandResult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"public class OddToddJokerTest {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    private static Card cardFive;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    private static Joker oddToddJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        oddToddJoker \u003d new OddToddJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(oddToddJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        cardOne \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"        cardTwo \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        cardThree \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        cardFour \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"        cardFive \u003d new Card(KING, SPADES);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand played triggers joker effects correctly and has the right score. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"    void assertScoreEquals(HeldJokers currentJokers, int expectedScore) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, currentJokers);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"        assertEquals(expectedScore, finalScore);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand with 3 cards played correctly triggers the ScaryFaceJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"    void testOddToddJokerCorrect() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d List.of(cardOne, cardTwo);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 180);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand without face cards does not trigger the ScaryFaceJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"    void testOddToddJokerDisabled() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d List.of(cardThree, cardFour, cardFive);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 80);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"jwyk":70}},{"path":"src/test/java/javatro/core/jokers/addchip/ScaryFaceJokerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addchip;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import javatro.core.HandResult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"public class ScaryFaceJokerTest {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    private static Card cardFive;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    private static Card cardSix;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    private static Card cardSeven;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    private static Joker scaryFaceJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"        scaryFaceJoker \u003d new ScaryFaceJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(scaryFaceJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"        cardOne \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"        cardTwo \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        cardThree \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        cardFour \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"        cardFive \u003d new Card(KING, SPADES);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"        cardSix \u003d new Card(QUEEN, SPADES);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"        cardSeven \u003d new Card(JACK, SPADES);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand played triggers joker effects correctly and has the right score. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"    void assertScoreEquals(HeldJokers currentJokers, int expectedScore) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, currentJokers);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"        assertEquals(expectedScore, finalScore);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand with 3 cards played correctly triggers the ScaryFaceJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    void testHalfJokerCorrect() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d List.of(cardFive, cardSix, cardSeven);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 125);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand without face cards does not trigger the ScaryFaceJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"    void testScaryFaceJokerDisabled() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d List.of(cardOne, cardTwo, cardThree, cardFour);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 116);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"-":1,"jwyk":75}},{"path":"src/test/java/javatro/core/jokers/addmult/HalfJokerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.HandResult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"public class HalfJokerTest {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    private static Card cardFive;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    private static Joker halfJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"        halfJoker \u003d new HalfJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(halfJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        cardOne \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        cardTwo \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"        cardThree \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        cardFour \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /** Test that a hand played triggers joker effects correctly and has the right score. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"    void assertScoreEquals(HeldJokers currentJokers, int expectedScore) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, currentJokers);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"        assertEquals(expectedScore, finalScore);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /** Test that a hand with 3 cards played correctly triggers the HalfJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"    void testHalfJokerCorrect() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"        playedCardList \u003d List.of(cardOne, cardTwo, cardThree);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 836);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /** Test that a hand with 4 cards does not trigger the HalfJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"    void testHalfJokerDisabled() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        playedCardList \u003d List.of(cardOne, cardTwo, cardThree, cardFour);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 116);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"-":5,"jwyk":61}},{"path":"src/test/java/javatro/display/screens/ScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"// import javatro.display.screens.Screen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"class ScreenTest {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"    // Template test, will update ltr","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    void testDisplayOptions() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"        assertTrue(true);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"        //        Screen screen \u003d new Screen(\"Test Menu\", 30, \u0027*\u0027) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        //            @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"        //            public void displayScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        //                // Do nothing for testing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        //            }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        //        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        //        screen.commandMap.add(new Option(\"Option 1\", () -\u003e {}));","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        //        screen.commandMap.add(new Option(\"Option 2\", () -\u003e {}));","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        //","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        //        // Redirect System.out to capture output","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        //        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        //        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        //","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        //        screen.displayOptions();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        //","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        //        String expectedOutput \u003d","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        //                \"******************************\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        //                        \"*         Test Menu          *\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        //                        \"******************************\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        //                        \"*  [1] Option 1\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        //                        \"*  [2] Option 2\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        //                        \"******************************\\n\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        //        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":36,"-":2,"jwyk":1}}]

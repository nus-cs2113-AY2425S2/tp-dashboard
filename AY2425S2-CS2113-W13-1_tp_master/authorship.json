[{"path":".github/workflows/FormatLintTestBuild.yml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"name: Auto Java Formatter","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"on: push","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"permissions:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"  contents: write","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"jobs:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"  format:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"    if: github.actor !\u003d \u0027Auto Formatter\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"    name: Auto Java Formatter","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout code","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"      - name: Download google-java-format","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"          wget https://github.com/google/google-java-format/releases/download/v1.15.0/google-java-format-1.15.0-all-deps.jar -O /tmp/google-java-format.jar","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"      - name: Fix Java formatting with google-java-format","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"          java --add-exports jdk.compiler/com.sun.tools.javac.parser\u003dALL-UNNAMED -jar /tmp/google-java-format.jar -a --replace $(find . -name \"*.java\")","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"      - name: Commit formatted code","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"          git config --global user.name \"Auto Formatter\"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"          git config --global user.email \"auto_formatter@gmail.com\"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"          # Check if there are any changes","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"          if [[ -n \"$(git status --porcelain)\" ]]; then","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"            git add .","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"            git commit -m \"Apply google-java-format to Java files\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"            git push","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"            echo \"CHANGES_PUSHED\u003dtrue\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"          else","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"            echo \"No formatting changes detected.\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"            echo \"CHANGES_PUSHED\u003dfalse\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"          fi","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"        env:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"  lint:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    name: Lint Code Base","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    needs: format","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    if: always() ","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"      - name: Lint Code Base","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"        uses: github/super-linter@v4","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"        env:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"          RUN-LOCAL: false","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"          LINTER_RULES_PATH: config/checkstyle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"          JAVA_FILE_NAME: ../../config/checkstyle/checkstyle.xml","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"          VALIDATE_ALL_CODEBASE: true","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"          VALIDATE_JAVA: true","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"  test:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"    name: Run Tests with Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"    needs: lint","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"      - name: Grant execute permission for Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"        run: chmod +x gradlew","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"      - name: Run Gradle Tests","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        run: ./gradlew test","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"  build:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"    name: Build \u0026 Upload JAR","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"    needs: test","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"      - name: Grant execute permission for Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"        run: chmod +x gradlew","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"      - name: Build JAR without Checkstyle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"        run: ./gradlew build -x checkstyleMain -x checkstyleTest","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"      - name: Find JAR File","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"flyingapricot"},"content":"          JAR_PATH\u003d$(find build/libs -name \"*.jar\" | head -n 1)","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"          echo \"JAR_PATH\u003d$JAR_PATH\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"flyingapricot"},"content":"      - name: Upload JAR as an Artifact","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/upload-artifact@v4","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"flyingapricot"},"content":"          name: javatro-jar","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"flyingapricot"},"content":"          path: ${{ env.JAR_PATH }}","lastModifiedDate":"2025-03-02","isFullCredit":false}],"authorContributionMap":{"flyingapricot":153}},{"path":".github/workflows/gradle.yml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"name: Java CI","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"on:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"  workflow_run:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"    workflows: [\"Lint Code Basee\"]","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"    types:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"      - completed","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"jobs:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"  build:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"    strategy:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"      matrix:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"        platform: [ubuntu-latest, macos-latest, windows-latest]","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    runs-on: ${{ matrix.platform }}","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"    steps:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"      - name: Set up repository","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        uses: actions/checkout@master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"      - name: Set up repository","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"        uses: actions/checkout@master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"        with:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"          ref: master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"      - name: Merge to master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        run: git checkout --progress --force ${{ github.sha }}","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"      - name: Validate Gradle Wrapper","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        uses: gradle/wrapper-validation-action@v1","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        with:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"          java-package: jdk+fx","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"      - name: Build and check with Gradle","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        run: ./gradlew check","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (*NIX)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if: runner.os \u003d\u003d \u0027Linux\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"        run: ./runtest.sh","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (MacOS)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if: always() \u0026\u0026 runner.os \u003d\u003d \u0027macOS\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        run: ./runtest.sh","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (Windows)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if: always() \u0026\u0026 runner.os \u003d\u003d \u0027Windows\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"        shell: cmd","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"        run: runtest.bat","lastModifiedDate":"2020-05-24","isFullCredit":false}],"authorContributionMap":{"flyingapricot":5,"-":49}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"# javatro - CLI Roguelike Deck-Building Game [![Super-Linter](https://github.com/AY2425S2-CS2113-W13-1/tp/actions/workflows/FormatLintTestBuild.yml/badge.svg)](https://github.com/marketplace/actions/super-linter)","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Overview","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"javatro is a text-based roguelike deck-building game designed for those who love strategic gameplay without the need for graphical interfaces. Inspired by the game *Balatro*, it combines elements of poker and roguelike mechanics to create a deeply replayable, strategic experience that can be enjoyed through a simple command-line interface (CLI).","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"- Deck-Building: Build and customize your deck of cards, each with unique effects and abilities.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"- Turn-Based Combat: Engage in strategic, turn-based combat, making every move count.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"- Replayability: With random encounters, different challenges, and evolving strategies, no two runs are ever the same.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"- Minimalist Design: A lightweight, no-graphics interface focuses on depth and gameplay rather than visual aesthetics.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"- Cross-Platform: Works seamlessly on various operating systems, including Windows, macOS, and Linux.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Installation","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Prerequisites","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"- Java 11 or higher","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"- Command-line interface (CLI) access","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"### Steps","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Clone the repository:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"      git clone https://github.com/yourusername/javatro.git","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"   cd javatro","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"2. Compile and run the game:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"      javac javatro.java","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"   java javatro","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"3. Enjoy the game!","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"## Gameplay","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Objective","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"The goal of javatro is to progress through a series of challenging encounters by strategically building and managing your deck of cards. Each card has unique effects that can be used during combat to defeat enemies, gain resources, and navigate different challenges.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"### How to Play","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Start a New Game: Upon starting the game, you\u0027ll be prompted to create a deck and begin your journey.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"2. Turn-Based Combat: During combat, you\u0027ll choose cards from your deck to perform actions like attacking, defending, or gaining buffs.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"3. Card Management: As you progress, you\u0027ll acquire new cards that can be added to your deck, allowing you to tailor your strategy.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"4. Roguelike Elements: Each run is procedurally generated with different events, enemies, and challenges, providing endless replayability.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"### Commands","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"- `start`: Start a new game.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"- `draw`: Draw a card from your deck.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"- `attack`: Attack an enemy using a card\u0027s effect.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"- `defend`: Defend against an enemy\u0027s attack.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"- `exit`: Quit the game.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"### Card Types","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"- Attack Cards: Deal damage to enemies.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"- Defend Cards: Block or reduce incoming damage.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"- Special Cards: Provide unique abilities like healing, buffs, or drawing extra cards.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"## Target Audience","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"- Card Game Enthusiasts: Players who enjoy the depth of card games and strategic decision-making.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"- Roguelike Fans: Those who love procedural generation and the challenge of each new run.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"- Tech-Savvy Players: Individuals comfortable with command-line interfaces and minimalist gameplay.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"- Cross-Platform Gamers: Users who want a consistent gaming experience across various platforms.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"## Contributing","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"We welcome contributions to the development of javatro! If you\u0027d like to contribute, please follow these steps:","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Fork the repository.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"2. Create a new branch for your changes.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"3. Make your changes and commit them with descriptive messages.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"4. Push your changes and create a pull request.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"## License","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"javatro is licensed under the MIT License.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Contact","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"For more information or support, please contact us at:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"- Email: support@javatrogame.com","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"- GitHub Repository: https://github.com/yourusername/javatro","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"Special thanks to the creators of *Balatro*, whose game inspired the design and mechanics of javatro.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"Enjoy the game, and may your strategic decisions lead you to victory!","lastModifiedDate":"2025-02-19","isFullCredit":false}],"authorContributionMap":{"Markneoneo":8,"flyingapricot":1,"-":90}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"sourceSets {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    main {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        resources {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"            srcDirs \u003d [\u0027src/main/java\u0027]","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"            include \u0027**/*.txt\u0027","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"    mainClass.set(\"javatro.Javatro\")","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    archiveBaseName.set(\"javatro\")","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"Markneoneo":11,"-":44,"jwyk":1}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for the coding standard at","lastModifiedDate":"2022-05-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://se-education.org/guides/conventions/java/basic.html","lastModifiedDate":"2022-05-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        \u003cproperty name\u003d\"file\" value\u003d\"/github/workspace/config/checkstyle/suppressions.xml\"/\u003e","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        IMPORT CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"        An import statement is redundant if:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"          * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for unused import statements.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"        An import statement is unused if:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"          It\u0027s not referenced in the file.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"        NAMING CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"            \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"        LENGTH and CODING CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"          Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"          C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"            the same line. e.g., the following example is fine:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"              } else","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"            \u003c!-- This next example is not fine:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"              }","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"              else","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"            \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"            if (true) return 1; // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"            if (true) { return 1; } // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"            else if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"              return 1; // else if should always be multi line","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"            if (true)","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"              return 1; // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"            \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"            some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"        ORDER CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"          1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"          2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"          3. Constructors","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"          4. Methods","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"-"},"content":"        \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that default is after all cases in a switch statement --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"DefaultComesLast\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"                 8.4.3.  The prescribed order is:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"                 public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"                 synchronized, native, strictfp","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"              --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"-"},"content":"        WHITESPACE CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"throwsIndent\" value\u003d\"8\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NoWhitespaceBeforeCaseDefaultColon\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"-"},"content":"        JAVADOC CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all block-tags are ordered correctly. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that Javadoc block tags appear only at the beginning of the line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocBlockTagLocation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all Javadoc comments start from the second line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocContentLocationCheck\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each line in Javadoc has leading asterisks. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingLeadingAsterisk\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each non-empty line in Javadoc has whitespace after leading asterisk. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingWhitespaceAfterAsterisk\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that for block tags, indentation of continuation lines is at least 4 spaces. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocTagContinuationIndentation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every class, enumeration and interface. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every method (excluding getters, setters and constructors). --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"accessModifiers\" value\u003d\"public\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false}],"authorContributionMap":{"flyingapricot":1,"-":286}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jian Quan | [Github](https://github.com/K-J-Q/) | [Portfolio](docs/team/jianquan.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"![](https://nus.instructure.com/images/thumbnails/1889759/an0Mp6dUc8X7JQSsTru3w37v24OKL2CvjasETO58) | Neeraj Kumbar | [Github](https://github.com/flyingapricot) | [Portfolio](docs/team/neerajkumbar.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"![gumball.jpg](https://encrypted-tbn0.gstatic.com/images?q\u003dtbn:ANd9GcRgZ7j0HTP8PmUJFy4_7VREGM8F625LVsfXXQ\u0026s) | Mark Neo Qi Hao | [Github](https://github.com/Markneoneo) | [Portfolio](docs/team/Markneoqihao.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"![](https://avatars.githubusercontent.com/u/63852595?v\u003d4)| John Woo Yi Kai | [Github](https://github.com/jwyk) | [Portfolio](docs/team/johnwooyikai.md)","lastModifiedDate":"2025-03-05","isFullCredit":false}],"authorContributionMap":{"Markneoneo":1,"flyingapricot":1,"K-J-Q":1,"-":4,"jwyk":1}},{"path":"src/main/java/javatro/Javatro.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javatro.display.screens.StartScreen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * The {@code javatro} class serves as the main entry point for the application. It initializes the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":" * necessary components, including the view, core logic, and manager, and sets the screen of the","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" * manager to the start screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Javatro {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** The view component of the application. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private static final UI javatroView \u003d new UI();","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** The core logic component of the application. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    private static final JavatroCore javatroCore \u003d new JavatroCore();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /** The manager responsible for handling interactions between the view and core components. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    private static final JavatroManager javatroManager;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    static {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"            javatroManager \u003d new JavatroManager(javatroView, javatroCore);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"     * The main entry point of the application. It initializes the start screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"     * @param args Command-line arguments (not used in this application).","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    public static void main(String[] args) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        assert false : \"dummy assertion set to fail\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(new StartScreen());","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":20,"flyingapricot":12,"-":9}},{"path":"src/main/java/javatro/core/Card.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import java.util.Objects;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a playing card with a rank and a suit. Each card has a rank (e.g., ACE, KING, QUEEN)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * and a suit (e.g., HEARTS, SPADES). The rank also determines the chip value of the card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"public record Card(Rank rank, Suit suit) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /** Enum representing the rank of a card, along with its symbol and chip value. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    public enum Rank {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"        TWO(\"2\", 2),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"        THREE(\"3\", 3),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"        FOUR(\"4\", 4),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        FIVE(\"5\", 5),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"        SIX(\"6\", 6),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        SEVEN(\"7\", 7),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        EIGHT(\"8\", 8),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        NINE(\"9\", 9),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        TEN(\"10\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        JACK(\"J\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        QUEEN(\"Q\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        KING(\"K\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        ACE(\"A\", 11);","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        private final String symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        private final int chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"         * Constructs a rank with the given symbol and chip value.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"         * @param symbol The symbol representing the rank (e.g., \"A\" for ACE).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"         * @param chips The chip value associated with the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        Rank(String symbol, int chips) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"            this.symbol \u003d symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"            this.chips \u003d chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"         * Returns the symbol of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"         * @return The symbol of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        public String getSymbol() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"            return symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"         * Returns the chip value of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"         * @return The chip value of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        public int getChips() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"            return chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /** Enum representing the suit of a card. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    public enum Suit {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"        HEARTS(\"Hearts\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        CLUBS(\"Clubs\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"        SPADES(\"Spades\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"        DIAMONDS(\"Diamonds\");","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        private final String name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"         * Constructs a suit with the given name.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"         * @param name The name of the suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        Suit(String name) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"            this.name \u003d name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"         * Returns the name of the suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"         * @return The name of the suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        public String getName() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"            return name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"     * Returns the chip value of the card based on its rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"     * @return The chip value of the card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    public int getChips() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"        return rank.getChips();","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"    public String toString() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        return String.format(\"%s of %s\", rank.getSymbol(), suit.getName());","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"    // For displaying the card in the game","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"    public String getSimplified() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String suitVal \u003d","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Objects.equals(suit().getName(), \"Hearts\")","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"                        ? \"H\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"                        : Objects.equals(suit().getName(), \"Clubs\")","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"                                ? \"C\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"                                : Objects.equals(suit().getName(), \"Spades\")","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"                                        ? \"S\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                        : Objects.equals(suit().getName(), \"Diamonds\") ? \"D\" : \"-\";","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"        return rank.getSymbol() + suitVal;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":91,"flyingapricot":8,"-":16}},{"path":"src/main/java/javatro/core/Deck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import java.util.Collections;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"/*","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":" * Holds all the free cards the player has","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":" * Contains an ArrayList of type Card: with 0 being the top of the deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":" * and ArrayList.size() being the bottom","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"public class Deck {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    private static ArrayList\u003cCard\u003e deck;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"     * Initialize the deck with cards that the player owns If no new cards owned or a new game has","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"     * started, initializes a new deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    public Deck() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        deck \u003d populateNewDeck();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    /** Draws and returns a card from the top of the deck. */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    public Card draw() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        return deck.remove(0);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    /** Returns an integer containing the cards left in the deck */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    public int getRemainingCards() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"        return deck.size();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"     * Initialize a new shuffled 52 card deck for a new game Consists of the standard Poker Deck: 13","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"     * Cards of the 4 Suits","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateNewDeck() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"        for (Card.Rank rank : Card.Rank.values()) {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"            for (Card.Suit suit : Card.Suit.values()) {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"                newDeck.add(new Card(rank, suit));","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(newDeck);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":1,"flyingapricot":1,"jwyk":44}},{"path":"src/main/java/javatro/core/HandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FIVE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FLUSH;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FOUR_OF_A_KIND;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FULL_HOUSE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.HIGH_CARD;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.PAIR;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.ROYAL_FLUSH;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.STRAIGHT;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.STRAIGHT_FLUSH;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.THREE_OF_A_KIND;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.TWO_PAIR;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import java.util.HashMap;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import java.util.Map;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":" * The `HandResult` class evaluates a poker hand based on the given cards. It supports hands with 1","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":" * to 5 cards and determines the best possible poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"public class HandResult {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"     * Evaluates the poker hand based on the given list of cards.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     * @param cards A list of cards to evaluate. Must contain between 1 and 5 cards.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     * @return A `PokerHand` object representing the evaluated hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     * @throws IllegalArgumentException If the input is null or contains fewer than 1 card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    public static PokerHand evaluateHand(List\u003cCard\u003e cards) throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        if (cards \u003d\u003d null || cards.isEmpty() || cards.size() \u003e 5) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidPlayedHand();","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Counts occurrences of each rank (e.g., {\"A\":1, \"K\":1, \"Q\":1, \"J\":1, \"10\":1} for a Royal","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Flush).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cCard.Rank, Integer\u003e rankCount \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        // Counts occurrences of each suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cCard.Suit, Integer\u003e suitCount \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        // card.rank() retrieves the rank of the card (e.g., Rank.ACE, Rank.KING, Rank.TEN, etc.).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        // rankCount.getOrDefault(card.rank(), 0) checks if the rank is already in the map:","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        //   - If yes, it gets the current count.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        //   - If not, it returns 0 (default value).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        // +1 increments the count for that rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        // put() updates the rank count in the map.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"            rankCount.put(card.rank(), rankCount.getOrDefault(card.rank(), 0) + 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"            suitCount.put(card.suit(), suitCount.getOrDefault(card.suit(), 0) + 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        boolean isFlush \u003d suitCount.containsValue(5); // All cards have the same suit","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        boolean isStraight \u003d isStraight(rankCount); // Cards form a consecutive sequence","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        boolean isRoyal \u003d isRoyal(rankCount); // Special case: A, K, Q, J, 10","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        // Determine the best poker hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        if (cards.size() \u003d\u003d 1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(HIGH_CARD); // Single card is always a high card","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"        } else {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"            return evaluateMultiCardHand(rankCount, isFlush, isStraight, isRoyal);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     * Evaluates poker hands with 2 to 5 cards using a priority-based approach.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"     * @param isFlush Whether the hand is a flush.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"     * @param isStraight Whether the hand is a straight.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"     * @param isRoyal Whether the hand is a royal flush.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"     * @return A `HandResult` object representing the evaluated hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private static PokerHand evaluateMultiCardHand(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"            Map\u003cCard.Rank, Integer\u003e rankCount,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"            boolean isFlush,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"            boolean isStraight,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"            boolean isRoyal) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        // Check for the strongest hands first","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        if (isRoyal \u0026\u0026 isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(ROYAL_FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"        } else if (isStraight \u0026\u0026 isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(STRAIGHT_FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(4)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FOUR_OF_A_KIND);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(3) \u0026\u0026 rankCount.containsValue(2)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FULL_HOUSE);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        } else if (isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        } else if (isStraight) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(STRAIGHT);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(3)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(THREE_OF_A_KIND);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.values().stream().filter(count -\u003e count \u003d\u003d 2).count() \u003d\u003d 2) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(TWO_PAIR);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(2)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(PAIR);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"        // Default case: High Card","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"        return new PokerHand(HIGH_CARD);","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the given hand forms a straight (consecutive sequence of ranks).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"     * @return `true` if the hand is a straight, `false` otherwise.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isStraight(Map\u003cCard.Rank, Integer\u003e rankCount) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"        // rankCount.keySet() gets the unique card ranks in the hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard.Rank\u003e ranks \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"                rankCount.keySet().stream()","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                        .sorted() // sorts the ranks in ascending order.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"                        .toList(); // converts the result into a list.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        // A straight must have five distinct card ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        if (ranks.size() \u003d\u003d 5) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"            boolean normalStraight \u003d true;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"            // Loops through the sorted list and checks if each rank follows the previous rank","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"            // consecutively","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"            // ordinal() returns the numerical position of the enum value.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"            // If the difference between consecutive ranks is not exactly 1, return false.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"            for (int i \u003d 0; i \u003c 4; i++) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"                if (ranks.get(i + 1).ordinal() !\u003d ranks.get(i).ordinal() + 1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"                    normalStraight \u003d false;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"                    break;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"            // Special case: Ace-low straight (A-2-3-4-5)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"            boolean aceLowStraight \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"                    ranks.contains(ACE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(TWO)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(THREE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(FOUR)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(FIVE);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"            return normalStraight || aceLowStraight;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        return false;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the given hand is a royal flush (A, K, Q, J, 10 of the same suit).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"     * @return `true` if the hand is a royal flush, `false` otherwise.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isRoyal(Map\u003cCard.Rank, Integer\u003e rankCount) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        return rankCount.containsKey(ACE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(KING)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(QUEEN)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(JACK)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(TEN);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":155,"-":17}},{"path":"src/main/java/javatro/core/HoldingHand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import java.util.Comparator;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import java.util.HashSet;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import java.util.Set;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"/*","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" * Tracks the 8 cards held in a hand","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":" * Handles the draw function and discard function","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class HoldingHand {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    protected List\u003cCard\u003e Hand;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    private final int HOLDING_LIMIT \u003d 8; // The maximum number of cards a hand can hold","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Instantiate an empty List of Cards. */","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    public HoldingHand() {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        Hand \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"     * Adds a Card to the Hand.","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis function should not be called if Hand size \u003e\u003d HOLDING_LIMIT","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    public void add(Card cardToAdd) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"        if (Hand.size() \u003c HOLDING_LIMIT) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"            Hand.add(cardToAdd);","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"            throw new JavatroException(\"Exceeded Cards to be added.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"     * Draws a specified number of cards from the deck and adds them to the Hand.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"     * @param numberOfDraws The number of cards to draw from the deck","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"     * @param deck Deck containing the remaining cards","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    public void draw(int numberOfDraws, Deck deck) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c numberOfDraws; i++) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"            if (Hand.size() \u003c HOLDING_LIMIT) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"                Card tempCard \u003d deck.draw();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"                Hand.add(tempCard);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"            } else {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"                throw new JavatroException(\"Exceeded Cards to be added.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"     * Returns the specified cards as requested by the player Hand will then draw the same number of","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"     * cards back from the deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"     * \u003cp\u003eThis function should not be called if there are no cards played.","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"     * @param cardsToPlay List containing cards to be played","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"     * @param deck Deck containing the remaining cards","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"    public List\u003cCard\u003e play(List\u003cInteger\u003e cardsToPlay, Deck deck) throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e playList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"        // Validate that cardsToPlay and the played card positions are valid inputs","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"        if (cardsToPlay.size() \u003e 5) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new JavatroException(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"                    \"Number of cards played \"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                            + \"(\"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                            + cardsToPlay.size()","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                            + \")\"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                            + \" exceeds maximum allowed. (5)\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"            for (int index : cardsToPlay) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"                if (index \u003c 0 || index \u003e\u003d Hand.size()) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"                    throw new JavatroException(\"Invalid index in cards to be played: \" + index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"                }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jwyk"},"content":"        // Create a set to mark indices for removal","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"        Set\u003cInteger\u003e indicesToRemove \u003d new HashSet\u003c\u003e(cardsToPlay);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"        // Add cards that should be played in order of cardsToPlay","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"        for (int index : cardsToPlay) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"            if (indicesToRemove.contains(index)) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"                Card card \u003d Hand.get(index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jwyk"},"content":"                playList.add(card);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"        // Remove the cardsToPlay from the Hand in descending order of indices","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"        List\u003cInteger\u003e sortedToRemove \u003d new ArrayList\u003c\u003e(indicesToRemove);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"        sortedToRemove.sort(Comparator.reverseOrder());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"        for (int index : sortedToRemove) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jwyk"},"content":"            Hand.remove(index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"        return playList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"     * Discards a set number of cards. This function should not be used if the number of discards","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"     * left is 0.","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"     * @param cardsToDiscard List containing the cards at specified positions to be discarded","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"     * @param deck Deck containing the remaining cards","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"    public void discard(List\u003cInteger\u003e cardsToDiscard, Deck deck) throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jwyk"},"content":"        // Validate that cardsToDiscard and the played card positions are valid inputs","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"        if (cardsToDiscard.size() \u003e 5) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new JavatroException(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"                    \"Number of cards discarded \"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"                            + \"(\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"                            + cardsToDiscard.size()","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"                            + \")\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"                            + \" exceeds maximum allowed. (5)\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jwyk"},"content":"            for (int index : cardsToDiscard) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jwyk"},"content":"                if (index \u003c 0 || index \u003e\u003d Hand.size()) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"                    throw new JavatroException(\"Invalid index in cards to be discarded: \" + index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"                }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jwyk"},"content":"        // Remove the cardsToPlay from the Hand in descending order of indices","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        Set\u003cInteger\u003e indicesToDiscard \u003d new HashSet\u003c\u003e(cardsToDiscard);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e sortedToRemove \u003d new ArrayList\u003c\u003e(indicesToDiscard);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jwyk"},"content":"        sortedToRemove.sort(Comparator.reverseOrder());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jwyk"},"content":"        for (int index : sortedToRemove) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jwyk"},"content":"            Hand.remove(index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"     * Retrieves the list of cards in the player\u0027s hand.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"     * @return A {@code List} of {@code Card} objects representing the player\u0027s hand.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"    public List\u003cCard\u003e getHand() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"        return Hand;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":5,"flyingapricot":9,"K-J-Q":15,"-":15,"jwyk":100}},{"path":"src/main/java/javatro/core/JavatroCore.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code JavatroCore} class represents the main game model, responsible for managing game","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * rounds and initializing the game state.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"/** The core game logic class that manages the game state and rounds. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"public class JavatroCore {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"    /** The current active round in the game. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"    public static Round currentRound;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"     * Starts a new round and assigns it to the current round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     * @param round The new round to start.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while initializing the round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    private void startNewRound(Round round) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"        currentRound \u003d round;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"     * Creates a new classic round with predefined settings.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"     * @return A {@code Round} instance configured as a classic round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while creating the round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    private Round classicRound() {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        Deck d \u003d new Deck();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"            return new Round(300, 4, d, \"Classic\", \"Classic Round\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException javatroException) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"            System.out.println(javatroException.getMessage());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"        return null;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Starts the game by initializing a new round. This method is called when the game begins.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while starting the game.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"    public void beginGame() {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"        startNewRound(classicRound());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-16","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"flyingapricot":40,"-":4}},{"path":"src/main/java/javatro/core/JavatroException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" * Represents a custom exception class for handling domain-specific errors in the javatro","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":" * application.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis class extends {@link Exception} and provides static factory methods to create exceptions","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * for different error scenarios. It is used to handle errors related to invalid game states, such","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * as invalid card plays, invalid deck configurations, and more.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * @see Exception","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public final class JavatroException extends Exception {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    private static final String RED \u003d \"\\033[31m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"    private static final String END \u003d \"\\033[0m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code JavatroException} with the specified error message.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     * @param message The detailed error message explaining the exception.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    public JavatroException(String message) {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        super(\"⚠️ \" + RED + message + END);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code JavatroException} with the specified error message and cause.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     * @param message The detailed error message explaining the exception.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param cause The cause of the exception (which is saved for later retrieval by the {@link","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *     #getCause()} method).","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    public JavatroException(String message, Throwable cause) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        super(message, cause);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an invalid number of cards played.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the user plays an invalid number of cards.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the correct number of cards to play.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidPlayedHand() {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"A poker hand must contain between 1 and 5 cards.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an invalid number of plays per round.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to start a round with an invalid number of","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"     * plays.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the correct number of plays per round.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidPlaysPerRound() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Number of plays per round must be greater than 0.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an invalid blind score.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to start a round with an invalid blind score.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the correct blind score.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidBlindScore() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Blind score must be greater than or equal to 0.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an invalid deck.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to start a round with an invalid deck.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the correct deck.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidDeck() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Deck cannot be null.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating no plays remaining.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to play cards when no plays are remaining.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating that no plays are remaining.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException noPlaysRemaining() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"No plays remaining.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating invalid card input.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the user provides invalid input for card selection.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating invalid card input.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidCardInput() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Invalid input! Please enter valid numbers.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Creates an exception indicating that the user has exceeded the maximum allowed card","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * selection.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the user selects more cards than allowed.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsToSelect the maximum number of cards allowed to be selected","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the maximum allowed card selection.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException exceedsMaxCardSelection(int maxCardsToSelect) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"You can only select up to \" + maxCardsToSelect + \" cards.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating invalid menu input.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the user provides invalid input for menu navigation.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"     * @param maxRange the maximum valid input range","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the valid input range.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidMenuInput(int maxRange) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return new JavatroException(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"                \"Invalid input! Please enter a number between 1 and \" + maxRange + \".\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating invalid input type.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when the user provides non-numeric input where a number is","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * expected.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating that a number is required.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidInputType() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Invalid input! Please enter a number.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an invalid options title.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the options title is null or empty.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the options title is invalid.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidOptionsTitle() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Options title cannot be null or empty.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidOptionsSize() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Number of options cannot be null or empty.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an invalid screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the screen is null.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the screen is invalid.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Screen cannot be null.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an index is out of bounds.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when an invalid index is accessed.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"     * @param index The invalid index that caused the exception.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the index is out of bounds.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException indexOutOfBounds(int index) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Index is out of bounds: \" + index);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an error loading the logo from a file.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the logo file cannot be loaded.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"     * @param fileName The name of the file that could not be loaded.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the error loading the logo.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException errorLoadingLogo(String fileName) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Error loading logo from: \" + fileName);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an invalid selection limit.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis exception is thrown when the selection limit is less than 1.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"     * @return A {@code JavatroException} indicating the selection limit must be a positive value.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidSelectionLimit() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Selection limit must be a positive value.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-08","isFullCredit":false}],"authorContributionMap":{"Markneoneo":153,"K-J-Q":35,"-":15}},{"path":"src/main/java/javatro/core/PokerHand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" * Represents the result of evaluating a poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * @param handType The type of poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"public record PokerHand(HandType handType) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"     * Enum representing all possible poker hand types, along with their base chips and multipliers.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"    public enum HandType {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"        ROYAL_FLUSH(\"Royal Flush\", 100, 8),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"        STRAIGHT_FLUSH(\"Straight Flush\", 100, 8),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        FOUR_OF_A_KIND(\"Four of a Kind\", 60, 7),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"        FULL_HOUSE(\"Full House\", 40, 4),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        FLUSH(\"Flush\", 35, 4),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        STRAIGHT(\"Straight\", 30, 4),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        THREE_OF_A_KIND(\"Three of a Kind\", 30, 3),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        TWO_PAIR(\"Two Pair\", 20, 2),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        PAIR(\"Pair\", 10, 2),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        HIGH_CARD(\"High Card\", 5, 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        private final String handName;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        private final int chips;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        private final int multiplier;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        HandType(String handName, int chips, int multiplier) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            this.handName \u003d handName;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"            this.chips \u003d chips;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"            this.multiplier \u003d multiplier;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        public String getHandName() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"            return handName;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        public int getChips() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"            return chips;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"        public int getMultiplier() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"            return multiplier;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"     * Returns the base chips for this poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"     * @return The base chips.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    public int getChips() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        return handType.getChips();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"     * Returns the multiplier for this poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"     * @return The multiplier.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"    public int getMultiplier() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        return handType.getMultiplier();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"     * Returns the hand name for this poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"     * @return The hand name.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"    public String getHandName() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        return handType.getHandName();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"    public String toString() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return String.format(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \"%s (Base Chips: %d, Multiplier: %d)\",","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                handType.getHandName(), handType.getChips(), handType.getMultiplier());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":78,"-":3}},{"path":"src/main/java/javatro/core/Round.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeSupport;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import java.util.HashSet;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import java.util.Set;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"public class Round {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"    /** The initial number of cards dealt to the player. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"    public static final int INITIAL_HAND_SIZE \u003d 8;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"    /** The maximum number of discards allowed per round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"    public static final int MAX_DISCARDS_PER_ROUND \u003d 4;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /** The number of cards required to form a valid poker hand. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"    private static final int POKER_HAND_SIZE \u003d 5;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    /** The player\u0027s current score in the round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    private int currentScore;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    /** The minimum score required to win the round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"    private int blindScore;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    /** The number of remaining discards allowed. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"    private int remainingDiscards;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    /** The number of remaining plays in the round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"    private int remainingPlays;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    /** The deck of cards used in the round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    private Deck deck;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    /** The player\u0027s current hand of cards. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    private HoldingHand playerHand;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    /** The name of the current round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    private String roundName \u003d \"\";","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    /** The description of the current round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    private String roundDescription \u003d \"\";","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    /** Manages property change listeners for game state updates. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    private final PropertyChangeSupport support \u003d new PropertyChangeSupport(this); // Observable","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Constructs a new round with the specified blind score. The blind score can be fetched from a","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * file or manually inputed.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * \u003cp\u003e//@param gameState The current state of the game.","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Round(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"            int blindScore,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"            Deck deck,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String roundName,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"            String roundDescription)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"        this.currentScore \u003d 0;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"        this.blindScore \u003d blindScore;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"        this.remainingDiscards \u003d MAX_DISCARDS_PER_ROUND;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"        this.remainingPlays \u003d remainingPlays;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"        this.playerHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"        // Default descriptions and names","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"        this.roundName \u003d roundName;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"        this.roundDescription \u003d roundDescription;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"        if (blindScore \u003c 0) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidBlindScore();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"        if (remainingPlays \u003c\u003d 0) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidPlaysPerRound();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"        if (deck \u003d\u003d null) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidDeck();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"        // Initial draw","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"        playerHand.draw(INITIAL_HAND_SIZE, this.deck);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"     * Registers an observer to listen for property changes.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"     * @param pcl The property change listener to register.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"    public void addPropertyChangeListener(PropertyChangeListener pcl) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"        support.addPropertyChangeListener(pcl);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Fires property change events to notify observers of updated round variables. This method","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"     * updates display components and other observers about the current game state.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"    public void updateRoundVariables() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"        support.firePropertyChange(\"blindScore\", null, blindScore);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"        support.firePropertyChange(\"remainingPlays\", null, remainingPlays);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"        support.firePropertyChange(\"remainingDiscards\", null, remainingDiscards);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"        support.firePropertyChange(\"roundName\", null, roundName);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"        support.firePropertyChange(\"roundDescription\", null, roundDescription);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"        support.firePropertyChange(\"holdingHand\", null, getPlayerHand());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"        support.firePropertyChange(\"currentScore\", null, currentScore);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"        if (isRoundOver() \u0026\u0026 isWon()) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"            support.firePropertyChange(\"roundComplete\", null, 1);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"        } else if (isRoundOver() \u0026\u0026 !isWon()) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"            support.firePropertyChange(\"roundComplete\", null, -1);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"        } else {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"            support.firePropertyChange(\"roundComplete\", null, 0);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"     * Plays a set of 5 cards as a poker hand.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"     * @param cardIndices Indices of cards to play from the holding hand (must be exactly 5 cards)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If the number of cards played is not equal to 5","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"    public void playCards(List\u003cInteger\u003e cardIndices) throws JavatroException {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"        if (cardIndices.size() \u003e POKER_HAND_SIZE || cardIndices.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidPlayedHand();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"K-J-Q"},"content":"        if (remainingPlays \u003c\u003d 0) {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.noPlaysRemaining();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"        List\u003cCard\u003e playedCards \u003d playerHand.play(cardIndices, this.deck);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"        PokerHand result \u003d HandResult.evaluateHand(playedCards);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"        Integer totalChips \u003d result.getChips();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"        for (Card card : playedCards) {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"            totalChips +\u003d card.getChips();","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"        // Update round state","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"        currentScore +\u003d totalChips * result.getMultiplier();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"        // Draw new cards to replace played ones","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"        playerHand.draw(cardIndices.size(), deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"        remainingPlays--;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"        updateRoundVariables();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"     * Discards cards from the player\u0027s hand.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @param cardIndices Indices of cards to discard from the holding hand","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"     * @throws IllegalStateException If no remaining discards are available","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"jwyk"},"content":"    public void discardCards(List\u003cInteger\u003e cardIndices) throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"        if (remainingDiscards \u003c\u003d 0) {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"            throw new JavatroException(\"No remaining discards available\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"        // Handle duplicates by using a Set","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"        Set\u003cInteger\u003e indicesToDiscard \u003d new HashSet\u003c\u003e(cardIndices);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"K-J-Q"},"content":"        playerHand.discard(cardIndices, deck);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"K-J-Q"},"content":"        remainingDiscards--;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"        playerHand.draw(indicesToDiscard.size(), deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"flyingapricot"},"content":"        updateRoundVariables();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"K-J-Q"},"content":"    // Getters","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"K-J-Q"},"content":"    public int getCurrentScore() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"K-J-Q"},"content":"        return currentScore;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"K-J-Q"},"content":"    public int getBlindScore() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"K-J-Q"},"content":"        return blindScore;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingDiscards() {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"        return remainingDiscards;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingPlays() {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"K-J-Q"},"content":"        return remainingPlays;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"flyingapricot"},"content":"    public List\u003cCard\u003e getPlayerHand() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"flyingapricot"},"content":"        return playerHand.getHand();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"K-J-Q"},"content":"     * Checks if the round is over based on game rules.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"K-J-Q"},"content":"     * @return true if the round is over, false otherwise","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"K-J-Q"},"content":"    public boolean isRoundOver() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"flyingapricot"},"content":"        // Round ends if no plays are remaining","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"flyingapricot"},"content":"        return remainingPlays \u003c\u003d 0;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"K-J-Q"},"content":"     * Determines if the round was won.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"K-J-Q"},"content":"     * @return true if player won the round, false otherwise","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"K-J-Q"},"content":"    public boolean isWon() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"K-J-Q"},"content":"        return currentScore \u003e\u003d blindScore \u0026 isRoundOver();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"flyingapricot"},"content":"    public String getRoundName() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"flyingapricot"},"content":"        return roundName;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"flyingapricot"},"content":"    public void setRoundName(String roundName) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"flyingapricot"},"content":"        this.roundName \u003d roundName;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"flyingapricot"},"content":"    public String getRoundDescription() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"flyingapricot"},"content":"        return roundDescription;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"flyingapricot"},"content":"    public void setRoundDescription(String roundDescription) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"flyingapricot"},"content":"        this.roundDescription \u003d roundDescription;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":13,"flyingapricot":83,"K-J-Q":109,"-":17,"jwyk":1}},{"path":"src/main/java/javatro/core/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":" * The {@code core} package contains the core game logic and data structures necessary for managing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * the game state, rounds, cards, and hands.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis package is responsible for handling the deck, player hands, and round mechanics while","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * interacting with the game manager and view components.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eClasses in this package:\u003c/h2\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Core.Card} - Represents an individual playing card.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Core.Deck} - Manages the deck of cards used in the game.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Core.HandResult} - Stores and evaluates the result of a player\u0027s","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" *       hand.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Core.HoldingHand} - Represents the player\u0027s current hand.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Core.JavatroCore} - The main game model responsible for game state","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":" *       and round management.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Core.PokerHand} - Defines and evaluates different types of poker","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":" *       hands.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Core.Round} - Represents an individual game round.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":19,"-":4}},{"path":"src/main/java/javatro/display/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.getCurrentScreen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeSupport;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import java.util.Objects;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" * Handles parsing and validation of user input for the javatro application.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis class is responsible for:","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":" *   \u003cli\u003eProcessing user input for card selections","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":" *   \u003cli\u003eHandling menu navigation input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":" *   \u003cli\u003eValidating input ranges and formats","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":" *   \u003cli\u003eNotifying observers (e.g., {@code JavatroManager}) of user input changes","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"public class Parser {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String MENU_PROMPT \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"            UI.BLUE + UI.BOLD + \"✍️ Enter Option Index (1-%d)\\n╰┈➤ \" + UI.END;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String CARD_PROMPT \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"            UI.BLUE","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    + UI.BOLD","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    + \"✍️ Enter Card Indices between 1-%d. Up to %d cards only. (e.g. 1,2,3,4,5)\\n\"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    + \"╰┈➤ \"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"                    + UI.END;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"    /** Property change support for notifying observers of user input changes. */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"    private final PropertyChangeSupport support \u003d new PropertyChangeSupport(this);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     * Registers an observer to listen for user input changes.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"     * @param pcl the property change listener to register","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    public void addPropertyChangeListener(PropertyChangeListener pcl) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        if (pcl \u003d\u003d null) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidScreen();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"        support.addPropertyChangeListener(pcl);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     * Handles user input for navigating the current screen and notifies observers.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis method:","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eDisplays current screen options","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eValidates input is within the allowed range","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eNotifies registered listeners of the valid input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eClears the screen after successful input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if no options are available in current screen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"    public void getOptionInput() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"        int maxRange \u003d getCurrentScreen().getOptionsSize();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        if (maxRange \u003c\u003d 0) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidOptionsSize();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        while (true) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"                UI.clearScreen();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                getCurrentScreen().displayOptions();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                System.out.printf(MENU_PROMPT, maxRange);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"                if (!scanner.hasNextInt()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"                    //                    scanner.nextLine(); // Clear invalid input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.invalidInputType();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"                int input \u003d scanner.nextInt();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"                //                scanner.nextLine(); // Consume newline","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"                if (input \u003e\u003d 1 \u0026\u0026 input \u003c\u003d maxRange) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"                    support.firePropertyChange(\"userInput\", null, input);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"                    return;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"                throw JavatroException.invalidMenuInput(maxRange);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            } catch (Exception e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                scanner.nextLine(); // Clear invalid input","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"     * Prompts the user to select card numbers and returns a list of selected card indices.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsAvailable the maximum number of available cards (1-based)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsToSelect the maximum number of cards a user can select","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"     * @return an unmodifiable list of selected card indices (0-based)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"    public static List\u003cInteger\u003e getCardInput(int maxCardsAvailable, int maxCardsToSelect) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"        while (true) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"            try {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"                // Clear screen and show header","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"                UI.clearScreen();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"                System.out.printf(CARD_PROMPT, maxCardsAvailable, maxCardsToSelect);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"                String input \u003d scanner.nextLine().trim();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"                if (input.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.invalidCardInput();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                List\u003cInteger\u003e userInput \u003d parseCardInput(input, maxCardsAvailable);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"                if (userInput.size() \u003e maxCardsToSelect) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.exceedsMaxCardSelection(maxCardsToSelect);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"                return List.copyOf(userInput);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"     * Parses and validates card input string.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"     * @param input the comma-separated input string","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsAvailable the maximum allowed card number","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"     * @return list of validated card indices (0-based)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if no valid numbers are found","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"    private static List\u003cInteger\u003e parseCardInput(String input, int maxCardsAvailable)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e userInput \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                Arrays.stream(input.split(\",\"))","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"                        .map(String::trim)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"                        .filter(s -\u003e !s.isEmpty())","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"                        .map(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"                                numStr -\u003e {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"                                    try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"                                        return Integer.parseInt(numStr);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"                                    } catch (NumberFormatException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"                                        return null;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"                                    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"                                })","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"                        .filter(Objects::nonNull)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"                        .filter(num -\u003e num \u003e\u003d 1 \u0026\u0026 num \u003c\u003d maxCardsAvailable)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"                        .map(num -\u003e num - 1)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"                        .distinct()","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        if (userInput.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidCardInput();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        return userInput;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-22","isFullCredit":false}],"authorContributionMap":{"Markneoneo":107,"flyingapricot":42,"-":23}},{"path":"src/main/java/javatro/display/UI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.*;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * The {@code display} class is responsible for managing and displaying different screens in the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * application. It handles user input, manages screen transitions, and notifies observers of user","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * actions. This class follows the Singleton pattern to ensure a single instance manages all","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":" * display-related operations.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"public class UI {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** The current screen being displayed to the user. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"    private static Screen currentScreen;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Predefined game-related screens. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    private static final GameScreen GAME_SCREEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    private static final DiscardScreen DISCARD_SCREEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    private static final PlayScreen PLAY_SCREEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    private static final HelpScreen HELP_SCREEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    private static final StartScreen START_SCREEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /** Parser instance for handling user input. */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    private static final Parser PARSER \u003d new Parser();","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    static {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            GAME_SCREEN \u003d new GameScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"            DISCARD_SCREEN \u003d new DiscardScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"            PLAY_SCREEN \u003d new PlayScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"            HELP_SCREEN \u003d new HelpScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"            START_SCREEN \u003d new StartScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"            System.err.println(\"Failed to initialize screens: \" + e.getMessage());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"            throw new RuntimeException(\"Failed to initialize screens\", e);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    // region Printing Message","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    /** display-related constants for display formatting. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    public static final String END \u003d \"\\033[0m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    public static final String BOLD \u003d \"\\033[1m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    public static final String ITALICS \u003d \"\\033[3m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    public static final String UNDERLINE \u003d \"\\033[4m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    public static final String RED \u003d \"\\033[91m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    public static final String GREEN \u003d \"\\033[32m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    public static final String YELLOW \u003d \"\\033[33m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    public static final String BLUE \u003d \"\\033[94m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    public static final String PURPLE \u003d \"\\033[35m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    public static final String CYAN \u003d \"\\033[36m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    public static final String ORANGE \u003d \"\\033[38;2;255;165;0m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    /** Fixed width for the bordered message display. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    private static final int MESSAGE_WIDTH \u003d 100;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"    /** Custom border characters */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    public static final char TOP_LEFT \u003d \u0027╔\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    public static final char TOP_RIGHT \u003d \u0027╗\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"    public static final char BOTTOM_LEFT \u003d \u0027╚\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"    public static final char BOTTOM_RIGHT \u003d \u0027╝\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    public static final char HORIZONTAL \u003d \u0027═\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    public static final char VERTICAL \u003d \u0027║\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"    public static final char CROSS \u003d \u0027╬\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_UP \u003d \u0027╩\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_DOWN \u003d \u0027╦\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_LEFT \u003d \u0027╣\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_RIGHT \u003d \u0027╠\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"     * Prints a bordered message with a title and content.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"     * @param title the title of the message","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"     * @param lines the content lines to display","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    public static void printBorderedMessage(String title, String[] lines) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        // Top border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(TOP_LEFT);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(String.valueOf(HORIZONTAL).repeat(MESSAGE_WIDTH - 2));","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(TOP_RIGHT);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        // Centered title","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(centerText(BOLD + title + END, MESSAGE_WIDTH));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"        // Middle border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(VERTICAL);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(String.valueOf(HORIZONTAL).repeat(MESSAGE_WIDTH - 2));","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(VERTICAL);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"        // display lines","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        for (String line : lines) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            System.out.println(centerText(line, MESSAGE_WIDTH));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        // Bottom border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(BOTTOM_LEFT);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(String.valueOf(HORIZONTAL).repeat(MESSAGE_WIDTH - 2));","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(BOTTOM_RIGHT);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Centers the given text within a specified width, padding it with spaces on both sides. This","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * version handles ANSI escape codes and Unicode characters correctly.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"     * @param text the text to center","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"     * @param width the message width","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"     * @return the centered text surrounded by borders","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"    public static String centerText(String text, int width) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"        // Remove ANSI escape codes to calculate the actual display length","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"        String strippedText \u003d text.replaceAll(\"\\033\\\\[[;\\\\d]*m\", \"\");","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"        int displayLength \u003d strippedText.length();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"        // Ensure width is sufficient","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"        if (width \u003c\u003d displayLength + 2) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"            return String.format(\"%s %s %s\", VERTICAL, text, VERTICAL);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"        // Calculate padding","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"        int paddingSize \u003d (width - displayLength - 2) / 2;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"        int extraPadding \u003d (width - displayLength - 2) % 2; // Handles odd width cases","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        // Format the centered text with borders","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return String.format(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \"%s%s%s%s%s\",","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"                VERTICAL,","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"                \" \".repeat(paddingSize),","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"                text,","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"                \" \".repeat(paddingSize + extraPadding),","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"                VERTICAL);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"    // endregion","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"     * Sets the current screen and displays it.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"     * @param screen the screen to be displayed","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"     * @throws IllegalArgumentException if the provided screen is {@code null}","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"    public void setCurrentScreen(Screen screen) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"        if (screen \u003d\u003d null) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"        System.out.printf(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                \"%s%sTransitioning to: %s%s\\n\",","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"                ORANGE, UNDERLINE, screen.getClass().getSimpleName(), END);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"        currentScreen \u003d screen;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"flyingapricot"},"content":"        currentScreen.displayScreen();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"        PARSER.getOptionInput(); // This will handle retries internally","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"flyingapricot"},"content":"     * Gets the current screen being displayed.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"     * @return the current {@link Screen}","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"flyingapricot"},"content":"    public static Screen getCurrentScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"flyingapricot"},"content":"        return currentScreen;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /** Clears the console screen. This method uses ANSI escape codes to clear the console. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"    public static void clearScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"        final String FLUSH \u003d \"\\033[H\\033[2J\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(FLUSH);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"        System.out.flush(); // Ensure the output is flushed","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"     * Gets the parser instance for handling user input.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link Parser} instance","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"flyingapricot"},"content":"    public static Parser getParser() {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"        return PARSER;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"    // region Screen Getters","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"     * Gets the screen where users select cards to discard.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link DiscardScreen} instance","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"    public static DiscardScreen getDiscardScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"        return DISCARD_SCREEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"     * Gets the screen where users select cards to play.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link PlayScreen} instance","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"    public static PlayScreen getPlayScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"        return PLAY_SCREEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"flyingapricot"},"content":"     * Gets the game screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link GameScreen} instance","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"flyingapricot"},"content":"    public static GameScreen getGameScreen() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"        return GAME_SCREEN;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"flyingapricot"},"content":"     * Gets the start screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link StartScreen} instance","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"flyingapricot"},"content":"    public static StartScreen getStartScreen() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"        return START_SCREEN;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"     * Gets the help screen.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"     * @return the {@link HelpScreen} instance","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"    public static HelpScreen getHelpScreen() {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"        return HELP_SCREEN;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"    // endregion","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":160,"flyingapricot":47,"-":20}},{"path":"src/main/java/javatro/display/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code View} package contains all the classes related to the game\u0027s user interface (display).","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * This includes screen management, user interactions, and visual representation of game elements.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis package is responsible for rendering different game screens, handling user input, and","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * managing screen transitions.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eClasses in this package:\u003c/h2\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.GameScreen} - Displays the current game round, including player","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" *       stats and cards.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.JavatroView} - Manages the overall display and controls screen","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" *       transitions.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.OptionScreen} - Represents the options menu where users can","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":" *       change game settings.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.Screen} - An abstract base class for all screens, providing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":" *       common functionalities.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.SelectCardsToDiscardScreen} - Allows users to select cards to","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" *       discard.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.SelectCardsToPlayScreen} - Allows users to select cards to","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":" *       play.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.SelectionScreen} - A screen for selecting game elements,","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":" *       extended by other selection screens.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.View.StartScreen} - The main menu screen that provides options to","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":" *       start or exit the game.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":19,"-":10}},{"path":"src/main/java/javatro/display/screens/CardSelectScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.CardSelectOption;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ResumeGameOption;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" * The {@code CardSelectScreen} class represents an abstract screen where users select cards from","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" * their hand. It provides methods for updating and displaying the player\u0027s current hand. This class","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" * is intended to be extended by specific screens like {@code DiscardScreen} and {@code PlayScreen}.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThe class includes functionality to:","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":" *   \u003cli\u003eUpdate the player\u0027s current hand of cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" *   \u003cli\u003eDisplay the player\u0027s hand in a formatted layout.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":" *   \u003cli\u003eProvide a default selection limit for card selection.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":" * @see Screen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"public abstract class CardSelectScreen extends Screen {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    /** The list of cards currently in the player\u0027s hand. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    private List\u003cCard\u003e holdingHand;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code CardSelectScreen} with a custom options title and initializes it with a","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * resume game command.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"     * @param optionsTitle The title to display for the option menu.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during initialization.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     * @throws IllegalArgumentException if the options title is null or empty.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    public CardSelectScreen(String optionsTitle) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        super(optionsTitle);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        // Add the \"Select Cards\" and \"Resume Game\" options","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new CardSelectOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new ResumeGameOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /** Updates the holding hand by retrieving the player\u0027s current hand from the game core. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    public void updateHoldingHand() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        this.holdingHand \u003d JavatroCore.currentRound.getPlayerHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Displays the player\u0027s current hand of cards in a formatted layout. The cards are displayed","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * with their indices and simplified representations.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    protected void displayHoldingHand() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        updateHoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        if (holdingHand.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"            System.out.println(\"YOUR CARDS: No cards in hand.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"            return;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(\"YOUR CARDS:\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        // Display card indices","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder numberHeaders \u003d new StringBuilder();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c holdingHand.size(); i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"            numberHeaders","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                    .append(\"|\")","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"                    .append(GameScreen.getDisplayStringCenter(Integer.toString(i + 1), 5))","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"                    .append(\"|    \");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(numberHeaders.toString());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        // Display card headers","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        String cardHeaders \u003d (GameScreen.getHeaderString(5) + \"    \").repeat(holdingHand.size());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(cardHeaders);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        // Display card values","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder cardValues \u003d new StringBuilder();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : holdingHand) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"            cardValues","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"                    .append(\"|\")","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"                    .append(GameScreen.getDisplayStringCenter(card.getSimplified(), 5))","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"                    .append(\"|    \");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(cardValues.toString());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(cardHeaders);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Displays the screen. This method is intended to be overridden by subclasses to provide","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * specific screen display behavior.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"    public abstract void displayScreen();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":80,"-":17}},{"path":"src/main/java/javatro/display/screens/DiscardScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The {@code DiscardScreen} class represents a screen where the user selects cards to discard. It","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * extends {@code CardSelectScreen} and includes commands for making a selection. The user can","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * select up to a predefined limit of cards (default is 5).","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * @see CardSelectScreen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class DiscardScreen extends CardSelectScreen {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Constructs a {@code DiscardScreen} and initializes the selection command. The selection limit","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * is set to 5, meaning a maximum of 5 cards can be selected to discard.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during initialization.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    public DiscardScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        super(\"SELECT CARDS TO DISCARD\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Displays the current cards in the user\u0027s holding hand for selection. This method overrides","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * the parent class implementation to provide specific behavior for discarding cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        super.displayHoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":14,"flyingapricot":11,"-":7}},{"path":"src/main/java/javatro/display/screens/GameScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.DiscardCardOption;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.PlayCardOption;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeEvent;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.util.HashMap;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import java.util.Map;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The {@code GameScreen} class represents the game screen where players interact with the game by","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" * playing cards, discarding cards, and viewing their hand. It also listens for property changes to","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":" * update the game state dynamically.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"public class GameScreen extends Screen implements PropertyChangeListener {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /** display-related constants for display formatting. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    public static final String END \u003d \"\\033[0m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    public static final String RED \u003d \"\\033[31m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    public static final String GREEN \u003d \"\\033[32m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    public static final String YELLOW \u003d \"\\033[33m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public static final String BLUE \u003d \"\\033[34m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    public static final String PURPLE \u003d \"\\033[35m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    public static final String CYAN \u003d \"\\033[36m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    public static final String WHITE \u003d \"\\033[37m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    /** Indicator for whether the round is over. 1 for won, -1 for lost, 0 for ongoing. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    public static int roundOver \u003d 0;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"    /** The fixed width of the screen for display formatting. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"    private static final int screenWidth \u003d 80;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    /** The score required to pass the round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"    private static int blindScore \u003d 0;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    /** The player\u0027s score for the current round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    private static int roundScore \u003d 0;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"    /** The number of hands left to play. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"    private static int handsLeft \u003d 0;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"    /** The number of discards remaining. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"    private static int discardsLeft \u003d 0;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"    /** The player\u0027s current hand of cards. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"    private static List\u003cCard\u003e holdingHand;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"    /** The name of the current round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    private String roundName \u003d \"\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    /** The description of the current round. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"    private String roundDescription \u003d \"\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /** Constructs a {@code GameScreen} and initializes the available commands. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    public GameScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"        super(\"GAME MENU\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new PlayCardOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new DiscardCardOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /** Restores the default game commands after the round ends. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"    public void restoreGameCommands() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"        commandMap.clear();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new PlayCardOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new DiscardCardOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"     * Formats a string to be centered within a specified width.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"     * @param toDisplay The string to center.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"     * @param width The width to center within.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"     * @return The formatted string.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"    public static String getDisplayStringCenter(String toDisplay, int width) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"        if (toDisplay.length() \u003e width - 2) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"            toDisplay \u003d toDisplay.substring(0, width - 2);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"        StringBuilder toReturn \u003d new StringBuilder();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"        int numberOfBlanks \u003d (width - toDisplay.length()) / 2;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"        toReturn.append(\" \".repeat(Math.max(0, numberOfBlanks)));","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"        toReturn.append(toDisplay);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"        toReturn.append(\" \".repeat(Math.max(0, numberOfBlanks)));","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"        if (numberOfBlanks * 2 + toDisplay.length() \u003c width) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"            int blanksToAppend \u003d width - (numberOfBlanks * 2 + toDisplay.length());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"            toReturn.append(\" \".repeat(Math.max(0, blanksToAppend)));","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"        return toReturn.toString();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"     * Formats a string to be left-aligned within a specified width.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"     * @param toDisplay The string to align.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"     * @param width The width to align within.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"     * @return The formatted string.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"    private static String getDisplayStringLeft(String toDisplay, int width) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        if (toDisplay.length() \u003e width - 2) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"            toDisplay \u003d toDisplay.substring(0, width - 2);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"        StringBuilder toReturn \u003d new StringBuilder(\"|\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"        int numberOfBlanks \u003d width - toDisplay.length() - 1;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"        toReturn.append(\" \" + toDisplay);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"        toReturn.append(\" \".repeat(Math.max(0, numberOfBlanks)));","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"        toReturn.append(\"|\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"flyingapricot"},"content":"        return toReturn.toString();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"     * Generates a header string for table formatting.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"     * @param width The width of the header.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"     * @return The formatted header string.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"    public static String getHeaderString(int width) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"        String headerString \u003d \"+\";","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"        headerString +\u003d \"-\".repeat(width);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"        headerString +\u003d \"+\";","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"flyingapricot"},"content":"        return headerString;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"     * Displays the round name and status.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"     * @param header The formatted header string.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"    private void displayRoundName(String header) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"        System.out.println(header);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"        String winStatus \u003d roundOver \u003d\u003d 1 ? \"YOU WON!\" : roundOver \u003d\u003d -1 ? \"YOU LOST!\" : \"\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"        if (roundOver \u003d\u003d 1 || roundOver \u003d\u003d -1) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"flyingapricot"},"content":"            System.out.println(\"|\" + getDisplayStringCenter(winStatus, screenWidth) + \"|\");","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"        } else {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"flyingapricot"},"content":"            System.out.println(\"|\" + getDisplayStringCenter(roundName, screenWidth) + \"|\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"        System.out.println(header);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /** Displays the round description and the current game status. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"flyingapricot"},"content":"    private void displayRoundDesc() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // Prints round description + score (on left hand side) and Current Table Text (on right","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // hand side)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"        System.out.println(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"                \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"                        + getDisplayStringCenter(roundDescription, screenWidth / 8 * 3)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"                        + \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"flyingapricot"},"content":"                        + getDisplayStringCenter(\"Jokers\", (screenWidth / 8 * 5) - 1)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"                        + \"|\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"flyingapricot"},"content":"     * Displays the Joker Cards On The Game","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"flyingapricot"},"content":"     * @param header The formatted header string.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"flyingapricot"},"content":"    private void displayJokers(String header) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"flyingapricot"},"content":"        // Get the card header for all 5 cards chosen to play","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"flyingapricot"},"content":"        String cardHeaders \u003d (getHeaderString(5) + \"  \").repeat(5);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"        System.out.println(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"                \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"                        + getDisplayStringCenter(\"\", screenWidth / 8 * 3)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"                        + \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"                        + getDisplayStringCenter(cardHeaders, (screenWidth / 8 * 5) - 1)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"                        + \"|\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"flyingapricot"},"content":"        String cardValues \u003d \"\";","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"            cardValues +\u003d \"|\" + getDisplayStringCenter(\"X\", 5) + \"|\" + \"  \";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"flyingapricot"},"content":"        // Printing the card value itself","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"        System.out.println(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"                \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"                        + getDisplayStringCenter(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"                                \"Score at least \" + blindScore, screenWidth / 8 * 3)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"                        + \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"                        + getDisplayStringCenter(cardValues, (screenWidth / 8 * 5) - 1)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"                        + \"|\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"flyingapricot"},"content":"        // Printing the bottom header","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"        System.out.println(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"                \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"                        + getDisplayStringCenter(\"\", screenWidth / 8 * 3)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"                        + \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"                        + getDisplayStringCenter(cardHeaders, (screenWidth / 8 * 5) - 1)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"                        + \"|\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"flyingapricot"},"content":"        // Print end header","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"flyingapricot"},"content":"        System.out.println(header);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /** Displays the round score and the player\u0027s current hand. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"flyingapricot"},"content":"    private void displayRoundScore() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"flyingapricot"},"content":"        // Printing round score (left hand side) and your hand (right hand side)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"        System.out.println(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"                \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"                        + getDisplayStringCenter(\"Round Score: \" + roundScore, screenWidth / 8 * 3)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"                        + \"|\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"                        + getDisplayStringCenter(\"Your Hand: \", (screenWidth / 8 * 5) - 1)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"                        + \"|\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"flyingapricot"},"content":"     * Generates a formatted string representation of the cards.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"flyingapricot"},"content":"     * @param hand The list of cards.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"flyingapricot"},"content":"     * @param start The starting index.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"flyingapricot"},"content":"     * @param end The ending index.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"flyingapricot"},"content":"     * @return The formatted string.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"flyingapricot"},"content":"    private String generateCardValues(List\u003cCard\u003e hand, int start, int end) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"flyingapricot"},"content":"        StringBuilder values \u003d new StringBuilder();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d start; i \u003c end; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"flyingapricot"},"content":"            values.append(\"|\")","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"flyingapricot"},"content":"                    .append(getDisplayStringCenter(hand.get(i).getSimplified(), 5))","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"flyingapricot"},"content":"                    .append(\"|  \");","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"flyingapricot"},"content":"        return values.toString();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"flyingapricot"},"content":"     * Prints a formatted row with left and right-aligned content.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"flyingapricot"},"content":"     * @param leftText The left-aligned text.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"flyingapricot"},"content":"     * @param rightText The right-aligned text.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"flyingapricot"},"content":"    private void printCardRow(String leftText, String rightText) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"flyingapricot"},"content":"        System.out.println(","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"flyingapricot"},"content":"                \"|\"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"flyingapricot"},"content":"                        + getDisplayStringCenter(leftText, screenWidth / 8 * 3)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"flyingapricot"},"content":"                        + \"|\"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"flyingapricot"},"content":"                        + getDisplayStringCenter(rightText, (screenWidth / 8 * 5) - 1)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"                        + \"|\");","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"    /** Displays the game screen on the display */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"flyingapricot"},"content":"        String header \u003d getHeaderString(screenWidth);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"flyingapricot"},"content":"        // Prints the round name","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"flyingapricot"},"content":"        displayRoundName(header);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"flyingapricot"},"content":"        // Displays round description + Hand Chosen To Play","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"flyingapricot"},"content":"        displayRoundDesc();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"flyingapricot"},"content":"        // Displays Jokers","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"flyingapricot"},"content":"        displayJokers(header);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"flyingapricot"},"content":"        displayRoundScore();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"flyingapricot"},"content":"        // Your hand, it can have up to 8 cards, so print 4 on first row, 4 on second row","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"flyingapricot"},"content":"        int firstRowCount \u003d Math.min(4, holdingHand.size());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"flyingapricot"},"content":"        int secondRowCount \u003d Math.max(0, holdingHand.size() - firstRowCount);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"flyingapricot"},"content":"        String firstRowHeader \u003d (getHeaderString(5) + \"  \").repeat(firstRowCount);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"flyingapricot"},"content":"        String firstRowValues \u003d generateCardValues(holdingHand, 0, firstRowCount);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"flyingapricot"},"content":"        printCardRow(\"\", firstRowHeader);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"flyingapricot"},"content":"        printCardRow(\"\", firstRowValues);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"Markneoneo"},"content":"        // display hands and discards info along with second row headers (if any cards left)","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"flyingapricot"},"content":"        String handsAndDiscards \u003d \"Hands: \" + handsLeft + \"  Discards: \" + discardsLeft;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"flyingapricot"},"content":"        String secondRowHeader \u003d (getHeaderString(5) + \"  \").repeat(secondRowCount);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"flyingapricot"},"content":"        printCardRow(handsAndDiscards, secondRowHeader);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"        // display cash info","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"flyingapricot"},"content":"        printCardRow(\"Cash: $ - \", \"\");","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"        // display ante info","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"flyingapricot"},"content":"        printCardRow(\"Ante: X / X\", secondRowHeader);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"flyingapricot"},"content":"        // Generate the values for the second row (if applicable)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"flyingapricot"},"content":"        if (secondRowCount \u003e 0) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"-"},"content":"            String secondRowValues \u003d","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"-"},"content":"                    generateCardValues(holdingHand, firstRowCount, holdingHand.size());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"flyingapricot"},"content":"            printCardRow(\"\", secondRowValues);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"Markneoneo"},"content":"        // display current round info","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"flyingapricot"},"content":"        printCardRow(\"Current Round: X\", secondRowHeader);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"flyingapricot"},"content":"        // Print end header","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"flyingapricot"},"content":"        System.out.println(header);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"flyingapricot"},"content":"     * Updates the display when a change to a game variable occurs in the Round Class.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"flyingapricot"},"content":"     * @param evt The property change event containing the updated value.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"flyingapricot"},"content":"    public void propertyChange(PropertyChangeEvent evt) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"flyingapricot"},"content":"        String propertyName \u003d evt.getPropertyName();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"flyingapricot"},"content":"        Object newValue \u003d evt.getNewValue();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"flyingapricot"},"content":"        // Map for property handlers","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"flyingapricot"},"content":"        Map\u003cString, Consumer\u003cObject\u003e\u003e propertyHandlers \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"flyingapricot"},"content":"        propertyHandlers.put(\"roundName\", value -\u003e roundName \u003d value.toString());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"flyingapricot"},"content":"        propertyHandlers.put(\"remainingPlays\", value -\u003e handsLeft \u003d (Integer) value);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"flyingapricot"},"content":"        propertyHandlers.put(\"remainingDiscards\", value -\u003e discardsLeft \u003d (Integer) value);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"flyingapricot"},"content":"        propertyHandlers.put(\"currentScore\", value -\u003e roundScore \u003d (Integer) value);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"flyingapricot"},"content":"        propertyHandlers.put(\"roundDescription\", value -\u003e roundDescription \u003d value.toString());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"flyingapricot"},"content":"        propertyHandlers.put(\"blindScore\", value -\u003e blindScore \u003d (Integer) value);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"-"},"content":"        propertyHandlers.put(","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"-"},"content":"                \"holdingHand\",","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"-"},"content":"                value -\u003e {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"flyingapricot"},"content":"                    List\u003c?\u003e list \u003d (List\u003c?\u003e) value;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"-"},"content":"                    holdingHand \u003d","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"-"},"content":"                            list.stream()","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"-"},"content":"                                    .filter(","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"-"},"content":"                                            Card.class","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"-"},"content":"                                                    ::isInstance) // Ensures only Card instances are","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"-"},"content":"                                    // collected","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"flyingapricot"},"content":"                                    .map(Card.class::cast) // Safely cast to Card","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"flyingapricot"},"content":"                                    .collect(Collectors.toList());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"flyingapricot"},"content":"                });","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"-"},"content":"        propertyHandlers.put(","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"-"},"content":"                \"roundComplete\",","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"-"},"content":"                value -\u003e {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"flyingapricot"},"content":"                    roundOver \u003d (Integer) value;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"flyingapricot"},"content":"                    if (roundOver !\u003d 0) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"flyingapricot"},"content":"                        commandMap.clear();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"Markneoneo"},"content":"                        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"flyingapricot"},"content":"                        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"flyingapricot"},"content":"                    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"flyingapricot"},"content":"                });","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"flyingapricot"},"content":"        // Execute the appropriate handler if it exists and update its value","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"flyingapricot"},"content":"        propertyHandlers.getOrDefault(propertyName, v -\u003e {}).accept(newValue);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":29,"flyingapricot":258,"-":62}},{"path":"src/main/java/javatro/display/screens/HelpScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * The {@code HelpScreen} class represents a screen displaying the help menu in the javatro","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * application. It provides various help options, including an introduction, rules, how-to-play","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":" * guide, and tips. Users can also return to the main menu from this screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"public class HelpScreen extends Screen {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code HelpScreen} instance and initializes the available help options.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs while setting up the screen","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    public HelpScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        super(\"HELP MENU\");","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        commandMap.add(new HelpIntroOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"        commandMap.add(new HelpRulesOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new HelpHowOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        commandMap.add(new HelpTipsOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Displays the help screen. This method should be overridden to define how the help menu is","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * presented.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {}","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-18","isFullCredit":false}],"authorContributionMap":{"Markneoneo":18,"swethacool":8,"flyingapricot":3,"-":5}},{"path":"src/main/java/javatro/display/screens/PlayScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The {@code PlayScreen} class represents a screen where the user selects cards to play. It extends","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * {@code CardSelectScreen} and allows selecting up to a predefined limit of cards (default is 5).","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * @see CardSelectScreen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public class PlayScreen extends CardSelectScreen {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Constructs a {@code PlayScreen} and sets the selection limit. The user can select up to 5","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * cards to play, and the selection command is initialized.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during initialization.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    public PlayScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        super(\"SELECT CARDS TO PLAY\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Displays the current cards in the user\u0027s holding hand for selection. This method overrides","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * the parent class implementation to provide specific behavior for playing cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        super.displayHoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":12,"flyingapricot":13,"-":6}},{"path":"src/main/java/javatro/display/screens/Screen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.Option;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The {@code Screen} class serves as an abstract base class for all screens in the application. It","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" * defines common behaviors such as displaying options for the user to select and handling commands.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" * Subclasses must implement the {@link #displayScreen()} method to define their specific content.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"public abstract class Screen {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    /** A list of commands associated with this screen. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    protected final List\u003cOption\u003e commandMap \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    /** The title of the options menu displayed on the screen. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    private final String optionsTitle;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /** Fixed width for the options menu display. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    private static final int MENU_WIDTH \u003d 100;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a screen with the specified options title.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     * @param optionsTitle the title of the options menu (cannot be null or empty)","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the options title is null or empty","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    public Screen(String optionsTitle) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        if (optionsTitle \u003d\u003d null || optionsTitle.trim().isEmpty()) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidOptionsTitle();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.optionsTitle \u003d","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"                String.format(","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"                        \"♥️ ♠️ \\uD83C\\uDCCF %s%s%s \\uD83C\\uDCCF ♦️ ♣️\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"                        UI.BOLD, optionsTitle.trim(), UI.END);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Displays the screen content. This method must be implemented by subclasses to define the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * specific behavior and layout of the screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    public abstract void displayScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Displays the available options in a formatted menu style. The menu includes a border, a","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * centered title, and a list of options with descriptions.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    public void displayOptions() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        // Top border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(UI.TOP_LEFT);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(String.valueOf(UI.HORIZONTAL).repeat(MENU_WIDTH - 2));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(UI.TOP_RIGHT);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        // Centered title","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(UI.centerText(optionsTitle, MENU_WIDTH));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        // Middle border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(UI.T_RIGHT);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(String.valueOf(UI.HORIZONTAL).repeat(MENU_WIDTH - 2));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(UI.T_LEFT);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        // display options 《%d》 【%d】 『%d』 「%d」","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c commandMap.size(); i++) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"            String option \u003d","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                    String.format(","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                            \"%s[%d]%s %s%s%s\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                            UI.BOLD,","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                            i + 1,","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"                            UI.END,","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"                            UI.ITALICS,","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                            commandMap.get(i).getDescription(),","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"                            UI.END);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"            System.out.println(UI.centerText(option, MENU_WIDTH));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        // Bottom border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(UI.BOTTOM_LEFT);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(String.valueOf(UI.HORIZONTAL).repeat(MENU_WIDTH - 2));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(UI.BOTTOM_RIGHT);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"     * Returns the number of available options (commands) in this screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"     * @return the number of options available","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    public int getOptionsSize() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        return commandMap.size();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     * Retrieves the command associated with the given index.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"     * @param index the index of the command (0-based)","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"     * @return the command at the specified index","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the index is out of bounds","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"    public Option getCommand(int index) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        if (index \u003c 0 || index \u003e\u003d commandMap.size()) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.indexOutOfBounds(index);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        return commandMap.get(index);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":90,"-":18}},{"path":"src/main/java/javatro/display/screens/StartScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.HelpMenuOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.StartGameOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import java.io.IOException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import java.io.InputStream;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The {@code StartScreen} class represents the initial menu screen of the application. It provides","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":" * options to start a game, access help, or exit the game.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":" * \u003cp\u003eThis screen displays a visually appealing welcome message, including the javatro logo, which","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":" * is loaded from an external file during class initialization.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"public class StartScreen extends Screen {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Variable to hold the javatro logo content. This is used to display a visually appealing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * welcome message. The logo is loaded from an external file during class initialization.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    private static String JAVATRO_LOGO;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    // Static block to initialize the javatro logo from a file","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    static {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try (InputStream inputStream \u003d","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"                StartScreen.class.getResourceAsStream(\"/javatro/display/javatro_logo.txt\")) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"            if (inputStream \u003d\u003d null) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"                throw JavatroException.errorLoadingLogo(\"javatro_logo.txt\");","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"            try (Scanner scanner \u003d new Scanner(inputStream, StandardCharsets.UTF_8)) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"                JAVATRO_LOGO \u003d scanner.useDelimiter(\"\\\\A\").next(); // Read the entire file","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        } catch (IOException | JavatroException e) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"            JAVATRO_LOGO \u003d \"javatro Logo\"; // Fallback in case of error","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"            System.err.println(JavatroException.errorLoadingLogo(\"javatro_logo.txt\").getMessage());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code StartScreen} and initializes available commands.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws JavatroException if the options title is invalid or if there is an error initializing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *     the screen","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    public StartScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        super(\"MAIN MENU\");","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new StartGameOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new HelpMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /** Displays the start screen, including the game logo and available options. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(JAVATRO_LOGO); // display the javatro logo","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":38,"flyingapricot":13,"-":11}},{"path":"src/main/java/javatro/manager/JavatroManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code JavatroManager} class serves as the main controller (manager) of the game,","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * coordinating interactions between the model ({@code JavatroCore}) and the view ({@code display}).","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":" * It listens for property changes and updates the game state accordingly.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeEvent;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Manages the interaction between the game model and the user interface. It listens for user inputs","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":" * and updates the game state dynamically.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"public class JavatroManager implements PropertyChangeListener {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    /** The main view responsible for rendering the user interface. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    private static UI ui;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /** The main model responsible for handling game logic. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    private static JavatroCore jc;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    /** Stores the last recorded user input. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    private static int userInput;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"     * Constructs a {@code JavatroManager} and registers it as an observer to the view.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"     * @param ui The main view of the game.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"     * @param jc The main model of the game.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    public JavatroManager(UI ui, JavatroCore jc) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.ui \u003d ui;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.jc \u003d jc;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        UI.getParser().addPropertyChangeListener(this); // Register as an observer","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"     * Changes the currently displayed screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"     * @param destinationScreen The new screen to be displayed.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    public static void setScreen(Screen destinationScreen) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"        ui.setCurrentScreen(destinationScreen);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"     * Begins the game by initializing the game model and registering necessary observers.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs during game initialization.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    public static void beginGame() throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"        jc.beginGame();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        JavatroCore.currentRound.addPropertyChangeListener(javatro.display.UI.getGameScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"        // Fire property changes here","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        JavatroCore.currentRound.updateRoundVariables();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Handles property change events from the view. If the property change corresponds to user","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * input, it executes the appropriate command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"     * @param evt The property change event.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"    public void propertyChange(PropertyChangeEvent evt) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"        if (evt.getPropertyName().equals(\"userInput\")) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"            // Execute the respective command","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"                UI.getCurrentScreen().getCommand((int) evt.getNewValue() - 1).execute();","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"                try {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"                    ui.setCurrentScreen(UI.getCurrentScreen());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"                } catch (JavatroException ex) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                    throw new RuntimeException(ex);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"                // throw new RuntimeException(e);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":11,"flyingapricot":66,"-":8}},{"path":"src/main/java/javatro/manager/options/CardSelectOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.display.Parser;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.DiscardScreen;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.PlayScreen;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" * The {@code CardSelectOption} class represents a command that allows the player to make a","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" * selection of cards to either play or discard, based on the current game screen.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"public class CardSelectOption implements Option {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    /** The default selection limit for cards. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    public static final int DEFAULT_SELECTION_LIMIT \u003d 5;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    /** The maximum number of cards that can be selected. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    private final int selectionLimit;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /** Constructs a {@code CardSelectOption} with the default selection limit of 5. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    public CardSelectOption() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        this(DEFAULT_SELECTION_LIMIT);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code CardSelectOption} with a specified selection limit.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"     * @param selectionLimit The maximum number of cards that can be selected.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the selection limit is invalid (less than 1).","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    public CardSelectOption(int selectionLimit) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        if (selectionLimit \u003c 1) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidSelectionLimit();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        this.selectionLimit \u003d selectionLimit;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        return \"Select Cards\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"     * Executes the selection command, prompting the player to select cards to either play or","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     * discard. The behavior changes based on the current screen.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during card selection.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e userInput \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"                Parser.getCardInput(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"                        JavatroCore.currentRound.getPlayerHand().size(), selectionLimit);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        if (UI.getCurrentScreen() instanceof PlayScreen) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"            // Select and play the chosen cards","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"            JavatroCore.currentRound.playCards(userInput);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        } else if (UI.getCurrentScreen() instanceof DiscardScreen) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"            // Discard the selected cards","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"            JavatroCore.currentRound.discardCards(userInput);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"        // Return to the game screen after selection","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":71,"-":5}},{"path":"src/main/java/javatro/manager/options/DiscardCardOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * The {@code DiscardCardOption} class represents a command that allows the player to discard","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * selected cards during the game. It updates the game screen to display the card selection","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":" * interface for discarding cards.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class DiscardCardOption implements Option {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Executes the discard cards command, updating the game screen to the \"Select Cards to Discard\"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * interface.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during execution.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        // Update the main screen to show the \"Select Cards to Discard\" screen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getDiscardScreen());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        return \"Discard Cards\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":8,"flyingapricot":22,"-":5}},{"path":"src/main/java/javatro/manager/options/ExitGameOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.display.screens.StartScreen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import java.io.IOException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import java.io.InputStream;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The {@code ExitGameOption} class represents a command that terminates the game. When executed, it","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" * prints a farewell message and exits the application.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"public class ExitGameOption implements Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    private static String END_SCREEN;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        return \"Exit Game\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    // Static block to initialize the End Screen from a file","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    static {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try (InputStream inputStream \u003d","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"                StartScreen.class.getResourceAsStream(\"/javatro/display/end_screen.txt\")) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"            if (inputStream \u003d\u003d null) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"                throw JavatroException.errorLoadingLogo(\"end_screen.txt\");","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"            try (Scanner scanner \u003d new Scanner(inputStream, StandardCharsets.UTF_8)) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"                END_SCREEN \u003d scanner.useDelimiter(\"\\\\A\").next(); // Read the entire file","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        } catch (IOException | JavatroException e) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"            END_SCREEN \u003d \"End Screen\"; // Fallback in case of error","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"            System.err.println(JavatroException.errorLoadingLogo(\"end_screen.txt\").getMessage());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Executes the exit game command, displaying a farewell message and terminating the","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * application.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        // display the end screen from the file","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(END_SCREEN);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        // display the farewell message with borders and ANSI formatting","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        String title \u003d \"♥️ ♠️ 🃏 \" + UI.BOLD + \"GOODBYE\" + UI.END + \" 🃏 ♦️ ♣️\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String[] lines \u003d {UI.RED + \"WE KNOW YOU WILL BE BACK SOON\" + UI.END};","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        UI.printBorderedMessage(title, lines);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        System.exit(0); // Terminate the application","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"Markneoneo":33,"flyingapricot":20,"-":8,"jwyk":1}},{"path":"src/main/java/javatro/manager/options/HelpHowOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * The HelpHowOption class explains how to play javatro. This command is executed when the player","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * requests gameplay instructions.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public class HelpHowOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        return \"How To Play\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /** Executes the command to display instructions on how to play. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        String title \u003d \"♥️ ♠️ 🃏 \" + UI.BOLD + \"How To Play Javatro\" + UI.END + \" 🃏 ♦️ ♣️\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"            \"1. Start a new game with \u0027start\u0027.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            \"2. Draw cards using \u0027draw\u0027.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"            \"3. Play poker hands to attack enemies.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"            \"4. Earn new cards and modify your deck.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"            \"5. Survive as long as possible and improve your strategy.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"            \"Use commands like:\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"            \"   - \u0027attack\u0027  : Play a hand to deal damage.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"            \"   - \u0027defend\u0027  : Use a card to reduce incoming damage.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"            \"   - \u0027exit\u0027    : Quit the game.\"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        UI.printBorderedMessage(title, lines);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":41,"-":3}},{"path":"src/main/java/javatro/manager/options/HelpIntroOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * The HelpIntroOption class provides an introduction to javatro. This command is executed when the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * player requests an introduction.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"public class HelpIntroOption implements Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"        return \"Game Introduction\";","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /** Executes the command to display the introduction message. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        String title \u003d \"♥️ ♠️ 🃏 \" + UI.BOLD + \"Welcome to Javatro\" + UI.END + \" 🃏 ♦️ ♣️\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"            \"Javatro is a text-based roguelike deck-building game inspired by Balatro.\",","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            \"Your goal is to strategically build a deck and progress through challenges.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"            \"Each turn, you\u0027ll play poker-style hands to defeat enemies and earn new cards.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"            \"Think strategically, manage your deck wisely, and see how far you can go!\"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        UI.printBorderedMessage(title, lines);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"Markneoneo":21,"swethacool":15,"flyingapricot":1,"-":2}},{"path":"src/main/java/javatro/manager/options/HelpMenuOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * The HelpMenuOption class handles displaying the help screen in javatro. This command is executed","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * when the player selects the help option.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public class HelpMenuOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        return \"Help Menu\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /** Executes the command to display the help screen. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"Markneoneo":11,"swethacool":14,"-":3}},{"path":"src/main/java/javatro/manager/options/HelpRulesOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * The HelpRulesOption class provides the rules for playing javatro. This command is executed when","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * the player requests game rules.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public class HelpRulesOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"        return \"Game Rules\";","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /** Executes the command to display the rules of the game. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        String title \u003d \"♥️ ♠️ 🃏 \" + UI.BOLD + \"Javatro Rules\" + UI.END + \" 🃏 ♦️ ♣️\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"            \"1. Start with a basic deck of cards.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            \"2. Each turn, draw cards and form poker hands to attack or defend.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"            \"3. Earn new cards after each battle and upgrade your deck.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"            \"4. If your health reaches zero, the run ends—try again with a new strategy!\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"            \"5. Different enemies and challenges appear in each run.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"            \"Remember: Careful deck management is key to survival!\"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        UI.printBorderedMessage(title, lines);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"Markneoneo":23,"swethacool":15,"-":3}},{"path":"src/main/java/javatro/manager/options/HelpTipsOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * The HelpTipsOption class provides gameplay tips for javatro. This command is executed when the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":" * player requests tips for improving their strategy.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public class HelpTipsOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"        return \"Tips and Tricks\";","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /** Executes the command to display gameplay tips. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        String title \u003d \"♥️ ♠️ 🃏 \" + UI.BOLD + \"Pro Tips For Javatro\" + UI.END + \" 🃏 ♦️ ♣️\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"            \"- Focus on building a balanced deck with attack and defense cards.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            \"- Don\u0027t just add every card you find—some cards can weaken your deck.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"            \"- Save strong hands for tougher enemies.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"            \"- Adapt your strategy based on the enemies you encounter.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"            \"- Experiment with different playstyles to find what works best for you.\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"            \"Good luck and have fun!\"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        UI.printBorderedMessage(title, lines);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"Markneoneo":23,"swethacool":15,"-":3}},{"path":"src/main/java/javatro/manager/options/MainMenuOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code MainMenuOption} class represents a command that loads the start screen, allowing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * players to navigate to the main menu.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"/** A command that loads the main menu (start screen) when executed. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class MainMenuOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        return \"Main Menu\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    /** Executes the command to change the screen to the start menu. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getStartScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":10,"flyingapricot":15,"-":4}},{"path":"src/main/java/javatro/manager/options/Option.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"public interface Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"     * Retrieves a description of the command. This method has a default implementation returning an","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * empty string.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"     * @return A string representing the command description.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"    default String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"        return \"\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * Executes the command. Implementing classes must define specific behavior.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs during execution.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    void execute() throws JavatroException;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"flyingapricot":17,"-":3}},{"path":"src/main/java/javatro/manager/options/PlayCardOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * The {@code PlayCardOption} class represents a command that allows the player to select cards to","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * play during the game. It updates the game screen to display the card selection interface for","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * playing cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class PlayCardOption implements Option {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Executes the play cards command, updating the game screen to the \"Select Cards to Play\"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * interface.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during execution.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        // Update the main screen to show the \"Select Cards to Play\" screen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getPlayScreen());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        return \"Play Cards\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":12,"flyingapricot":20,"-":3}},{"path":"src/main/java/javatro/manager/options/ResumeGameOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code ResumeGameOption} class represents a command that allows the player to return to the","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * main game screen after navigating away.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"/** A command that enables players to return to the game screen. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"public class ResumeGameOption implements Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        return \"Return To Game\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the resume game command, updating the game screen to return the player to the main","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * game interface.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs during execution.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        // Update the main screen to show game screen","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":3,"flyingapricot":27,"-":5}},{"path":"src/main/java/javatro/manager/options/StartGameOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code StartGameOption} class represents a command that initializes and starts a new game","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * session by setting the game screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"/** A command that starts the game and loads the game screen. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class StartGameOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        return \"Start Game\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Executes the command to begin the game, restore available commands, and update the screen to","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * display the game interface.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while starting the game.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.beginGame();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        javatro.display.UI.getGameScreen().restoreGameCommands();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        // Update the main screen to show the game screen","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":14,"flyingapricot":17,"-":6}},{"path":"src/main/java/javatro/manager/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":" * The {@code manager} package contains the core game management and command execution logic. It","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * follows the Command design pattern to handle various user actions and game state changes.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis package is responsible for managing game flow, handling user commands, and coordinating","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * between the game model and the user interface.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eClasses in this package:\u003c/h2\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.Command} - Interface defining executable game commands.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.DiscardCardsCommand} - Command for discarding selected","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" *       cards.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.ExitGameCommand} - Command for terminating the game.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.JavatroManager} - Central controller managing game state and","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":" *       user input.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.LoadGameScreenCommand} - Command for starting the game and","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":" *       loading the game screen.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.LoadOptionsScreenCommand} - Command for displaying the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" *       options menu.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.LoadStartScreenCommand} - Command for displaying the main","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":" *       menu.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.MakeSelectionCommand} - Command for selecting cards to play","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":" *       or discard.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.PlayCardsCommand} - Command for playing selected cards.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.ResumeGameCommand} - Command for returning to the main game","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":" *       screen.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager;","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":22,"-":8}},{"path":"src/test/java/javatro/core/DeckTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * This class contains unit tests for the {@link Deck} class. It tests the initialisation and","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * drawing of cards, ensuring the deck contains the proper number of cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class DeckTest {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    private static Deck deck;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"    /** Initialize a new deck for each test. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    void init() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        deck \u003d new Deck();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"     * Test that each Deck initialised has 52 cards, and drawing 1 card gives the correct number of","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"     * cards remaining.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    void testDeck() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        int cardsRemaining \u003d deck.getRemainingCards();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(52, cardsRemaining);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        Card drawOne \u003d deck.draw();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(51, deck.getRemainingCards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":33}},{"path":"src/test/java/javatro/core/HoldingHandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" * This class contains unit tests for the {@link HoldingHandTest} class. It tests the various","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":" * methods of drawing, discarding and adding cards to ensure the correct cards are displayed and","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" * played hand is correct.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"public class HoldingHandTest {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    private static Deck deck;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    /** Initialize a new deck for each test. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    void init() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        deck \u003d new Deck();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    /** Test that HoldingHand can add cards, draw and discard cards. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    void testHoldingHand() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        int cardsRemaining \u003d deck.getRemainingCards();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(44, cardsRemaining);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        holdingHand.discard(List.of(1, 3, 5), deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(41, deck.getRemainingCards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e playedHand \u003d holdingHand.play(List.of(1, 4, 5), deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(3, playedHand.size());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(38, deck.getRemainingCards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    /** Test that HoldingHand can return the hand held. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    void testGetHoldingHand() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        Card cardOne \u003d new Card(ACE, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        Card cardTwo \u003d new Card(TWO, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        Card cardThree \u003d new Card(THREE, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        Card cardFour \u003d new Card(FOUR, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e cards \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"                new ArrayList\u003cCard\u003e() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"                    {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"                        add(cardOne);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"                        add(cardTwo);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"                        add(cardThree);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"                    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"                };","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(card);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d holdingHand.getHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        assertArrayEquals(new List[] {cards}, new List[] {hand});","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    /***","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"     * Test that JavatroException is thrown when an illegal card selection is played.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"    void testIllegalPlay() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e playedHand \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(-1);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.play(playedHand, deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(\"Invalid index in cards to be played: -1\", e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(500);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.play(playedHand, deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(\"Invalid index in cards to be played: 500\", e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"            playedHand.add(i);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.play(playedHand, deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(\"Number of cards played (8) exceeds maximum allowed. (5)\", e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"    /***","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"     * Test that JavatroException is thrown when an illegal card selection is discarded.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"    void testIllegalDiscard() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e playedHand \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(-1);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.discard(playedHand, deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(\"Invalid index in cards to be discarded: -1\", e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(500);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.discard(playedHand, deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(\"Invalid index in cards to be discarded: 500\", e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"            playedHand.add(i);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.discard(playedHand, deck);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"                    \"Number of cards discarded (8) exceeds maximum allowed. (5)\", e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"    /***","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"     * Test that JavatroException is thrown when a card cannot be added properly.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"    void testIllegalAdd() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"        Card cardToAdd \u003d new Card(ACE, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        assertThrowsExactly(JavatroException.class, () -\u003e holdingHand.add(cardToAdd));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":173}},{"path":"src/test/java/javatro/core/RoundTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"public class RoundTest {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    private static final String RED \u003d \"\\033[31m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    private static final String END \u003d \"\\033[0m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String INVALIDPLAYEDHANDERROR \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"            RED + \"A poker hand must contain between 1 and 5 cards.\" + END;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String INVALIDPLAYSPERROUND \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"            RED + \"Number of plays per round must be greater than 0.\" + END;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALIDBLINDSCORE \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"            RED + \"Blind score must be greater than or equal to 0.\" + END;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    private static final String INVALIDDECK \u003d RED + \"Deck cannot be null.\" + END;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    private static final String INVALIDPLAYSREMAINING \u003d RED + \"No plays remaining.\" + END;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private void assertRoundInitialization(int blindScore, int remainingPlays)","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(blindScore, remainingPlays, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(blindScore, round.getBlindScore());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(remainingPlays, round.getRemainingPlays());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, round.getCurrentScore());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(4, round.getRemainingDiscards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        assertFalse(round.isRoundOver());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private void assertRoundInitializationFailure(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"            int blindScore, int remainingPlays, Deck deck, String expectedMessage) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"            new Round(blindScore, remainingPlays, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(expectedMessage, e.getMessage());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private void assertRoundOverAfterPlays(","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"            int blindScore,","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"            int totalPlays,","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"            int playsToMake,","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"            boolean expectedIsOver,","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"            boolean expectedIsWon)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(blindScore, totalPlays, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c playsToMake; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(expectedIsOver, round.isRoundOver());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"        if (expectedIsWon) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(expectedIsWon, round.isWon());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private void assertPlayCardsFails(","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"            int blindScore, int remainingPlays, int playsToMake, String expectedErrorMessage)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"            Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"            Round round \u003d new Round(blindScore, remainingPlays, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"            // Make the specified number of valid plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"            for (int i \u003d 0; i \u003c playsToMake; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"                round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"            }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"            // Attempt one more play which should fail","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(expectedErrorMessage, e.getMessage());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private void assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"            int blindScore,","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"            List\u003cInteger\u003e cardIndices,","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"            String expectedErrorMessage)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(blindScore, remainingPlays, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(cardIndices);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(expectedErrorMessage, e.getMessage());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"    private void assertRoundNotOver(int blindScore, int remainingPlays, int playsToMake)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(blindScore, remainingPlays, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c playsToMake; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(false, round.isRoundOver());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(false, round.isWon());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"    public void round_correctInitialization_success() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(100, 3);","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(200, 5);","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(300, 7);","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(300, 7);","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(0, 1);","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"    public void round_incorrectInitializatioin() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(100, 0, new Deck(), INVALIDPLAYSPERROUND);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(-100, 3, new Deck(), INVALIDBLINDSCORE);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jwyk"},"content":"        assertRoundInitializationFailure(100, 3, null, INVALIDDECK);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(-100, 0, new Deck(), INVALIDBLINDSCORE);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(-100, 3, null, INVALIDBLINDSCORE);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(100, 0, null, INVALIDPLAYSPERROUND);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(-100, 0, null, INVALIDBLINDSCORE);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_roundNotOver() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"        // Test with regular blind score and plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"        assertRoundNotOver(100, 3, 1);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"K-J-Q"},"content":"        // Test with high blind score","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"        assertRoundNotOver(1000, 3, 1);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"K-J-Q"},"content":"        // Test with many remaining plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"        assertRoundNotOver(100, 3000, 5);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_roundOver() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"        // Round is over after using all plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOverAfterPlays(99999, 3, 3, true, false);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOverAfterPlays(99999, 5, 5, true, false);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOverAfterPlays(99999, 8, 8, true, false);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"        // Round is over and won when blind score is 0","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOverAfterPlays(0, 1, 1, true, true);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_tooManyPlays() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"K-J-Q"},"content":"        // Test with 3 plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"jwyk"},"content":"        assertPlayCardsFails(100, 3, 3, INVALIDPLAYSREMAINING);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"K-J-Q"},"content":"        // Test with 5 plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"jwyk"},"content":"        assertPlayCardsFails(100, 2, 2, INVALIDPLAYSREMAINING);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"K-J-Q"},"content":"        // Test with 0 plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"jwyk"},"content":"        assertPlayCardsFails(100, 0, 0, INVALIDPLAYSPERROUND);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_invalidHandSize() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(100, 3, List.of(0, 1, 2, 3, 4, 5), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"                100, 3, List.of(0, 1, 2, 3, 4, 5, 6), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"                100, 3, List.of(0, 1, 2, 3, 4, 5, 6, 7), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"K-J-Q"},"content":"        // Test with 0 cards","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(100, 3, List.of(), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"K-J-Q"},"content":"    public void round_discardCards_success() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(100, 3, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"K-J-Q"},"content":"        // Initial state","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(4, round.getRemainingDiscards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"K-J-Q"},"content":"        int initialHandSize \u003d round.getPlayerHand().size();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"K-J-Q"},"content":"        // Discard 2 cards","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0, 1));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"K-J-Q"},"content":"        // Check state after discard","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"                initialHandSize, round.getPlayerHand().size()); // Hand size should remain the same","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"K-J-Q"},"content":"    public void round_discardCards_tooManyDiscards() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(100, 3, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"        // Use all 4 discards","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"        // Fifth discard should fail","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"K-J-Q"},"content":"            round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"K-J-Q"},"content":"            fail(\"Should have thrown an exception for too many discards\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(\"No remaining discards available\", e.getMessage());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"K-J-Q"},"content":"    public void round_emptyDiscardList() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(100, 3, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"K-J-Q"},"content":"        // Initial state","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(4, round.getRemainingDiscards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"K-J-Q"},"content":"        int initialHandSize \u003d round.getPlayerHand().size();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"K-J-Q"},"content":"        // Discard 0 cards","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"K-J-Q"},"content":"        // Should still use a discard","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(initialHandSize, round.getPlayerHand().size());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"K-J-Q"},"content":"    public void round_setNameAndDescription() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(100, 3, deck, \"\", \"\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"K-J-Q"},"content":"        // Set new values","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"K-J-Q"},"content":"        round.setRoundName(\"New Round\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"K-J-Q"},"content":"        round.setRoundDescription(\"New Description\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"K-J-Q"},"content":"        // Check values were updated","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(\"New Round\", round.getRoundName());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(\"New Description\", round.getRoundDescription());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"Markneoneo":11,"K-J-Q":183,"-":41,"jwyk":14}},{"path":"src/test/java/javatro/core/handResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.EIGHT;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FIVE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.SEVEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.SIX;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":" * This class contains unit tests for the {@link HandResult} class. It tests various poker hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":" * evaluations to ensure correct identification of hand types.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"class HandResultTest {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Tests that a straight flush is correctly identified. A straight flush is a hand that contains","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * five cards of sequential rank, all the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    void testStraightFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Tests that a hand with mixed suits is not identified as a straight flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * identified as a straight instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"    void testStraightFlushFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Tests that a hand with cards not in sequence is not identified as a straight flush. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * should be identified as a flush instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"    void testStraightFlushFalseNotInSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Tests that a royal flush is correctly identified. A royal flush is a hand that contains the","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Ace, King, Queen, Jack, and Ten of the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"    void testRoyalFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Tests that a hand with an Ace as a low card is not identified as a royal flush. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * should be identified as a straight flush instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"    void testRoyalFlushFalseAceLow() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"                        new Card(THREE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FOUR, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Tests that a flush is correctly identified. A flush is a hand that contains five cards of the","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * same suit, not in sequence.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jwyk"},"content":"    void testFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Tests that a hand with mixed suits is not identified as a flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jwyk"},"content":"    void testFlushFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Tests that a hand with less than five cards is not identified as a flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"jwyk"},"content":"    void testFlushFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Tests that a high card is correctly identified. A high card is a hand that does not fall into","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * any other category.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"jwyk"},"content":"    void testHighCardTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d List.of(new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Tests that a straight is correctly identified. A straight is a hand that contains five cards","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * of sequential rank, not all the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"jwyk"},"content":"    void testStraightTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * Tests that a hand with cards not in sequence is not identified as a straight. The hand should","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * be identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"jwyk"},"content":"    void testStraightFalseNotInSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"     * Tests that a hand with mixed sequence is not identified as a straight. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"jwyk"},"content":"    void testStraightFalseMixedSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * Tests that a hand with less than five cards is not identified as a straight. The hand should","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * be identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"jwyk"},"content":"    void testStraightFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"     * Tests that a full house is correctly identified. A full house is a hand that contains three","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"     * cards of one rank and two cards of another rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"jwyk"},"content":"    void testFullHouseTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"     * Tests that a hand with two pairs is not identified as a full house. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"     * identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"jwyk"},"content":"    void testFullHouseFalseTwoPair() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"-"},"content":"     * Tests that a hand with less than five cards is not identified as a full house. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"-"},"content":"     * should be identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"jwyk"},"content":"    void testFullHouseFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"-"},"content":"     * Tests that a hand with three of a kind is not identified as a full house. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"-"},"content":"     * identified as three of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"jwyk"},"content":"    void testFullHouseFalseThreeOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"-"},"content":"     * Tests that three of a kind is correctly identified. Three of a kind is a hand that contains","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"-"},"content":"     * three cards of one rank and two cards of two different ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"jwyk"},"content":"    void testThreeOfAKindTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"-"},"content":"    /** Tests that three of a kind is correctly identified with only three cards. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"jwyk"},"content":"    void testThreeOfAKindTrue3Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"-"},"content":"                List.of(new Card(TEN, SPADES), new Card(TEN, DIAMONDS), new Card(TEN, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"-"},"content":"     * Tests that a full house is not identified as three of a kind. The hand should be identified","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"-"},"content":"     * as a full house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"jwyk"},"content":"    void testThreeOfAKindFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"-"},"content":"     * Tests that four of a kind is correctly identified with five cards. Four of a kind is a hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"-"},"content":"     * that contains four cards of one rank and one card of another rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"jwyk"},"content":"    void testFourOfAKindTrue5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"-"},"content":"    /** Tests that four of a kind is correctly identified with four cards. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"jwyk"},"content":"    void testFourOfAKindTrue4Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"-"},"content":"     * Tests that a pair is correctly identified with five cards. A pair is a hand that contains two","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"-"},"content":"     * cards of one rank and three cards of three different ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"jwyk"},"content":"    void testPairTrue5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"-"},"content":"     * Tests that a hand with two pairs is not identified as a single pair. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"-"},"content":"     * identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"jwyk"},"content":"    void testPairFalseTwoPair() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"-"},"content":"    /** Tests that a pair is correctly identified with two cards. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"jwyk"},"content":"    void testPairTrue2Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d List.of(new Card(EIGHT, SPADES), new Card(EIGHT, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"-"},"content":"     * Tests that a full house is not identified as a pair. The hand should be identified as a full","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"-"},"content":"     * house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"jwyk"},"content":"    void testPairFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"-"},"content":"     * Tests that four of a kind is not identified as a pair. The hand should be identified as four","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"-"},"content":"     * of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"jwyk"},"content":"    void testPairFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"-"},"content":"     * Tests that two pairs are correctly identified. Two pairs is a hand that contains two cards of","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"-"},"content":"     * one rank, two cards of another rank, and one card of a third rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"jwyk"},"content":"    void testTwoPairTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"-"},"content":"     * Tests that a full house is not identified as two pairs. The hand should be identified as a","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"-"},"content":"     * full house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"jwyk"},"content":"    void testTwoPairFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":502,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":503,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":504,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":505,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":506,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":507,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":508,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":509,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":510,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":511,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":512,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":513,"author":{"gitId":"-"},"content":"     * Tests that four of a kind is not identified as two pairs. The hand should be identified as","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":514,"author":{"gitId":"-"},"content":"     * four of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":515,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":516,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":517,"author":{"gitId":"jwyk"},"content":"    void testTwoPairFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":518,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":519,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":520,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":521,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":522,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":523,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":524,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":525,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":526,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":527,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":528,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":529,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-06","isFullCredit":false}],"authorContributionMap":{"Markneoneo":383,"-":116,"jwyk":30}},{"path":"src/test/java/javatro/display/screens/ScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"// import javatro.display.screens.Screen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"class ScreenTest {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"    // Template test, will update ltr","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    void testDisplayOptions() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"        assertTrue(true);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"        //        Screen screen \u003d new Screen(\"Test Menu\", 30, \u0027*\u0027) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        //            @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"        //            public void displayScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        //                // Do nothing for testing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        //            }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        //        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        //        screen.commandMap.add(new Option(\"Option 1\", () -\u003e {}));","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        //        screen.commandMap.add(new Option(\"Option 2\", () -\u003e {}));","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        //","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        //        // Redirect System.out to capture output","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        //        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        //        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        //","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        //        screen.displayOptions();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        //","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        //        String expectedOutput \u003d","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        //                \"******************************\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        //                        \"*         Test Menu          *\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        //                        \"******************************\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        //                        \"*  [1] Option 1\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        //                        \"*  [2] Option 2\\n\" +","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        //                        \"******************************\\n\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        //        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":36,"-":2,"jwyk":1}}]

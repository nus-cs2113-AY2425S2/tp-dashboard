[{"path":".github/workflows/FormatLintTestBuild.yml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"name: Auto Java Formatter","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"on: push","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"permissions:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"  contents: write","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"jobs:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"  format:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"    if: github.actor !\u003d \u0027Auto Formatter\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"    name: Auto Java Formatter","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout code","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"      - name: Download google-java-format","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"          wget https://github.com/google/google-java-format/releases/download/v1.15.0/google-java-format-1.15.0-all-deps.jar -O /tmp/google-java-format.jar","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"      - name: Fix Java formatting with google-java-format","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"          java --add-exports jdk.compiler/com.sun.tools.javac.parser\u003dALL-UNNAMED -jar /tmp/google-java-format.jar -a --replace $(find . -name \"*.java\")","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"      - name: Commit formatted code","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"          git config --global user.name \"Auto Formatter\"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"          git config --global user.email \"auto_formatter@gmail.com\"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"          # Check if there are any changes","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"          if [[ -n \"$(git status --porcelain)\" ]]; then","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"            git add .","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"            git commit -m \"Apply google-java-format to Java files\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"            git push","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"            echo \"CHANGES_PUSHED\u003dtrue\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"          else","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"            echo \"No formatting changes detected.\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"            echo \"CHANGES_PUSHED\u003dfalse\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"          fi","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"        env:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"  lint:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    name: Lint Code Base","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    needs: format","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    if: always() ","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"      - name: Lint Code Base","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"        uses: github/super-linter@v4","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"        env:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"          RUN-LOCAL: false","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"          LINTER_RULES_PATH: config/checkstyle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"          JAVA_FILE_NAME: ../../config/checkstyle/checkstyle.xml","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"          VALIDATE_ALL_CODEBASE: true","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"          VALIDATE_JAVA: true","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"  test:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"    name: Run Tests with Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"    needs: lint","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"      - name: Grant execute permission for Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"        run: chmod +x gradlew","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"      - name: Run Gradle Tests","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        run: ./gradlew test","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"  build:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"    name: Build \u0026 Upload JAR","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"    needs: test","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"      - name: Grant execute permission for Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"        run: chmod +x gradlew","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"      - name: Build JAR without Checkstyle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"        run: ./gradlew build -x checkstyleMain -x checkstyleTest","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"      - name: Find JAR File","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"flyingapricot"},"content":"          JAR_PATH\u003d$(find build/libs -name \"*.jar\" | head -n 1)","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"          echo \"JAR_PATH\u003d$JAR_PATH\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"flyingapricot"},"content":"      - name: Upload JAR as an Artifact","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/upload-artifact@v4","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"flyingapricot"},"content":"          name: javatro-jar","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"flyingapricot"},"content":"          path: ${{ env.JAR_PATH }}","lastModifiedDate":"2025-03-02","isFullCredit":false}],"authorContributionMap":{"flyingapricot":153}},{"path":".github/workflows/gradle.yml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"name: Java CI","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"on:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"  workflow_run:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"    workflows: [\"Lint Code Basee\"]","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"    types:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"      - completed","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"jobs:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"  build:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"    strategy:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"      matrix:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"        platform: [ubuntu-latest, macos-latest, windows-latest]","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    runs-on: ${{ matrix.platform }}","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"    steps:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"      - name: Set up repository","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        uses: actions/checkout@master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"      - name: Set up repository","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"        uses: actions/checkout@master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"        with:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"          ref: master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"      - name: Merge to master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        run: git checkout --progress --force ${{ github.sha }}","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"      - name: Validate Gradle Wrapper","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        uses: gradle/wrapper-validation-action@v1","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        with:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"          java-package: jdk+fx","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"      - name: Build and check with Gradle","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        run: ./gradlew check","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (*NIX)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if: runner.os \u003d\u003d \u0027Linux\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"        run: ./runtest.sh","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (MacOS)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if: always() \u0026\u0026 runner.os \u003d\u003d \u0027macOS\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        run: ./runtest.sh","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (Windows)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if: always() \u0026\u0026 runner.os \u003d\u003d \u0027Windows\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"        shell: cmd","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"        run: runtest.bat","lastModifiedDate":"2020-05-24","isFullCredit":false}],"authorContributionMap":{"flyingapricot":5,"-":49}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"# Javatro - CLI Roguelike Deck-Building Game [![Super-Linter](https://github.com/AY2425S2-CS2113-W13-1/tp/actions/workflows/FormatLintTestBuild.yml/badge.svg)](https://github.com/marketplace/actions/super-linter)","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Overview","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"Javatro is a text-based roguelike deck-building game designed for those who love strategic gameplay without the need for graphical interfaces. Inspired by the game *Balatro*, it combines elements of poker and roguelike mechanics to create a deeply replayable, strategic experience that can be enjoyed through a simple command-line interface (CLI).","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"- Deck-Building: Build and customize your deck of cards, each with unique effects and abilities.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"- Turn-Based Combat: Engage in strategic, turn-based combat, making every move count.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"- Replayability: With random encounters, different challenges, and evolving strategies, no two runs are ever the same.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"- Minimalist Design: A lightweight, no-graphics interface focuses on depth and gameplay rather than visual aesthetics.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"- Cross-Platform: Works seamlessly on various operating systems, including Windows, macOS, and Linux.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Installation","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Prerequisites","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"- Java 11 or higher","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"- Command-line interface (CLI) access","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"### Steps","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Clone the repository:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"      git clone https://github.com/yourusername/javatro.git","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"   cd javatro","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"2. Compile and run the game:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"      javac Javatro.java","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"   java Javatro","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"3. Enjoy the game!","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"## Gameplay","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Objective","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"The goal of Javatro is to progress through a series of challenging encounters by strategically building and managing your deck of cards. Each card has unique effects that can be used during combat to defeat enemies, gain resources, and navigate different challenges.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"### How to Play","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Start a New Game: Upon starting the game, you\u0027ll be prompted to create a deck and begin your journey.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"2. Turn-Based Combat: During combat, you\u0027ll choose cards from your deck to perform actions like attacking, defending, or gaining buffs.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"3. Card Management: As you progress, you\u0027ll acquire new cards that can be added to your deck, allowing you to tailor your strategy.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"4. Roguelike Elements: Each run is procedurally generated with different events, enemies, and challenges, providing endless replayability.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"### Commands","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"- `start`: Start a new game.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"- `draw`: Draw a card from your deck.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"- `attack`: Attack an enemy using a card\u0027s effect.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"- `defend`: Defend against an enemy\u0027s attack.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"- `exit`: Quit the game.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"### Card Types","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"- Attack Cards: Deal damage to enemies.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"- Defend Cards: Block or reduce incoming damage.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"- Special Cards: Provide unique abilities like healing, buffs, or drawing extra cards.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"## Target Audience","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"- Card Game Enthusiasts: Players who enjoy the depth of card games and strategic decision-making.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"- Roguelike Fans: Those who love procedural generation and the challenge of each new run.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"- Tech-Savvy Players: Individuals comfortable with command-line interfaces and minimalist gameplay.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"- Cross-Platform Gamers: Users who want a consistent gaming experience across various platforms.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"## Contributing","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"We welcome contributions to the development of Javatro! If you\u0027d like to contribute, please follow these steps:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Fork the repository.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"2. Create a new branch for your changes.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"3. Make your changes and commit them with descriptive messages.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"4. Push your changes and create a pull request.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"## License","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"Javatro is licensed under the MIT License.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Contact","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"For more information or support, please contact us at:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"- Email: support@javatrogame.com","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"- GitHub Repository: https://github.com/yourusername/javatro","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"Special thanks to the creators of *Balatro*, whose game inspired the design and mechanics of Javatro.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"Enjoy the game, and may your strategic decisions lead you to victory!","lastModifiedDate":"2025-02-19","isFullCredit":false}],"authorContributionMap":{"flyingapricot":2,"-":97}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    mainClass.set(\"Javatro.Javatro\")","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    archiveBaseName.set(\"Javatro\")","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"-":44}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for the coding standard at","lastModifiedDate":"2022-05-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://se-education.org/guides/conventions/java/basic.html","lastModifiedDate":"2022-05-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        \u003cproperty name\u003d\"file\" value\u003d\"/github/workspace/config/checkstyle/suppressions.xml\"/\u003e","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        IMPORT CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"        An import statement is redundant if:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"          * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for unused import statements.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"        An import statement is unused if:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"          It\u0027s not referenced in the file.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"        NAMING CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"            \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"        LENGTH and CODING CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"          Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"          C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"            the same line. e.g., the following example is fine:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"              } else","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"            \u003c!-- This next example is not fine:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"              }","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"              else","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"            \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"            if (true) return 1; // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"            if (true) { return 1; } // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"            else if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"              return 1; // else if should always be multi line","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"            if (true)","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"              return 1; // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"            \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"            some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"        ORDER CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"          1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"          2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"          3. Constructors","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"          4. Methods","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"-"},"content":"        \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that default is after all cases in a switch statement --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"DefaultComesLast\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"                 8.4.3.  The prescribed order is:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"                 public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"                 synchronized, native, strictfp","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"              --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"-"},"content":"        WHITESPACE CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"throwsIndent\" value\u003d\"8\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NoWhitespaceBeforeCaseDefaultColon\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"-"},"content":"        JAVADOC CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all block-tags are ordered correctly. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that Javadoc block tags appear only at the beginning of the line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocBlockTagLocation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all Javadoc comments start from the second line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocContentLocationCheck\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each line in Javadoc has leading asterisks. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingLeadingAsterisk\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each non-empty line in Javadoc has whitespace after leading asterisk. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingWhitespaceAfterAsterisk\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that for block tags, indentation of continuation lines is at least 4 spaces. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocTagContinuationIndentation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every class, enumeration and interface. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every method (excluding getters, setters and constructors). --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"accessModifiers\" value\u003d\"public\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false}],"authorContributionMap":{"flyingapricot":1,"-":286}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jian Quan | [Github](https://github.com/K-J-Q/) | [Portfolio](docs/team/jianquan.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"![](https://nus.instructure.com/images/thumbnails/1889759/an0Mp6dUc8X7JQSsTru3w37v24OKL2CvjasETO58) | Neeraj Kumbar | [Github](https://github.com/flyingapricot) | [Portfolio](docs/team/neerajkumbar.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"![gumball.jpg](https://encrypted-tbn0.gstatic.com/images?q\u003dtbn:ANd9GcRgZ7j0HTP8PmUJFy4_7VREGM8F625LVsfXXQ\u0026s) | Mark Neo Qi Hao | [Github](https://github.com/Markneoneo) | [Portfolio](docs/team/Markneoqihao.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"![](https://avatars.githubusercontent.com/u/63852595?v\u003d4)| John Woo Yi Kai | [Github](https://github.com/jwyk) | [Portfolio](docs/team/johnwooyikai.md)","lastModifiedDate":"2025-03-05","isFullCredit":false}],"authorContributionMap":{"Markneoneo":1,"flyingapricot":1,"K-J-Q":1,"-":4,"jwyk":1}},{"path":"src/main/java/Javatro/Card.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package Javatro;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a playing card with a rank and a suit. Each card has a rank (e.g., ACE, KING, QUEEN)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":" * and a suit (e.g., HEARTS, SPADES). The rank also determines the chip value of the card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"public record Card(Rank rank, Suit suit) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /** Enum representing the rank of a card, along with its symbol and chip value. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"    public enum Rank {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"        TWO(\"2\", 2),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"        THREE(\"3\", 3),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"        FOUR(\"4\", 4),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"        FIVE(\"5\", 5),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"        SIX(\"6\", 6),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        SEVEN(\"7\", 7),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"        EIGHT(\"8\", 8),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        NINE(\"9\", 9),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        TEN(\"10\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        JACK(\"J\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        QUEEN(\"Q\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        KING(\"K\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        ACE(\"A\", 11);","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        private final String symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        private final int chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"         * Constructs a rank with the given symbol and chip value.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"         * @param symbol The symbol representing the rank (e.g., \"A\" for ACE).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"         * @param chips The chip value associated with the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        Rank(String symbol, int chips) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"            this.symbol \u003d symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"            this.chips \u003d chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"         * Returns the symbol of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"         * @return The symbol of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        public String getSymbol() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"            return symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"         * Returns the chip value of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"         * @return The chip value of the rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        public int getChips() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"            return chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /** Enum representing the suit of a card. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    public enum Suit {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"        HEARTS(\"Hearts\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"        CLUBS(\"Clubs\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"        SPADES(\"Spades\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        DIAMONDS(\"Diamonds\");","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        private final String name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"         * Constructs a suit with the given name.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"         * @param name The name of the suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        Suit(String name) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"            this.name \u003d name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"         * Returns the name of the suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"         * @return The name of the suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        public String getName() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"            return name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"     * Returns the chip value of the card based on its rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"     * @return The chip value of the card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    public int getChips() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        return rank.getChips();","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"    public String toString() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        return String.format(\"%s of %s\", rank.getSymbol(), suit.getName());","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":91,"-":8}},{"path":"src/main/java/Javatro/Deck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package Javatro;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import java.util.Collections;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"/*","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":" * Holds all the free cards the player has","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":" * Contains an ArrayList of type Card: with 0 being the top of the deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":" * and ArrayList.size() being the bottom","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"public class Deck {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    private static ArrayList\u003cCard\u003e deck;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"     * Initialize the deck with cards that the player owns If no new cards owned or a new game has","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"     * started, initializes a new deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    public Deck() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        deck \u003d populateNewDeck();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    /** Draws and returns a card from the top of the deck. */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    public Card draw() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        return deck.remove(0);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    /** Returns an integer containing the cards left in the deck */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    public int getRemainingCards() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"        return deck.size();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"     * Initialize a new shuffled 52 card deck for a new game Consists of the standard Poker Deck: 13","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"     * Cards of the 4 Suits","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateNewDeck() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"        for (Card.Rank rank : Card.Rank.values()) {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"            for (Card.Suit suit : Card.Suit.values()) {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"                newDeck.add(new Card(rank, suit));","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(newDeck);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"jwyk":46}},{"path":"src/main/java/Javatro/HandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package Javatro;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.ACE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.FIVE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.FOUR;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.JACK;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.KING;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.TEN;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.THREE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.TWO;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static Javatro.PokerHand.HandType.FLUSH;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.PokerHand.HandType.FOUR_OF_A_KIND;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.PokerHand.HandType.FULL_HOUSE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static Javatro.PokerHand.HandType.HIGH_CARD;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static Javatro.PokerHand.HandType.PAIR;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static Javatro.PokerHand.HandType.ROYAL_FLUSH;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.PokerHand.HandType.STRAIGHT;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static Javatro.PokerHand.HandType.STRAIGHT_FLUSH;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.PokerHand.HandType.THREE_OF_A_KIND;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.PokerHand.HandType.TWO_PAIR;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import java.util.HashMap;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import java.util.Map;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":" * The `HandResult` class evaluates a poker hand based on the given cards. It supports hands with 1","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":" * to 5 cards and determines the best possible poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"public class HandResult {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"     * Evaluates the poker hand based on the given list of cards.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     * @param cards A list of cards to evaluate. Must contain between 1 and 5 cards.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     * @return A `PokerHand` object representing the evaluated hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     * @throws IllegalArgumentException If the input is null or contains fewer than 1 card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    public static PokerHand evaluateHand(List\u003cCard\u003e cards) throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        if (cards \u003d\u003d null || cards.isEmpty() || cards.size() \u003e 5) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidPlayedHand();","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Counts occurrences of each rank (e.g., {\"A\":1, \"K\":1, \"Q\":1, \"J\":1, \"10\":1} for a Royal","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Flush).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cCard.Rank, Integer\u003e rankCount \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        // Counts occurrences of each suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cCard.Suit, Integer\u003e suitCount \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        // card.rank() retrieves the rank of the card (e.g., Rank.ACE, Rank.KING, Rank.TEN, etc.).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        // rankCount.getOrDefault(card.rank(), 0) checks if the rank is already in the map:","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        //   - If yes, it gets the current count.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        //   - If not, it returns 0 (default value).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        // +1 increments the count for that rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        // put() updates the rank count in the map.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"            rankCount.put(card.rank(), rankCount.getOrDefault(card.rank(), 0) + 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"            suitCount.put(card.suit(), suitCount.getOrDefault(card.suit(), 0) + 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        boolean isFlush \u003d suitCount.containsValue(5); // All cards have the same suit","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        boolean isStraight \u003d isStraight(rankCount); // Cards form a consecutive sequence","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        boolean isRoyal \u003d isRoyal(rankCount); // Special case: A, K, Q, J, 10","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        // Determine the best poker hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        if (cards.size() \u003d\u003d 1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(HIGH_CARD); // Single card is always a high card","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"        } else {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"            return evaluateMultiCardHand(rankCount, isFlush, isStraight, isRoyal);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     * Evaluates poker hands with 2 to 5 cards using a priority-based approach.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"     * @param isFlush Whether the hand is a flush.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"     * @param isStraight Whether the hand is a straight.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"     * @param isRoyal Whether the hand is a royal flush.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"     * @return A `HandResult` object representing the evaluated hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private static PokerHand evaluateMultiCardHand(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"            Map\u003cCard.Rank, Integer\u003e rankCount,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"            boolean isFlush,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"            boolean isStraight,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"            boolean isRoyal) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        // Check for the strongest hands first","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        if (isRoyal \u0026\u0026 isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(ROYAL_FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"        } else if (isStraight \u0026\u0026 isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(STRAIGHT_FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(4)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FOUR_OF_A_KIND);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(3) \u0026\u0026 rankCount.containsValue(2)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FULL_HOUSE);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        } else if (isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        } else if (isStraight) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(STRAIGHT);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(3)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(THREE_OF_A_KIND);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.values().stream().filter(count -\u003e count \u003d\u003d 2).count() \u003d\u003d 2) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(TWO_PAIR);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(2)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(PAIR);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"        // Default case: High Card","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"        return new PokerHand(HIGH_CARD);","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the given hand forms a straight (consecutive sequence of ranks).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"     * @return `true` if the hand is a straight, `false` otherwise.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isStraight(Map\u003cCard.Rank, Integer\u003e rankCount) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"        // rankCount.keySet() gets the unique card ranks in the hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard.Rank\u003e ranks \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"                rankCount.keySet().stream()","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                        .sorted() // sorts the ranks in ascending order.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"                        .toList(); // converts the result into a list.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        // A straight must have five distinct card ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        if (ranks.size() \u003d\u003d 5) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"            boolean normalStraight \u003d true;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"            // Loops through the sorted list and checks if each rank follows the previous rank","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"            // consecutively","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"            // ordinal() returns the numerical position of the enum value.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"            // If the difference between consecutive ranks is not exactly 1, return false.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"            for (int i \u003d 0; i \u003c 4; i++) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"                if (ranks.get(i + 1).ordinal() !\u003d ranks.get(i).ordinal() + 1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"                    normalStraight \u003d false;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"                    break;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"            // Special case: Ace-low straight (A-2-3-4-5)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"            boolean aceLowStraight \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"                    ranks.contains(ACE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(TWO)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(THREE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(FOUR)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"                            \u0026\u0026 ranks.contains(FIVE);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"            return normalStraight || aceLowStraight;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        return false;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the given hand is a royal flush (A, K, Q, J, 10 of the same suit).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"     * @return `true` if the hand is a royal flush, `false` otherwise.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isRoyal(Map\u003cCard.Rank, Integer\u003e rankCount) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        return rankCount.containsKey(ACE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(KING)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(QUEEN)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(JACK)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(TEN);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":145,"-":27}},{"path":"src/main/java/Javatro/HoldingHand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package Javatro;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"/*","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":" * Tracks the 8 cards held in a hand","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":" * Handles the draw function and discard function","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"public class HoldingHand {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    protected List\u003cCard\u003e Hand;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    private final int HOLDING_LIMIT \u003d 8; // The maximum number of cards a hand can hold","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** Instantiate an empty List of Cards. */","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    public HoldingHand() {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        Hand \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"     * Adds a Card to the Hand.","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis function should not be called if Hand size \u003e\u003d HOLDING_LIMIT","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    public void add(Card cardToAdd) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"        if (Hand.size() \u003c HOLDING_LIMIT) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"            Hand.add(cardToAdd);","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"            System.out.println(\"Exceeded Limit. Card not added.\");","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"     * Draws a specified number of cards from the deck and adds them to the Hand.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"     * @param numberOfDraws The number of cards to draw from the deck","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"     * @param deck Deck containing the remaining cards","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"    public void draw(int numberOfDraws, Deck deck) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c numberOfDraws; i++) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"            if (Hand.size() \u003c HOLDING_LIMIT) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"                Card tempCard \u003d deck.draw();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"                Hand.add(tempCard);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"            } else {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"                System.out.println(\"Exceeded Limit. Card not added.\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"     * Returns the specified cards as requested by the player Hand will then draw the same number of","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"     * cards back from the deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"     * \u003cp\u003eThis function should not be called if there are no cards played.","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"     * @param cardsToPlay List containing cards to be played","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"     * @param deck Deck containing the remaining cards","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"    public List\u003cCard\u003e play(List\u003cInteger\u003e cardsToPlay, Deck deck) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"        if (cardsToPlay.size() \u003e 5) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"            System.out.println(","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"                    \"Number of cards played \"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"                            + \"(\"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"                            + cardsToPlay.size()","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"                            + \")\"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"                            + \"exceeds the maximum allowed. (5)\");","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"            return null;","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e playList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"        for (int play : cardsToPlay) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"            Card card \u003d Hand.remove(play);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"            playList.add(card);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c cardsToPlay.size(); i++) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"            Card tempCard \u003d deck.draw();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"            Hand.add(tempCard);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jwyk"},"content":"        return playList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"     * Discards a set number of cards. This function should not be used if the number of discards","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"     * left is 0.","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jwyk"},"content":"     * @param cardsToDiscard List containing the cards at specified positions to be discarded","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"     * @param deck Deck containing the remaining cards","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jwyk"},"content":"    public void discard(List\u003cInteger\u003e cardsToDiscard, Deck deck) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"        for (int discard : cardsToDiscard) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"            Hand.remove(discard);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jwyk"},"content":"        // Draw the same number of cards discarded","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c cardsToDiscard.size(); i++) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"            Card tempCard \u003d deck.draw();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"            Hand.add(tempCard);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"K-J-Q":18,"-":9,"jwyk":75}},{"path":"src/main/java/Javatro/Javatro.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package Javatro;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.ACE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.TEN;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.THREE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"/** The main class for the Javatro game. This class runs the game. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Javatro {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"     * The main method that runs the Javatro game.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * @param args Command-line arguments.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    public static void main(String[] args) throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        // Create a hand of cards","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS), // Using static imports for Rank and Suit","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS), // Simplified card construction","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"                        new Card(THREE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"                        new Card(TEN, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"        State state \u003d new State(100, 3, new Deck());","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"        // Create a new round","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(state);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        // Calculate total chips from the cards in the hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        int totalChips \u003d 0;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : hand) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"            System.out.println(card + \" - Chips: \" + card.getChips());","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"            totalChips +\u003d card.getChips();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        // Evaluate the poker hand and get the result","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(\"Hand: \" + result);","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"        // Add the base chips from the hand result to the total chips","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        totalChips +\u003d result.getChips();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        // Calculate the total score by multiplying total chips with the multiplier","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        int totalScore \u003d totalChips * result.getMultiplier();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        // Display the results","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        System.out.printf(","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \"\\nTotal Score Gained: %s Chips x %d Multiplier \u003d %d\\n\",","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"                totalChips, result.getMultiplier(), totalScore);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(\"Current Round Score: 320\");","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(\"Blind Score to beat: 500\");","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":43,"K-J-Q":4,"-":9,"jwyk":1}},{"path":"src/main/java/Javatro/JavatroException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package Javatro;","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a custom exception class for handling domain-specific errors in the Javatro","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":" * application.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":" * \u003cp\u003eThis class extends {@code Exception} and provides static factory methods to create exceptions","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":" * for different error scenarios.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"public class JavatroException extends Exception {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"     * Constructs an {@code JavatroException} with a specified error message.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"     * @param message The detailed error message explaining the exception.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"    public JavatroException(String message) {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"        super(message);","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     * Creates an exception indicating an invalid number of card played.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when the user plays an invalid amount of cards.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     * @return An {@code JavatroException} indicating the correct number of cards to play.","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidPlayedHand() {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"A poker hand must contain between 1 and 5 cards.\");","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an invalid number of plays per round.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to start a round with an invalid number of","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"     * plays.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"     * @return An {@code JavatroException} indicating the correct number of plays per round.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidPlaysPerRound() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Number of plays per round must be greater than 0\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an invalid blind score.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to start a round with an invalid blind score.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"     * @return An {@code JavatroException} indicating the correct blind score.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidBlindScore() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Blind score must be greater than or equal to 0\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating an invalid deck.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to start a round with an invalid deck.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"     * @return An {@code JavatroException} indicating the correct deck.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidDeck() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Deck cannot be null\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-08","isFullCredit":false}],"authorContributionMap":{"Markneoneo":23,"K-J-Q":32,"-":9}},{"path":"src/main/java/Javatro/PokerHand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package Javatro;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" * Represents the result of evaluating a poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * @param handType The type of poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"public record PokerHand(HandType handType) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"     * Enum representing all possible poker hand types, along with their base chips and multipliers.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"    public enum HandType {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"        ROYAL_FLUSH(\"Royal Flush\", 100, 8),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"        STRAIGHT_FLUSH(\"Straight Flush\", 100, 8),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"        FOUR_OF_A_KIND(\"Four of a Kind\", 60, 7),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"        FULL_HOUSE(\"Full House\", 40, 4),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"        FLUSH(\"Flush\", 35, 4),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        STRAIGHT(\"Straight\", 30, 4),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        THREE_OF_A_KIND(\"Three of a Kind\", 30, 3),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        TWO_PAIR(\"Two Pair\", 20, 2),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        PAIR(\"Pair\", 10, 2),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        HIGH_CARD(\"High Card\", 5, 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        private final String handName;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        private final int chips;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        private final int multiplier;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        HandType(String handName, int chips, int multiplier) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            this.handName \u003d handName;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"            this.chips \u003d chips;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"            this.multiplier \u003d multiplier;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        public String getHandName() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"            return handName;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        public int getChips() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"            return chips;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"        public int getMultiplier() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"            return multiplier;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"     * Returns the base chips for this poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"     * @return The base chips.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    public int getChips() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        return handType.getChips();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"     * Returns the multiplier for this poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"     * @return The multiplier.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"    public int getMultiplier() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        return handType.getMultiplier();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"     * Returns the hand name for this poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"     * @return The hand name.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"    public String getHandName() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        return handType.getHandName();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"    public String toString() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return String.format(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \"%s (Base Chips: %d, Multiplier: %d)\",","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                handType.getHandName(), handType.getChips(), handType.getMultiplier());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":78,"-":3}},{"path":"src/main/java/Javatro/Round.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package Javatro;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import java.util.List;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"public class Round {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"    private static final int INITIAL_HAND_SIZE \u003d 8;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"    private static final int POKER_HAND_SIZE \u003d 5;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"    private static final int MAX_DISCARDS_PER_ROUND \u003d 3;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"    private int currentScore;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"    private int blindScore;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    private int remainingDiscards;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"    private int remainingPlays;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"    private Deck deck;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"    private HoldingHand playerHand;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    private Ui ui;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a new round with the specified blind score. The blind score can be fetched from a","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * file or manually inputed.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param gameState The current state of the game.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"    public Round(State gameState) throws JavatroException {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"        this.currentScore \u003d 0;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"        this.blindScore \u003d gameState.getBlindScore();","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"        this.remainingDiscards \u003d MAX_DISCARDS_PER_ROUND;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"        this.remainingPlays \u003d gameState.getPlaysPerRound();","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"        this.deck \u003d gameState.getDeck();","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"        this.playerHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"        if (blindScore \u003c 0) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidBlindScore();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"        if (remainingPlays \u003c\u003d 0) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidPlaysPerRound();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"        if (deck \u003d\u003d null) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidDeck();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"        // Initial draw","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"        playerHand.draw(INITIAL_HAND_SIZE, this.deck);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"        // ui.printPlayerHand(playerHand);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"     * Plays a set of 5 cards as a poker hand.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param cardIndices Indices of cards to play from the holding hand (must be exactly 5 cards)","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException If the number of cards to play is not exactly 5","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"    public void playCards(List\u003cInteger\u003e cardIndices) throws JavatroException {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"        if (cardIndices.size() !\u003d POKER_HAND_SIZE) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"            throw new IllegalArgumentException(\"Must play exactly \" + POKER_HAND_SIZE + \" cards\");","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"        List\u003cCard\u003e playedCards \u003d playerHand.play(cardIndices, this.deck);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"        PokerHand result \u003d HandResult.evaluateHand(playedCards);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"        Integer totalChips \u003d result.getChips();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"        for (Card card : playedCards) {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"            totalChips +\u003d card.getChips();","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"        // Update round state","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"        currentScore +\u003d totalChips * result.getMultiplier();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"        ui.printHandResult(result, totalChips, currentScore);","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"        ui.printRoundScore(currentScore, blindScore);","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"        // Draw new cards to replace played ones","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"        playerHand.draw(POKER_HAND_SIZE, deck);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"        remainingPlays--;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"     * Discards cards from the player\u0027s hand.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param cardIndices Indices of cards to discard from the holding hand","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException If no remaining discards are available","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"    public void discardCards(List\u003cInteger\u003e cardIndices) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"        if (remainingDiscards \u003c\u003d 0) {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"            throw new IllegalStateException(\"No remaining discards available\");","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"        playerHand.discard(cardIndices, deck);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"        remainingDiscards--;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"        playerHand.draw(cardIndices.size(), deck);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"        ui.printDiscardResult(playerHand, remainingDiscards);","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"    // Getters","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"    public int getCurrentScore() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"        return currentScore;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"    public int getBlindScore() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"        return blindScore;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingDiscards() {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"        return remainingDiscards;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingPlays() {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"        return remainingPlays;","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"     * Checks if the round is over based on game rules.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"     * @return true if the round is over, false otherwise","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"    public boolean isRoundOver() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"K-J-Q"},"content":"        // Round ends if no plays are remaining or score exceeds blind score","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"K-J-Q"},"content":"        return remainingPlays \u003c\u003d 0 || this.isWon();","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"     * Determines if the round was won.","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"     * @return true if player won the round, false otherwise","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"    public boolean isWon() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"        return currentScore \u003e blindScore;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"K-J-Q":127,"-":7}},{"path":"src/main/java/Javatro/State.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package Javatro;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"public class State {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"    private int blindScore;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"    private int playsPerRound;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"    private Deck deck;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"    public State(int blindScore, int playsPerRound, Deck deck) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"        this.blindScore \u003d blindScore;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"        this.playsPerRound \u003d playsPerRound;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"    public int getBlindScore() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"        return blindScore;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    public int getPlaysPerRound() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"        return playsPerRound;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"    public Deck getDeck() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"        return deck;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    // Setters","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    public void setBlindScore(int blindScore) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"        this.blindScore \u003d blindScore;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"    public void setPlaysPerRound(int playsPerRound) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"        this.playsPerRound \u003d playsPerRound;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"    public void setDeck(Deck deck) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"K-J-Q":38}},{"path":"src/main/java/Javatro/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package Javatro;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"public class Ui {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"     * Prints the result of a played hand.","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"     * @param result The result of the hand","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"     * @param totalChips The total chips won from the hand","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"     * @param currentScore The current score after playing the hand","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    public void printHandResult(PokerHand result, int totalChips, int currentScore) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"        System.out.println(\"Hand Result: \" + result);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"        System.out.println(\"Total Chips Won: \" + totalChips);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"        System.out.println(\"Current Score: \" + currentScore);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"     * Prints the current round score.","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"     * @param currentScore The current score","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"     * @param blindScore The blind score","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"    public void printRoundScore(int currentScore, int blindScore) {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"        System.out.println(\"Current Score: \" + currentScore);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"        System.out.println(\"Blind Score: \" + blindScore);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"     * Prints the result of discarding cards.","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"     * @param playerHand The player\u0027s hand after discarding","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"     * @param remainingDiscards The remaining number of discards","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"    public void printDiscardResult(HoldingHand playerHand, int remainingDiscards) {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"        System.out.println(\"Cards after discard: \" + playerHand);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"        System.out.println(\"Remaining Discards: \" + remainingDiscards);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"     * Prints the player\u0027s hand.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"     * @param playerHand The player\u0027s hand","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"    public void printPlayerHand(HoldingHand playerHand) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"        // \u003cSkeleton code\u003e to print the actual player\u0027s hand in the console","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"        System.out.println(\"Your Hand: XXX\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-11","isFullCredit":false}],"authorContributionMap":{"K-J-Q":49}},{"path":"src/test/java/Javatro/HoldingHandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package Javatro;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"public class HoldingHandTest {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    void testDeck() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"        int cardsRemaining \u003d deck.getRemainingCards();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"        assertEquals(52, cardsRemaining);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"        Card drawOne \u003d deck.draw();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        assertEquals(51, deck.getRemainingCards());","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    void testHoldingHand() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"        int cardsRemaining \u003d deck.getRemainingCards();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"        assertEquals(44, cardsRemaining);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"        holdingHand.discard(List.of(1, 3, 5), deck);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        assertEquals(41, deck.getRemainingCards());","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e playedHand \u003d holdingHand.play(List.of(1, 4, 5), deck);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        assertEquals(3, playedHand.size());","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"        assertEquals(38, deck.getRemainingCards());","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"jwyk":35}},{"path":"src/test/java/Javatro/RoundTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package Javatro;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"public class RoundTest {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"    public void round_correctInitialization_success() throws JavatroException {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"        State state \u003d new State(100, 3, new Deck());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(100, round.getBlindScore());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, round.getRemainingPlays());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, round.getCurrentScore());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"        state \u003d new State(200, 5, new Deck());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"        round \u003d new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(200, round.getBlindScore());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(5, round.getRemainingPlays());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, round.getCurrentScore());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"        state \u003d new State(300, 7, new Deck());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"        round \u003d new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(300, round.getBlindScore());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(7, round.getRemainingPlays());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, round.getCurrentScore());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"        state \u003d new State(0, 1, new Deck());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"        round \u003d new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, round.getBlindScore());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(1, round.getRemainingPlays());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, round.getCurrentScore());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"    public void round_incorrectInitializatioin() throws JavatroException {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        // test zero plays","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        State state \u003d new State(100, 0, new Deck());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"            new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(\"Number of plays per round must be greater than 0\", e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"        // test negative blind score","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"        state \u003d new State(-100, 3, new Deck());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"            new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(\"Blind score must be greater than or equal to 0\", e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"        // test null deck","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"        state \u003d new State(100, 3, null);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"            new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(\"Deck cannot be null\", e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"        // test negative blind score and zero plays","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"        state \u003d new State(-100, 0, new Deck());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"            new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(\"Blind score must be greater than or equal to 0\", e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"        // test negative blind score and null deck","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"        state \u003d new State(-100, 3, null);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"            new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(\"Blind score must be greater than or equal to 0\", e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"        // test zero plays and null deck","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"        state \u003d new State(100, 0, null);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"            new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(\"Number of plays per round must be greater than 0\", e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"        // test negative blind score, zero plays and null deck","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"        state \u003d new State(-100, 0, null);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"            new Round(state);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(\"Blind score must be greater than or equal to 0\", e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"K-J-Q":106}},{"path":"src/test/java/Javatro/handResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package Javatro;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.ACE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.EIGHT;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.FIVE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.FOUR;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.JACK;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Rank.KING;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.NINE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.SEVEN;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.SIX;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.TEN;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.THREE;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static Javatro.Card.Rank.TWO;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static Javatro.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static Javatro.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static Javatro.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static Javatro.Card.Suit.SPADES;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":" * This class contains unit tests for the {@link HandResult} class. It tests various poker hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":" * evaluations to ensure correct identification of hand types.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"class HandResultTest {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Tests that a straight flush is correctly identified. A straight flush is a hand that contains","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * five cards of sequential rank, all the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    void testStraightFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Tests that a hand with mixed suits is not identified as a straight flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * identified as a straight instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"    void testStraightFlushFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Tests that a hand with cards not in sequence is not identified as a straight flush. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * should be identified as a flush instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"    void testStraightFlushFalseNotInSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Tests that a royal flush is correctly identified. A royal flush is a hand that contains the","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Ace, King, Queen, Jack, and Ten of the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"    void testRoyalFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Tests that a hand with an Ace as a low card is not identified as a royal flush. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * should be identified as a straight flush instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"    void testRoyalFlushFalseAceLow() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"                        new Card(THREE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FOUR, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Tests that a flush is correctly identified. A flush is a hand that contains five cards of the","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * same suit, not in sequence.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jwyk"},"content":"    void testFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Tests that a hand with mixed suits is not identified as a flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jwyk"},"content":"    void testFlushFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Tests that a hand with less than five cards is not identified as a flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"jwyk"},"content":"    void testFlushFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Tests that a high card is correctly identified. A high card is a hand that does not fall into","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * any other category.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"jwyk"},"content":"    void testHighCardTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d List.of(new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Tests that a straight is correctly identified. A straight is a hand that contains five cards","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * of sequential rank, not all the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"jwyk"},"content":"    void testStraightTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * Tests that a hand with cards not in sequence is not identified as a straight. The hand should","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * be identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"jwyk"},"content":"    void testStraightFalseNotInSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"     * Tests that a hand with mixed sequence is not identified as a straight. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"jwyk"},"content":"    void testStraightFalseMixedSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * Tests that a hand with less than five cards is not identified as a straight. The hand should","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * be identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"jwyk"},"content":"    void testStraightFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"     * Tests that a full house is correctly identified. A full house is a hand that contains three","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"     * cards of one rank and two cards of another rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"jwyk"},"content":"    void testFullHouseTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"     * Tests that a hand with two pairs is not identified as a full house. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"     * identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"jwyk"},"content":"    void testFullHouseFalseTwoPair() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"-"},"content":"     * Tests that a hand with less than five cards is not identified as a full house. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"-"},"content":"     * should be identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"jwyk"},"content":"    void testFullHouseFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"-"},"content":"     * Tests that a hand with three of a kind is not identified as a full house. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"-"},"content":"     * identified as three of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"jwyk"},"content":"    void testFullHouseFalseThreeOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"-"},"content":"     * Tests that three of a kind is correctly identified. Three of a kind is a hand that contains","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"-"},"content":"     * three cards of one rank and two cards of two different ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"jwyk"},"content":"    void testThreeOfAKindTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"-"},"content":"    /** Tests that three of a kind is correctly identified with only three cards. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"jwyk"},"content":"    void testThreeOfAKindTrue3Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"-"},"content":"                List.of(new Card(TEN, SPADES), new Card(TEN, DIAMONDS), new Card(TEN, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"-"},"content":"     * Tests that a full house is not identified as three of a kind. The hand should be identified","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"-"},"content":"     * as a full house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"jwyk"},"content":"    void testThreeOfAKindFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"-"},"content":"     * Tests that four of a kind is correctly identified with five cards. Four of a kind is a hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"-"},"content":"     * that contains four cards of one rank and one card of another rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"jwyk"},"content":"    void testFourOfAKindTrue5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"-"},"content":"    /** Tests that four of a kind is correctly identified with four cards. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"jwyk"},"content":"    void testFourOfAKindTrue4Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"-"},"content":"     * Tests that a pair is correctly identified with five cards. A pair is a hand that contains two","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"-"},"content":"     * cards of one rank and three cards of three different ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"jwyk"},"content":"    void testPairTrue5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"-"},"content":"     * Tests that a hand with two pairs is not identified as a single pair. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"-"},"content":"     * identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"jwyk"},"content":"    void testPairFalseTwoPair() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"-"},"content":"    /** Tests that a pair is correctly identified with two cards. */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"jwyk"},"content":"    void testPairTrue2Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d List.of(new Card(EIGHT, SPADES), new Card(EIGHT, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"-"},"content":"     * Tests that a full house is not identified as a pair. The hand should be identified as a full","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"-"},"content":"     * house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"jwyk"},"content":"    void testPairFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"-"},"content":"     * Tests that four of a kind is not identified as a pair. The hand should be identified as four","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"-"},"content":"     * of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"jwyk"},"content":"    void testPairFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"-"},"content":"     * Tests that two pairs are correctly identified. Two pairs is a hand that contains two cards of","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"-"},"content":"     * one rank, two cards of another rank, and one card of a third rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"jwyk"},"content":"    void testTwoPairTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"-"},"content":"     * Tests that a full house is not identified as two pairs. The hand should be identified as a","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"-"},"content":"     * full house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"jwyk"},"content":"    void testTwoPairFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":502,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":503,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":504,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":505,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":506,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":507,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":508,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":509,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":510,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":511,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":512,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":513,"author":{"gitId":"-"},"content":"     * Tests that four of a kind is not identified as two pairs. The hand should be identified as","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":514,"author":{"gitId":"-"},"content":"     * four of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":515,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":516,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":517,"author":{"gitId":"jwyk"},"content":"    void testTwoPairFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":518,"author":{"gitId":"-"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":519,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":520,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":521,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":522,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":523,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":524,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":525,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":526,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":527,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":528,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":529,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-06","isFullCredit":false}],"authorContributionMap":{"Markneoneo":371,"-":128,"jwyk":30}}]

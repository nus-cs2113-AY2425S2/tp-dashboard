[{"path":".github/workflows/FormatLintTestBuild.yml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"name: Auto Java Formatter","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"on: push","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"permissions:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"  contents: write","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"jobs:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"  format:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"    if: github.actor !\u003d \u0027Auto Formatter\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"    name: Auto Java Formatter","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout code","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"      - name: Download google-java-format","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"          wget https://github.com/google/google-java-format/releases/download/v1.15.0/google-java-format-1.15.0-all-deps.jar -O /tmp/google-java-format.jar","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"      - name: Fix Java formatting with google-java-format","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"          java --add-exports jdk.compiler/com.sun.tools.javac.parser\u003dALL-UNNAMED -jar /tmp/google-java-format.jar -a --replace $(find . -name \"*.java\")","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"      - name: Commit formatted code","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"          git config --global user.name \"Auto Formatter\"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"          git config --global user.email \"auto_formatter@gmail.com\"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"          # Check if there are any changes","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"          if [[ -n \"$(git status --porcelain)\" ]]; then","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"            git add .","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"            git commit -m \"Apply google-java-format to Java files\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"            git push","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"            echo \"CHANGES_PUSHED\u003dtrue\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"          else","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"            echo \"No formatting changes detected.\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"            echo \"CHANGES_PUSHED\u003dfalse\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"          fi","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"        env:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"  lint:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    name: Lint Code Base","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    needs: format","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    if: always() ","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"      - name: Lint Code Base","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"        uses: github/super-linter@v4","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"        env:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"          RUN-LOCAL: false","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"          LINTER_RULES_PATH: config/checkstyle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"          JAVA_FILE_NAME: ../../config/checkstyle/checkstyle.xml","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"          VALIDATE_ALL_CODEBASE: true","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"          VALIDATE_JAVA: true","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"  test:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"    name: Run Tests with Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"    needs: lint","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"      - name: Grant execute permission for Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"        run: chmod +x gradlew","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"      - name: Run Gradle Tests","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        run: ./gradlew test","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"  build:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"    name: Build \u0026 Upload JAR","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"    runs-on: ubuntu-latest","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"    needs: test","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"    steps:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"      - name: Checkout latest code","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/checkout@v3","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"flyingapricot"},"content":"          fetch-depth: 0","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"          ref: ${{ github.head_ref }}","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"      - name: Detect and pull latest changes from the same branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"          BRANCH_NAME\u003d$(git rev-parse --abbrev-ref HEAD)","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"          echo \"Current branch: $BRANCH_NAME\"","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"          git fetch origin $BRANCH_NAME  # Fetch the latest changes from the current branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"          git reset --hard origin/$BRANCH_NAME  # Ensure we are using the latest commit from the branch","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"          git log -1  # Show latest commit for debugging","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"          distribution: \u0027jdk+fx\u0027","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"      - name: Grant execute permission for Gradle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"        run: chmod +x gradlew","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"      - name: Build JAR without Checkstyle","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"        run: ./gradlew build -x checkstyleMain -x checkstyleTest","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"      - name: Find JAR File","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"        run: |","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"flyingapricot"},"content":"          JAR_PATH\u003d$(find build/libs -name \"*.jar\" | head -n 1)","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"          echo \"JAR_PATH\u003d$JAR_PATH\" \u003e\u003e $GITHUB_ENV","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"flyingapricot"},"content":"      - name: Upload JAR as an Artifact","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"        uses: actions/upload-artifact@v4","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"flyingapricot"},"content":"        with:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"flyingapricot"},"content":"          name: javatro-jar","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"flyingapricot"},"content":"          path: ${{ env.JAR_PATH }}","lastModifiedDate":"2025-03-02","isFullCredit":false}],"authorContributionMap":{"flyingapricot":153}},{"path":".github/workflows/gradle.yml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"name: Java CI","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"on:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"  workflow_run:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"    workflows: [\"Lint Code Basee\"]","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"    types:","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"      - completed","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"jobs:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"  build:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"    strategy:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"      matrix:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"        platform: [ubuntu-latest, macos-latest, windows-latest]","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    runs-on: ${{ matrix.platform }}","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"    steps:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"      - name: Set up repository","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        uses: actions/checkout@master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"      - name: Set up repository","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"        uses: actions/checkout@master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"        with:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"          ref: master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"      - name: Merge to master","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        run: git checkout --progress --force ${{ github.sha }}","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"      - name: Validate Gradle Wrapper","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        uses: gradle/wrapper-validation-action@v1","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"      - name: Setup JDK 17","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        uses: actions/setup-java@v1","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        with:","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"          java-version: \u002717\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"          java-package: jdk+fx","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"      - name: Build and check with Gradle","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        run: ./gradlew check","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (*NIX)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if: runner.os \u003d\u003d \u0027Linux\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"        run: ./runtest.sh","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (MacOS)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if: always() \u0026\u0026 runner.os \u003d\u003d \u0027macOS\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        run: ./runtest.sh","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"      - name: Perform IO redirection test (Windows)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if: always() \u0026\u0026 runner.os \u003d\u003d \u0027Windows\u0027","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"        working-directory:  ${{ github.workspace }}/text-ui-test","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"        shell: cmd","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"        run: runtest.bat","lastModifiedDate":"2020-05-24","isFullCredit":false}],"authorContributionMap":{"flyingapricot":5,"-":49}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"# javatro - CLI Roguelike Deck-Building Game [![Super-Linter](https://github.com/AY2425S2-CS2113-W13-1/tp/actions/workflows/FormatLintTestBuild.yml/badge.svg)](https://github.com/marketplace/actions/super-linter)","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Overview","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"javatro is a text-based roguelike deck-building game designed for those who love strategic gameplay without the need for graphical interfaces. Inspired by the game *Balatro*, it combines elements of poker and roguelike mechanics to create a deeply replayable, strategic experience that can be enjoyed through a simple command-line interface (CLI).","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"- Deck-Building: Build and customize your deck of cards, each with unique effects and abilities.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"- Turn-Based Combat: Engage in strategic, turn-based combat, making every move count.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"- Replayability: With random encounters, different challenges, and evolving strategies, no two runs are ever the same.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"- Minimalist Design: A lightweight, no-graphics interface focuses on depth and gameplay rather than visual aesthetics.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"- Cross-Platform: Works seamlessly on various operating systems, including Windows, macOS, and Linux.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Installation","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Prerequisites","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"- Java 11 or higher","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"- Command-line interface (CLI) access","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"### Steps","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Clone the repository:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"      git clone https://github.com/yourusername/javatro.git","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"   cd javatro","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"2. Compile and run the game:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"      javac javatro.java","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"   java javatro","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"3. Enjoy the game!","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"## Gameplay","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Objective","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"The goal of javatro is to progress through a series of challenging encounters by strategically building and managing your deck of cards. Each card has unique effects that can be used during combat to defeat enemies, gain resources, and navigate different challenges.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"### How to Play","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Start a New Game: Upon starting the game, you\u0027ll be prompted to create a deck and begin your journey.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"2. Turn-Based Combat: During combat, you\u0027ll choose cards from your deck to perform actions like attacking, defending, or gaining buffs.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"3. Card Management: As you progress, you\u0027ll acquire new cards that can be added to your deck, allowing you to tailor your strategy.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"4. Roguelike Elements: Each run is procedurally generated with different events, enemies, and challenges, providing endless replayability.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"### Commands","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"- `start`: Start a new game.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"- `draw`: Draw a card from your deck.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"- `attack`: Attack an enemy using a card\u0027s effect.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"- `defend`: Defend against an enemy\u0027s attack.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"- `exit`: Quit the game.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"### Card Types","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"- Attack Cards: Deal damage to enemies.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"- Defend Cards: Block or reduce incoming damage.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"- Special Cards: Provide unique abilities like healing, buffs, or drawing extra cards.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"## Target Audience","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"- Card Game Enthusiasts: Players who enjoy the depth of card games and strategic decision-making.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"- Roguelike Fans: Those who love procedural generation and the challenge of each new run.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"- Tech-Savvy Players: Individuals comfortable with command-line interfaces and minimalist gameplay.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"- Cross-Platform Gamers: Users who want a consistent gaming experience across various platforms.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"## Contributing","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"We welcome contributions to the development of javatro! If you\u0027d like to contribute, please follow these steps:","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Fork the repository.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"2. Create a new branch for your changes.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"3. Make your changes and commit them with descriptive messages.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"4. Push your changes and create a pull request.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"## License","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"javatro is licensed under the MIT License.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Contact","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"For more information or support, please contact us at:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"- Email: support@javatrogame.com","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"- GitHub Repository: https://github.com/yourusername/javatro","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"Special thanks to the creators of *Balatro*, whose game inspired the design and mechanics of javatro.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"Enjoy the game, and may your strategic decisions lead you to victory!","lastModifiedDate":"2025-02-19","isFullCredit":false}],"authorContributionMap":{"Markneoneo":8,"flyingapricot":1,"-":90}},{"path":"_config.yml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"title: Your Site Title","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"description: A description of your site","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"baseurl: \"/tp\" # if deploying to GitHub Pages","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"url: \"https://your-username.github.io\" # your GitHub URL","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"markdown: kramdown","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"theme: jekyll-theme-hacker","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"plugins:","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"  - jekyll-feed","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"mermaid: true","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false}],"authorContributionMap":{"flyingapricot":12}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.0\u0027","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-engine:5.7.0\u0027","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"sourceSets {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    main {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        java {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"            srcDirs \u003d [\u0027src/main/java\u0027]","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        resources {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"            srcDirs \u003d [\u0027src/main/resources\u0027]","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"            include \u0027**/*.txt\u0027","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"            include \u0027**/*.wav\u0027","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"    mainClass.set(\"javatro.Javatro\")","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    archiveBaseName.set(\"javatro\")","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier.set(\"\")","lastModifiedDate":"2023-09-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"swethacool":2,"Markneoneo":8,"flyingapricot":5,"-":46,"jwyk":1}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for the coding standard at","lastModifiedDate":"2022-05-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://se-education.org/guides/conventions/java/basic.html","lastModifiedDate":"2022-05-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        \u003cproperty name\u003d\"file\" value\u003d\"/github/workspace/config/checkstyle/suppressions.xml\"/\u003e","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        IMPORT CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"        An import statement is redundant if:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"          * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for unused import statements.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"        An import statement is unused if:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"          It\u0027s not referenced in the file.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"        NAMING CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"            \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"        LENGTH and CODING CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"          Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"          C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"            the same line. e.g., the following example is fine:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"              } else","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"            \u003c!-- This next example is not fine:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"              }","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"              else","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"            \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"            if (true) return 1; // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"            if (true) { return 1; } // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"            else if {","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"              return 1; // else if should always be multi line","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"            if (true)","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"              return 1; // Not allowed","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"            \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"            some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"        ORDER CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"          1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"          2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"          3. Constructors","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"          4. Methods","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"-"},"content":"        \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that default is after all cases in a switch statement --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"DefaultComesLast\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"                 8.4.3.  The prescribed order is:","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"                 public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"                 synchronized, native, strictfp","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"              --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"-"},"content":"        WHITESPACE CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"throwsIndent\" value\u003d\"8\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NoWhitespaceBeforeCaseDefaultColon\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"-"},"content":"        JAVADOC CHECKS","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all block-tags are ordered correctly. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that Javadoc block tags appear only at the beginning of the line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocBlockTagLocation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all Javadoc comments start from the second line. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocContentLocationCheck\" /\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each line in Javadoc has leading asterisks. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingLeadingAsterisk\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each non-empty line in Javadoc has whitespace after leading asterisk. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingWhitespaceAfterAsterisk\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that for block tags, indentation of continuation lines is at least 4 spaces. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocTagContinuationIndentation\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every class, enumeration and interface. --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every method (excluding getters, setters and constructors). --\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"accessModifiers\" value\u003d\"public\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2020-05-24","isFullCredit":false}],"authorContributionMap":{"flyingapricot":1,"-":286}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display |       Name       | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"--------|:----------------:|:--------------:|:---------:","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"![](https://weminoredinfilm.com/wp-content/uploads/2012/10/star-trek-voyager.jpg?w\u003d640) |    Jian Quan     | [Github](https://github.com/K-J-Q/) | [Portfolio](docs/team/jianquan.md)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"![](https://nus.instructure.com/images/thumbnails/1889759/an0Mp6dUc8X7JQSsTru3w37v24OKL2CvjasETO58) |  Neeraj Kumbar   | [Github](https://github.com/flyingapricot) | [Portfolio](docs/team/neerajkumbar.md)","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"![gumball.jpg](https://encrypted-tbn0.gstatic.com/images?q\u003dtbn:ANd9GcRgZ7j0HTP8PmUJFy4_7VREGM8F625LVsfXXQ\u0026s) | Mark Neo Qi Hao  | [Github](https://github.com/Markneoneo) | [Portfolio](team/markneoneo.md)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"![](https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixid\u003dMnwxMjA3fDB8MHxzZWFyY2h8MXx8Y3V0ZSUyMGNhdHxlbnwwfHwwfHw%3D\u0026ixlib\u003drb-1.2.1\u0026w\u003d1000\u0026q\u003d80) | Saravanan Swetha | [Github](https://github.com/swethacool) | [Portfolio](docs/team/saravananswetha.md)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"![](https://avatars.githubusercontent.com/u/63852595?v\u003d4)| John Woo Yi Kai  | [Github](https://github.com/jwyk) | [Portfolio](docs/team/johnwooyikai.md)","lastModifiedDate":"2025-03-05","isFullCredit":false}],"authorContributionMap":{"swethacool":2,"Markneoneo":1,"flyingapricot":1,"K-J-Q":1,"-":3,"jwyk":1}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"## Table of Contents","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"1. [Acknowledgements](#acknowledgements)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"2. [Setting up, getting started](#setting-up-getting-started)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"3. [Design](#design)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"   - [Architecture](#architecture)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"   - [UI Component](#ui-component)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"   - [Logic Component](#logic-component)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"   - [Model Component](#model-component)","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"   - [Storage Component](#storage-component)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"   - [Round Component](#round-component)","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"   - [Score Component](#score-component)","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"4. [Implementation](#implementation)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"5. [Documentation, logging, testing, configuration, dev-ops](#documentation-logging-testing-configuration-dev-ops)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"6. [Appendix: Requirements](#appendix-requirements)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"   - [Product Scope](#product-scope)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"   - [User Stories](#user-stories)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"   - [Use Cases](#use-cases)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"   - [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"   - [Glossary](#glossary)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"7. [Appendix: Instructions for manual testing]()","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"   ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"Thanks Balatro, CS2113 Team and our TA Ethan Soh @paulifyer.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"   ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"## Setting up, getting started","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"This Developer Guide describes the design, architecture, and implementation of the Javatro application. It includes UML diagrams and explanations to help developers understand and contribute to the project.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"1. **Ensure JDK 17 or later is installed**.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"2. **Import the project as a Gradle project**.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"3. **Build and run the application using the provided Gradle tasks**.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"## Design","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"### Architecture","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"The application follows a **Model-View-Controller (MVC)** architecture pattern. The core logic, display components, and manager are modularized to promote separation of concerns.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/architecture.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"#### Application Initialization","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/application_init.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"#### Gameplay Interaction","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/gameplay_interaction_sequence_diagram.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"## UI Component","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/gameplay_sequence.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"*Illustrates how `GameScreen` updates its display when the game state changes.*  ","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/ui_screens_diagram.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"*Simplified to highlight core relationships. The `UI` manages `Screen` instances, and `GameScreen` extends `Screen` while observing game state changes.*  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"### 1. Overview  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"The **UI module** manages screen transitions, user input, and formatted content rendering (e.g., bordered menus, card art). Designed using the **Singleton pattern**, it ensures a single point of control for display operations. This guide details the architecture, key components, and enhancements like dynamic screen rendering and transition logic.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"### 2. Architectural Design  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"#### 2.1. High-Level Architecture  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"The UI follows a **Model-View-Controller (MVC)**-inspired design:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"- **Model**: `JavatroCore` (game state).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"- **View**: `Screen` subclasses (e.g., `GameScreen`, `StartScreen`).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"- **Controller**: `UI` class (manages transitions, input parsing).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"##### Key Design Patterns:  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"1. **Singleton Pattern**: Ensures a single `UI` instance for centralized screen management.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"2. **Observer Pattern**: `GameScreen` listens to `JavatroCore` for state changes (e.g., score updates).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"3. **State Pattern**: Screens encapsulate state-specific behavior (e.g., `HelpScreen` vs. `GameScreen`).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"#### 2.2. Rationale for Key Decisions  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"- **ANSI/Unicode Formatting**: Enables rich terminal UIs without external libraries.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"- **Abstract `Screen` Class**: Promotes code reuse (e.g., `displayOptions()` for command menus).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"- **Centralized `UI` Class**: Simplifies debugging and ensures consistent transitions.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"### 3. Component-Level Design  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"#### 3.1. The `UI` Class  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"**Responsibilities**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"- **Screen Management**: Stores static references to all screens and handles transitions via `setCurrentScreen()`.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"- **Formatted Output**: Methods like `printBorderedContent()` and `centerText()` standardize layouts.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"- **Utility Functions**: `clearScreen()`, `getCardArtLines()` (renders ASCII card art).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"**Key Code Snippet**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"```java  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"public void setCurrentScreen(Screen screen) {  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"    previousScreen \u003d currentScreen;  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"    currentScreen \u003d screen;  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"    currentScreen.displayScreen(); // Triggers screen-specific rendering  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"    PARSER.getOptionInput(); // Handle user input  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"}  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"```  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"#### 3.2. The `Screen` Class Hierarchy  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"- **Abstract `Screen` Class**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"  - Defines `displayScreen()` (abstract) and `displayOptions()` (common command menu).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"  - Manages `commandMap` (list of user-selectable options).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"- **Concrete Screens**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"  - **`GameScreen`**: Displays real-time game stats, card art, and listens for state changes.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"  - **`HelpScreen`**: Shows static help content.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"**Example: `GameScreen` Property Listener**  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"```java  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"public void propertyChange(PropertyChangeEvent evt) {  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"    switch (evt.getPropertyName()) {  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        case \"currentScore\":  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"            roundScore \u003d (Long) evt.getNewValue();  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"            break;  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"        // ... other cases  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"    }  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"    displayScreen(); // Re-render UI on state change  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"}  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"```  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"### 5. Key Enhancements  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"#### 5.1. Enhancement: Screen Transition Mechanism  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"**Implementation**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"- **Transition Messages**: ANSI-formatted logs (e.g., `Transitioning to: GameScreen`).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"- **Back Navigation**: `previousScreen` allows reverting to prior states (e.g., exiting `HelpScreen`).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"**Sequence Diagram**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/gameplay_enhance_diagram.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"**Alternatives Considered**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"- **Stack-Based History**: Rejected due to limited navigation depth requirements.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"- **Immediate Input Handling**: Chose deferred parsing via `Parser` to decouple input from rendering.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"flyingapricot"},"content":"#### 5.2. Enhancement: Dynamic Card Rendering  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"- **Card Art Generation**: `CardRenderer` converts `Card` objects to ASCII art with ANSI colour formatting.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"- **Grid Layout**: Renders 8 cards in two rows, spaced with ANSI backgrounds.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"**Code Snippet**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"```java  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"public static List\u003cString\u003e getCardArtLines(List\u003cCard\u003e hand) {  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"    List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"    String[][] renderedCards \u003d hand.stream()","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"            .map(CardRenderer::renderCard)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"            .toArray(String[][]::new);  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"    // Combine lines horizontally  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"    return lines;  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"}  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"```","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"flyingapricot"},"content":"#### **5.3. Challenge: Emoji and Unicode Compatibility**  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"flyingapricot"},"content":"##### **Initial Attempt**  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"Emojis and Unicode symbols (e.g., 🃏, ♥️, ♥) were initially incorporated into the UI to enhance visual appeal. For example:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"```java  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"// Early prototype (discarded)  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"private static String getSuitSymbol(Card.Suit suit) {  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"    return switch (suit) {  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"        case HEARTS -\u003e \"♥️\";  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"        case DIAMONDS -\u003e \"♦️\";  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        case CLUBS -\u003e \"♣️\";  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"        case SPADES -\u003e \"♠️\";  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"    };  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"}  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"```  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"flyingapricot"},"content":"##### **Challenges**  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"1. **Inconsistent Spacing**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"   - Emojis/Unicode symbols vary in display width (e.g., `♥️` vs. `♠️`), causing misalignment in card art.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"   - Example: A heart symbol might be very slightly larger than a regular spacing, breaking grid layouts.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"2. **Terminal Compatibility**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"   - Terminals like **Windows CMD / Windows Powershell** require `chcp 65001` to display Unicode, which is error-prone for users.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"flyingapricot"},"content":"   - Colored emojis are unsupported in many terminals, leading to monochrome or placeholder symbols (e.g., ` `).  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"3. **ANSI Overlap**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"   - Combining ANSI color codes with Unicode symbols introduced unpredictable formatting (e.g., background colors bleeding into adjacent text).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"flyingapricot"},"content":"##### **Final Approach**  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"To ensure cross-terminal compatibility and consistent spacing, **letters** (`H`, `D`, `C`, `S`) replaced symbols:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"```java  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"// Current implementation (CardRenderer.java)  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"private static String getSuitSymbol(Card.Suit suit) {  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"    return switch (suit) {  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"        case HEARTS -\u003e \"H\";  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"        case DIAMONDS -\u003e \"D\";  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"        case CLUBS -\u003e \"C\";  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"        case SPADES -\u003e \"S\";  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"    };  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"}  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"```  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"- **Advantages**:  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"  - Fixed-width characters ensure alignment in card art.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"  - Works universally across terminals without configuration.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"  - ANSI colors apply cleanly to letters (e.g., `H` in red for hearts).  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"flyingapricot"},"content":"#### **UML Diagrams**  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"flyingapricot"},"content":"##### **CardRenderer Class Diagram**  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/cardrenderer_class.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"*The `CardRenderer` class maps suits to letters (`H`, `D`, `C`, `S`) and colors using ANSI codes.*  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"flyingapricot"},"content":"##### **Card Rendering Sequence Diagram**  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/cardrenderer_sequence_diagram.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"flyingapricot"},"content":"#### **Key Takeaways**  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"- **Prioritize Functionality Over Aesthetics**: Letters ensured reliability, while emojis introduced terminal-specific bugs.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"- **Test Across Environments**: The decision to avoid Unicode was driven by rigorous testing in CMD, PowerShell, and Unix terminals.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"- **Code Hygiene**: Unused symbols (e.g., `♠` in `UI`) should be removed in future refactoring.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"This approach balances visual clarity with technical robustness, ensuring the UI works seamlessly for all users.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"flyingapricot"},"content":"### 6. Future Considerations  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"1. **GUI Framework Integration**: Migrate to JavaFX for animations and mouse support.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"2. **Theming System**: Allow users to customize colors via config files.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"3. **Accessibility Mode**: Add high-contrast themes and screen-reader support.  ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"flyingapricot"},"content":"### 7. Conclusion  ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"The UI module’s design prioritizes modularity, extensibility, and terminal compatibility. By combining design patterns like Singleton and Observer with ANSI formatting, it delivers a responsive and visually consistent experience. Future developers can extend it by adding new `Screen` subclasses or integrating modern GUI frameworks.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"swethacool"},"content":"## Model Component","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"swethacool"},"content":"## Ante and Blind class system :","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"swethacool"},"content":"### 1. Introduction","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"swethacool"},"content":"The **Ante and Blind System** in the game determines the minimum required score to beat for each round and regulates the increasing stakes as the game progresses. The **Ante** sets a base score to beat, while the **Blind** system introduces different blind levels (SMALL, LARGE, BOSS) each with a unique multiplier score effect to ensure competitive play. This section provides an in-depth look into its implementation, design choices, and a UML sequence diagram illustrating interactions.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"swethacool"},"content":"### 2. Implementation","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"swethacool"},"content":"#### 2.1 Class Overview","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"swethacool"},"content":"The Ante class manages the ante value and blind progression. There are a total of 8 antes where each ante consists of 3 blinds (SMALL, LARGE, BOSS). The ante class maintains the current ante level the gameplay is at , determines the betting stakes, and updates the blind stage as the game progresses. ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"swethacool"},"content":"#### 2.2 Attributes","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"swethacool"},"content":"_int MAX_ANTE_COUNT_ \u003d 8; – Defines the maximum ante level progression.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"swethacool"},"content":"_int anteCount;_ – Stores the current ante level.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"swethacool"},"content":"_Blind blind;_ – Represents the current blind stage.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"swethacool"},"content":"_int[] anteScore;_ – An array storing predefined ante values for each level.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"swethacool"},"content":"#### 2.3 Enum: Blind Levels","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"swethacool"},"content":"The **Blind** enum represents different blind levels, each with a unique multiplier affecting the ante base score. Additionally, the **SMALL** and **LARGE** blinds are optional, giving the players a choice to accept or reject, meanwhile the **BOSS** blind is compulsory for the players to proceed to the next round.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"swethacool"},"content":"**Code Snippet** :","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"swethacool"},"content":"```","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"swethacool"},"content":"public enum Blind {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"swethacool"},"content":"SMALL_BLIND(1.0, \"SMALL BLIND\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"swethacool"},"content":"LARGE_BLIND(1.5, \"LARGE BLIND\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"swethacool"},"content":"BOSS_BLIND(2.0, \"BOSS BLIND\");","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"swethacool"},"content":"private final double multiplier;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"swethacool"},"content":"private final String name;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"swethacool"},"content":"Blind(double multiplier, String name) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"swethacool"},"content":"this.multiplier \u003d multiplier;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"swethacool"},"content":"this.name \u003d name;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"swethacool"},"content":"public double getMultiplier() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"swethacool"},"content":"return multiplier;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"swethacool"},"content":"public String getName() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"swethacool"},"content":"return name;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"swethacool"},"content":"```","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"swethacool"},"content":"#### 2.4 Methods","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"swethacool"},"content":"**_public Ante()_:** ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"swethacool"},"content":"Initializes ante at level 1 with Small Blind.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"swethacool"},"content":"**public int getRoundScore()** :","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"swethacool"},"content":"Returns the ante score multiplied by the unique blind multiplier.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"swethacool"},"content":"**_public void setAnteCount(int anteCount)_:**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"swethacool"},"content":"Updates the ante count within valid bounds.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"swethacool"},"content":"**_public void resetAnte()_:**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"swethacool"},"content":"Resets ante to level 1 and Small Blind.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"swethacool"},"content":"**_public void nextRound()_:**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"swethacool"},"content":"Progresses to the next blind level or increases ante level when Boss Blind is reached.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"swethacool"},"content":"### 3. Design Considerations","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"swethacool"},"content":"## 3.1 Alternatives Considered","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"swethacool"},"content":"**1. Fixed Ante and Blind System**:","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"swethacool"},"content":"   Pros: Simple to implement and requires minimal logic.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"swethacool"},"content":"   Cons: Lacks adaptability, making the game less engaging over time.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"swethacool"},"content":"**2. Dynamic Blind Adjustment**:","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"swethacool"},"content":"   Pros: Adjusts difficulty dynamically, providing a more balanced progression.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"swethacool"},"content":"   Cons: Requires additional tracking and logic to manage changes effectively.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"swethacool"},"content":"## 3.2 Chosen Approach","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"swethacool"},"content":"   To balance simplicity and dynamic progression, the enum-based structured Blind System. It cycles through Small Blind → Large Blind → Boss Blind, ensuring controlled progression while increasing the ante at the end of each cycle. This approach keeps gameplay engaging without overcomplicating the logic. Moreover the array-based ante progression simplifies lookup and ensures consistent bet increases. This structure prevents unfair jumps in bet sizes, ensuring a fairer experience for the players.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"swethacool"},"content":"## Class Diagram:","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/ante_class_diagram.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"swethacool"},"content":"The Ante class manages the ante count, blind levels, and scores in the game, utilizing the Blind enumeration for different blind levels.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/ante_2.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"swethacool"},"content":"The Option interface is implemented by AcceptBlindOption and RejectBlindOption, which interact with JavatroCore, JavatroManager, and UI to manage blind options in the game.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"swethacool"},"content":"## Sequence Diagram:","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/option_sequence.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"flyingapricot"},"content":"This sequence diagram illustrates the interactions between the Ante and Blind classes, where Ante sets and retrieves blind information, as well as manages ante-related operations such as updating scores and counts.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/option_sequence_2.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"swethacool"},"content":"This sequence diagram shows the interactions between the Option implementations (AcceptBlindOption and RejectBlindOption), and their interactions with JavatroCore, JavatroManager, and UI, including actions such as beginning the game, updating ante, and retrieving screens.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"flyingapricot"},"content":"### Logic Component","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/logic_sequence.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"flyingapricot"},"content":"The Logic Component serves as the Controller in the Model-View-Controller (MVC) architecture. It is responsible for managing the application\u0027s core logic, processing user commands, and interacting with the Model (e.g., Deck, Ante, PokerHand) through well-defined interfaces. It updates the View through the manager classes.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"flyingapricot"},"content":"All classes within the core package make up the Logic Component. This does not include the Deck, Ante, and PokerHand classes, as these are part of the Model. Instead, the Logic Component uses these classes to perform operations and process commands.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"flyingapricot"},"content":"- `JavatroCore`: The central controller managing the game flow, initializing components, and processing game state updates.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"flyingapricot"},"content":"This component interacts with the UI and Manager components to process user inputs and update the view accordingly.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"K-J-Q"},"content":"### Round Component","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"K-J-Q"},"content":"The **Round Component** is responsible for managing the state and flow of a single round in the game. It encapsulates the logic for handling round-specific actions, configurations, and any special effects.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"K-J-Q"},"content":"#### Responsibilities","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"K-J-Q"},"content":"- Manage the state of the current round, including the cards dealt, scores, and player actions.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"K-J-Q"},"content":"- Handle round-specific configurations and validation.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"K-J-Q"},"content":"- Notify other components (e.g., UI, Logic) of state changes during the round.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"K-J-Q"},"content":"#### Key Classes","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"K-J-Q"},"content":"- **Round**: The main class that orchestrates the round\u0027s lifecycle.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"K-J-Q"},"content":"- **RoundState**: Tracks the current state of the round (e.g., active, completed).","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"K-J-Q"},"content":"- **RoundActions**: Encapsulates actions that can be performed during the round (e.g., draw, discard).","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"K-J-Q"},"content":"- **RoundConfig**: Stores configuration settings for the round (e.g., max cards, scoring rules).","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"K-J-Q"},"content":"- **RoundObservable**: Implements the observer pattern to notify listeners (e.g., UI) of state changes.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"K-J-Q"},"content":"![](dg_images/round_8.svg)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"K-J-Q"},"content":"#### Round Sequence Diagram: Round Initialization","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"K-J-Q"},"content":"The following sequence diagram illustrates the initialization process of a round, including configuration setup and state management.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"K-J-Q"},"content":"![](dg_images/round_1.png)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"K-J-Q"},"content":"#### Round Sequence Diagram: playCards method","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"K-J-Q"},"content":"The following sequence diagram illustrates the process of playing cards during a round.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/round_2.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"K-J-Q"},"content":"#### Round Sequence Diagram: discardCards method","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"K-J-Q"},"content":"The following sequence diagram illustrates the process of discarding cards during a round.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"K-J-Q"},"content":"![](dg_images/round_3.png)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"K-J-Q"},"content":"#### Round Sequence Diagram: isWon method","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"K-J-Q"},"content":"The following sequence diagram illustrates the process of checking if a round is won.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"K-J-Q"},"content":"![](dg_images/round_4.png)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"K-J-Q"},"content":"#### Round Sequence Diagram: isRoundOver method","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"K-J-Q"},"content":"The following sequence diagram illustrates the process of checking if a round is over.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"K-J-Q"},"content":"![](dg_images/round_5.png)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"K-J-Q"},"content":"#### RoundActions Sequence Diagram: playCards method","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"K-J-Q"},"content":"The following sequence diagram illustrates the process of playing cards during a round.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"K-J-Q"},"content":"![](dg_images/round_6.png)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"K-J-Q"},"content":"#### RoundActions Sequence Diagram: discardCards method","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"K-J-Q"},"content":"The following sequence diagram illustrates the process of discarding cards during a round.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"K-J-Q"},"content":"![](dg_images/round_7.png)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"jwyk"},"content":"### Score Component","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"jwyk"},"content":"The **Score Component** is part of Javatro\u0027s scoring system, responsible for calculating the final score based on the played hand, cards, and active jokers. It encapsulates the logic for handling score calculations.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"jwyk"},"content":"#### Responsibilities","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"jwyk"},"content":"- Handle calculation of scoring played hands, factoring in round-specific configurations and validation.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"jwyk"},"content":"#### Class Diagram: Score and involved classes","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/score_1.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"jwyk"},"content":"#### Score Calculation Overview","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"jwyk"},"content":"Below is how the Score Class returns the calculated score:","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"jwyk"},"content":"1. `Round` initializes `Score`, and `Score` invokes the `getChips()` method from `PokerHand`.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/score_2.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"jwyk"},"content":"2. With each `Card` passed from `Score`, `Score` checks whether the card played satisfies BossType conditions, ","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"jwyk"},"content":"and applies effects if the condition is satisfied. Else, the `Card` is scored, and each `Joker` in `heldJokers` is checked if the `Card` can interact with the `Joker`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/score_3.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"jwyk"},"content":"3. After each `Card` is scored, any `Joker` with the `AFTERHANDPLAY` enum is interacted with.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/score_4.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"jwyk"},"content":"4. `Score` rounds the final score using `calculateFinalScore()` and returns the final `long` value to `Round`.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/score_5.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"jwyk"},"content":"#### Overall Sequence Diagram for Score Calculation","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"flyingapricot"},"content":"![](dg_images/overall_scoring.png)","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"flyingapricot"},"content":"## Implementation","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"flyingapricot"},"content":"### Logic Flow","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"flyingapricot"},"content":"The application\u0027s logic flow is divided into several parts:","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"flyingapricot"},"content":"1. **Initialization**: The application initializes core components and prepares the user interface.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"flyingapricot"},"content":"2. **Gameplay**: Users interact with the UI to perform actions, triggering methods in the core logic.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"flyingapricot"},"content":"3. **Round Progression**: Ante handling and deck operations are updated between rounds.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"flyingapricot"},"content":"4. **Evaluation**: Poker hands are evaluated using the `PokerHand` class.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"flyingapricot"},"content":"### Overview","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"flyingapricot"},"content":"The Javatro application consists of several packages:","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"jwyk"},"content":"- `javatro`: The main entry point and application setup.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"jwyk"},"content":"- `core`: Core logic, including card handling, ante management, and game rules.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"jwyk"},"content":"- `display`: User interface handling, including screens and rendering.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"jwyk"},"content":"- `manager`: Management of different game states and transitions.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"flyingapricot"},"content":"### Key Components","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"flyingapricot"},"content":"- `Javatro`: Initializes and starts the application.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"flyingapricot"},"content":"- `JavatroCore`: Handles core game logic such as dealing cards, evaluating hands, and managing ante.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"flyingapricot"},"content":"- `Deck`: Manages the deck of cards, shuffling, drawing, etc.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"flyingapricot"},"content":"- `Ante`: Handles the ante mechanism, score calculation, and progression through rounds.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"flyingapricot"},"content":"- `PokerHand`: Handles poker-specific card evaluation.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"flyingapricot"},"content":"### Important Methods","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"flyingapricot"},"content":"- `main()`: Initializes the application.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"flyingapricot"},"content":"- `initialize()`: Sets up core components.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"flyingapricot"},"content":"- `playRound()`: Manages the game round progression.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"flyingapricot"},"content":"- `draw()`: Draws a card from the deck.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"flyingapricot"},"content":"- `shuffle()`: Shuffles the deck.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"flyingapricot"},"content":"- `getRoundScore()`: Retrieves the score for the current round.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"flyingapricot"},"content":"- `nextRound()`: Progresses to the next round.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"flyingapricot"},"content":"- `evaluateHand()`: Evaluates a set of cards according to poker rules.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"flyingapricot"},"content":"## Documentation, logging, testing, configuration, dev-ops","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"flyingapricot"},"content":"### Documentation","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"flyingapricot"},"content":"The documentation is structured as follows:","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"flyingapricot"},"content":"- **User Guide**: Located at `docs/UserGuide.md`. Describes how to set up and use the application.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"flyingapricot"},"content":"- **Developer Guide**: Located at `docs/DeveloperGuide.md`. Contains design explanations, architecture, and implementation details.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":502,"author":{"gitId":"flyingapricot"},"content":"- **API Documentation**: Generated using Javadoc. To generate, run:","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":503,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":504,"author":{"gitId":"flyingapricot"},"content":"```","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":505,"author":{"gitId":"flyingapricot"},"content":"./gradlew javadoc","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":506,"author":{"gitId":"flyingapricot"},"content":"```","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":507,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":508,"author":{"gitId":"flyingapricot"},"content":"Output will be available under `build/docs/javadoc/`.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":509,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":510,"author":{"gitId":"jwyk"},"content":"### Testing","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":511,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":512,"author":{"gitId":"jwyk"},"content":"The testing follows the main Javatro package structure, as shown below:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":513,"author":{"gitId":"jwyk"},"content":"- `core`: Tests written for core logic, including card handling, ante management, and game rules.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":514,"author":{"gitId":"jwyk"},"content":"- `round`: Tests written for round logic, including round sanity checks.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":515,"author":{"gitId":"jwyk"},"content":"- `display`: Tests written for checking screens rendering correctly and in the right sequence.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":516,"author":{"gitId":"jwyk"},"content":"- `manager`: Tests written for monitoring game states after each action is played.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":517,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":518,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":519,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":520,"author":{"gitId":"flyingapricot"},"content":"## Appendix: Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":521,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":522,"author":{"gitId":"flyingapricot"},"content":"## Product Scope","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":523,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":524,"author":{"gitId":"flyingapricot"},"content":"### Target user profile:","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":525,"author":{"gitId":"flyingapricot"},"content":"- Card game enthusiasts and roguelike fans who enjoy strategic deck-building experiences and prefer playing games in a command-line interface (CLI) environment.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":526,"author":{"gitId":"flyingapricot"},"content":"- Tech-savvy individuals who are comfortable with command-line interfaces and prefer typing commands over using graphical user interfaces.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":527,"author":{"gitId":"flyingapricot"},"content":"- Roguelike and card game enthusiasts who enjoy strategic, turn-based gameplay and have an interest in card games, particularly those with roguelike elements.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":528,"author":{"gitId":"flyingapricot"},"content":"- Minimalist gamers who appreciate minimalist design and are drawn to text-based gaming experiences that focus on gameplay depth rather than visual aesthetics.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":529,"author":{"gitId":"flyingapricot"},"content":"- Cross-platform users who use various operating systems and seek a consistent gaming experience across platforms, which a CLI application can provide.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":530,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":531,"author":{"gitId":"flyingapricot"},"content":"### Value proposition: ","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":532,"author":{"gitId":"flyingapricot"},"content":"Javatro provides a streamlined, text-based roguelike deck-building experience inspired by Balatro. It offers a strategic and replayable poker-based gameplay loop in a lightweight, no-graphics format, making it accessible for users who enjoy card games without requiring a graphical interface.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":534,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":536,"author":{"gitId":"flyingapricot"},"content":"**Priorities:** High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":537,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":538,"author":{"gitId":"flyingapricot"},"content":"| Priority | User Role       | User Story                                                                                        |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":539,"author":{"gitId":"flyingapricot"},"content":"|----------|-----------------|---------------------------------------------------------------------------------------------------|","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":540,"author":{"gitId":"flyingapricot"},"content":"| * * *    | New Player      | I want to start a new game so that I can begin a new deck-building run.                           |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":541,"author":{"gitId":"flyingapricot"},"content":"| * * *    | Active Player   | I want to play a hand of poker using my cards so that I can progress in the game.                 |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":542,"author":{"gitId":"flyingapricot"},"content":"| * * *    | Active Player   | I want to discard and redraw a limited number of cards so that I can improve my current hand.     |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":543,"author":{"gitId":"flyingapricot"},"content":"| * * *    | Active Player   | I want to see my score and chips after playing a hand so that I can keep track of my progress.    |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":544,"author":{"gitId":"flyingapricot"},"content":"| * * *    | Active Player   | I want to earn multipliers based on the poker hand I complete so that I can maximize my score.    |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":545,"author":{"gitId":"flyingapricot"},"content":"| * * *    | New Player      | I want to view instructions so that I can understand how to play the game.                        |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":546,"author":{"gitId":"flyingapricot"},"content":"| * * *    | Active Player   | I want to save my progress so that I can resume the game later.                                   |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":547,"author":{"gitId":"flyingapricot"},"content":"| * * *    | Active Player   | I want to load a saved game so that I can continue my progress.                                   |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":548,"author":{"gitId":"flyingapricot"},"content":"| * *      | Active Player   | I want to sort my cards by rank or suit so that I can better organize my hand.                    |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":549,"author":{"gitId":"flyingapricot"},"content":"| * *      | Active Player   | I want to view game statistics so that I can track my performance over multiple runs.             |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":550,"author":{"gitId":"flyingapricot"},"content":"| * *      | Advanced Player | I want to enable advanced features so that I can enjoy a more complex gameplay experience.        |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":551,"author":{"gitId":"flyingapricot"},"content":"| * *      | Player          | I want to view a help menu so that I can learn more about the available commands.                 |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":552,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to customize gameplay settings so that I can tailor the game experience to my preferences. |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":553,"author":{"gitId":"flyingapricot"},"content":"| *        | Advanced Player | I want to use additional deck types so that I can have a varied experience.                       |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":554,"author":{"gitId":"flyingapricot"},"content":"| *        | Advanced Player | I want to enable hard mode so that I can increase the difficulty of the game.                     |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":555,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to view my progress summary after each run so that I can evaluate my performance.          |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":556,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to undo my last move so that I can correct mistakes.                                       |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":557,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to replay previous rounds so that I can refine my strategies.                              |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":558,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to set a high score target so that I can challenge myself.                                 |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":559,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to compare my score with other players so that I can see where I stand.                    |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":560,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to pause the game so that I can take breaks when necessary.                                |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":561,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to change controls so that I can personalize the game experience.                          |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":562,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to view a log of previous moves so that I can analyze my strategies.                       |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":563,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to restart the game so that I can try different strategies.                                |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":564,"author":{"gitId":"flyingapricot"},"content":"| *        | Active Player   | I want to adjust volume settings so that I can control the audio experience.                      |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":565,"author":{"gitId":"flyingapricot"},"content":"| *        | Advanced Player | I want to customize card designs so that I can enhance my visual experience.                      |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":566,"author":{"gitId":"flyingapricot"},"content":"| *        | Advanced Player | I want to view daily challenges so that I can have new objectives to pursue.                      |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":567,"author":{"gitId":"flyingapricot"},"content":"| *        | Advanced Player | I want to participate in weekly events so that I can earn special rewards.                        |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":568,"author":{"gitId":"flyingapricot"},"content":"| *        | Advanced Player | I want to access leaderboards so that I can compare my performance globally.                      |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":569,"author":{"gitId":"flyingapricot"},"content":"| *        | Advanced Player | I want to unlock achievements so that I can track my milestones.                                  |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":570,"author":{"gitId":"flyingapricot"},"content":"| *        | Advanced Player | I want to review past games so that I can learn from my mistakes.                                 |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":571,"author":{"gitId":"flyingapricot"},"content":"| *        | Advanced Player | I want to export my progress so that I can preserve my achievements.                              |","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":572,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":573,"author":{"gitId":"flyingapricot"},"content":"## Use Cases","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":574,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":575,"author":{"gitId":"flyingapricot"},"content":"(For all use cases below, the **System** is the `Javatro` and the **Actor** is the `User`, unless specified otherwise)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":576,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":577,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":578,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":579,"author":{"gitId":"flyingapricot"},"content":"### Use case: Discard and Draw Cards","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":580,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":581,"author":{"gitId":"flyingapricot"},"content":"**MSS (Main Success Scenario)**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":582,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":583,"author":{"gitId":"flyingapricot"},"content":"1. User requests to view their current hand.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":584,"author":{"gitId":"flyingapricot"},"content":"2. System displays the current hand of cards.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":585,"author":{"gitId":"jwyk"},"content":"   1. Use case ends.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":586,"author":{"gitId":"flyingapricot"},"content":"3. User selects cards to discard.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":587,"author":{"gitId":"jwyk"},"content":"   1. The user selects invalid cards for discarding.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":588,"author":{"gitId":"jwyk"},"content":"      1. System shows an error message.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":589,"author":{"gitId":"jwyk"},"content":"      2. Use case resumes at step 2.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":590,"author":{"gitId":"flyingapricot"},"content":"4. System removes the selected cards and draws new cards to replace them.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":591,"author":{"gitId":"flyingapricot"},"content":"5. System displays the updated hand.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":592,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":593,"author":{"gitId":"flyingapricot"},"content":"Use case ends.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":594,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":595,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":596,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":597,"author":{"gitId":"flyingapricot"},"content":"### Use case: Save Game Progress","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":598,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":599,"author":{"gitId":"flyingapricot"},"content":"**MSS (Main Success Scenario)**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":600,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":601,"author":{"gitId":"flyingapricot"},"content":"1. User requests to save the game.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":602,"author":{"gitId":"flyingapricot"},"content":"2. System serializes the current game state.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":603,"author":{"gitId":"flyingapricot"},"content":"3. System saves the serialized data to a file.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":604,"author":{"gitId":"jwyk"},"content":"   1. The file cannot be created or written.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":605,"author":{"gitId":"jwyk"},"content":"      1. System shows an error message indicating failure to save.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":606,"author":{"gitId":"jwyk"},"content":"      2. Use case ends.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":607,"author":{"gitId":"flyingapricot"},"content":"4. System confirms that the game has been successfully saved.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":608,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":609,"author":{"gitId":"flyingapricot"},"content":"Use case ends.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":610,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":611,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":612,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":613,"author":{"gitId":"flyingapricot"},"content":"### Use case: Load Saved Game","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":614,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":615,"author":{"gitId":"flyingapricot"},"content":"**MSS (Main Success Scenario)**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":616,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":617,"author":{"gitId":"flyingapricot"},"content":"1. User requests to load a previously saved game.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":618,"author":{"gitId":"flyingapricot"},"content":"2. System presents a list of available saved game files.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":619,"author":{"gitId":"jwyk"},"content":"   1. No saved game files are found.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":620,"author":{"gitId":"jwyk"},"content":"      1. Use case ends.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":621,"author":{"gitId":"flyingapricot"},"content":"3. User selects a saved game file to load.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":622,"author":{"gitId":"flyingapricot"},"content":"4. System reads the file and deserializes the game state.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":623,"author":{"gitId":"jwyk"},"content":"   1. The selected file is corrupted or incompatible.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":624,"author":{"gitId":"jwyk"},"content":"      1. System shows an error message.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":625,"author":{"gitId":"jwyk"},"content":"      2. Use case ends.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":626,"author":{"gitId":"flyingapricot"},"content":"5. System initializes the game to the loaded state.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":627,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":628,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":629,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":630,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":631,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":632,"author":{"gitId":"flyingapricot"},"content":"### Performance Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":633,"author":{"gitId":"flyingapricot"},"content":"- The system should be able to process user commands and update the game state within **0.5 seconds** of user input.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":634,"author":{"gitId":"flyingapricot"},"content":"- The system should support a **minimum of 1000 hands played** without noticeable performance degradation.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":635,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":636,"author":{"gitId":"flyingapricot"},"content":"### Reliability Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":637,"author":{"gitId":"flyingapricot"},"content":"- The game should **not crash or produce errors** during normal gameplay for at least **20 hours of continuous use**.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":638,"author":{"gitId":"flyingapricot"},"content":"- Saved game data must be **correctly serialized and deserialized** to ensure that saved progress is accurately restored.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":639,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":640,"author":{"gitId":"flyingapricot"},"content":"### Availability Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":641,"author":{"gitId":"flyingapricot"},"content":"- The application should be available **99.9% of the time** when executed on a compatible platform.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":642,"author":{"gitId":"flyingapricot"},"content":"- Saved games should remain accessible even after **abrupt termination of the application**.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":643,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":644,"author":{"gitId":"flyingapricot"},"content":"### Usability Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":645,"author":{"gitId":"flyingapricot"},"content":"- The system should provide **clear and concise error messages** when invalid commands are entered.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":646,"author":{"gitId":"flyingapricot"},"content":"- The CLI interface should support **standard text-based commands** and provide detailed help instructions.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":647,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":648,"author":{"gitId":"flyingapricot"},"content":"### Security Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":649,"author":{"gitId":"flyingapricot"},"content":"- Saved game files should be protected from **unauthorized modification** by ensuring **read-only access** unless within the game environment.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":650,"author":{"gitId":"flyingapricot"},"content":"- The system should prevent **malformed input** from causing crashes or corrupting game data.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":651,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":652,"author":{"gitId":"flyingapricot"},"content":"### Portability Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":653,"author":{"gitId":"flyingapricot"},"content":"- The game should be compatible with **Windows, Linux, and MacOS**.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":654,"author":{"gitId":"flyingapricot"},"content":"- The system should work on **both 32-bit and 64-bit architectures**.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":655,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":656,"author":{"gitId":"flyingapricot"},"content":"### Maintainability Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":657,"author":{"gitId":"flyingapricot"},"content":"- The codebase should maintain a **test coverage of at least 90%** to ensure robustness against changes.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":658,"author":{"gitId":"flyingapricot"},"content":"- The architecture should allow for **adding new game rules and features with minimal modification to existing code**.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":659,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":660,"author":{"gitId":"flyingapricot"},"content":"### Scalability Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":661,"author":{"gitId":"flyingapricot"},"content":"- The game should support **future expansion** to include additional game modes or card types without requiring a complete rewrite of the core system.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":662,"author":{"gitId":"flyingapricot"},"content":"- The system should handle **at least 10 concurrent games** if implemented in a multiplayer environment.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":663,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":664,"author":{"gitId":"flyingapricot"},"content":"### Documentation Requirements","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":665,"author":{"gitId":"flyingapricot"},"content":"- Comprehensive documentation should be available for:","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":666,"author":{"gitId":"flyingapricot"},"content":"  - **Installation and setup**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":667,"author":{"gitId":"flyingapricot"},"content":"  - **Gameplay instructions**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":668,"author":{"gitId":"flyingapricot"},"content":"  - **Developer guides** with architecture diagrams and explanations.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":669,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":670,"author":{"gitId":"flyingapricot"},"content":"### Glossary","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":671,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":672,"author":{"gitId":"jwyk"},"content":"**Ante**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":673,"author":{"gitId":"jwyk"},"content":"A stage of a run. Each run is divided into multiple antes (usually eight),","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":674,"author":{"gitId":"jwyk"},"content":"with each ante consisting of several rounds ( 3 blinds per ante) that you must clear to progress. As the","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":675,"author":{"gitId":"jwyk"},"content":"antes increase, the score to beat also progressively increases.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":676,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":677,"author":{"gitId":"jwyk"},"content":"**Blind**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":678,"author":{"gitId":"jwyk"},"content":"A round within an ante where you must score enough points (chips) to beat the challenge. There are three types:","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":679,"author":{"gitId":"jwyk"},"content":"- **Small Blind**: The first round; you can skip or play it.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":680,"author":{"gitId":"jwyk"},"content":"- **Big Blind**: The second round; you can skip or play it.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":681,"author":{"gitId":"jwyk"},"content":"- **Boss Blind**: The final round of an ante with a unique, often restrictive challenge. This round cannot be skipped.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":682,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":683,"author":{"gitId":"jwyk"},"content":"**Chips**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":684,"author":{"gitId":"jwyk"},"content":"Points earned from playing a hand.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":685,"author":{"gitId":"jwyk"},"content":"Each hand’s chip value is calculated from the cards played and later multiplied by a multiplier.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":686,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":687,"author":{"gitId":"jwyk"},"content":"**Multiplier**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":688,"author":{"gitId":"jwyk"},"content":"A factor that increases your hand’s chip score.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":689,"author":{"gitId":"jwyk"},"content":"Multipliers can be raised through various effects, most notably by equipping Joker cards and obtaining Planet Cards.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":690,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":691,"author":{"gitId":"jwyk"},"content":"**Joker**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":692,"author":{"gitId":"jwyk"},"content":"Special cards that reside in your “Joker slots” (up to five by default) and grant passive effects.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":693,"author":{"gitId":"jwyk"},"content":"These effects may add chips, boost multipliers, or modify how hands are scored.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":694,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":695,"author":{"gitId":"jwyk"},"content":"**Playing Cards**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":696,"author":{"gitId":"jwyk"},"content":"The standard cards (initially a 52-card deck) that form the basis of every hand.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":697,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":698,"author":{"gitId":"jwyk"},"content":"**Planet Cards**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":699,"author":{"gitId":"jwyk"},"content":"Upgrades specific poker hand types by increasing their base chip value and multiplier.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":700,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":701,"author":{"gitId":"jwyk"},"content":"**Discard**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":702,"author":{"gitId":"jwyk"},"content":"A limited resource per round that lets you exchange unwanted cards from your hand.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":703,"author":{"gitId":"jwyk"},"content":"Managing discards is crucial for optimizing your hand.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":705,"author":{"gitId":"jwyk"},"content":"**Hand Size**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":706,"author":{"gitId":"jwyk"},"content":"The number of cards drawn at the start of each round. It determines your options for forming poker hands.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":707,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":708,"author":{"gitId":"jwyk"},"content":"**Hands**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":709,"author":{"gitId":"jwyk"},"content":"The number of times you can play cards during a round (similar to “lives”).","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":710,"author":{"gitId":"jwyk"},"content":"If you run out of hands before meeting the blind’s score, the run ends.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":711,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":712,"author":{"gitId":"jwyk"},"content":"**Run**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":713,"author":{"gitId":"jwyk"},"content":"A complete play session. A run ends when you fail an ante or successfully clear the final Boss Blind.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":714,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":715,"author":{"gitId":"jwyk"},"content":"---","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"swethacool":92,"Markneoneo":149,"flyingapricot":305,"K-J-Q":55,"-":21,"jwyk":93}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"# Javatro","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"![Javatro Logo.png](javatro_logo.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"Javatro is a command-line card game inspired by Balatro. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"It is designed to be played via a Command Line Interface (CLI) and features multiple deck options, ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"unique scoring mechanisms, and strategic gameplay.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" ---","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"Documentation:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"Project Portfolio Pages:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"* [Mark Neo Qi Hao](team/markneoneo.md)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"* [John Woo Yi Kai](team/jwyk.md)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"* [Neeraj Kumbar]()","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"* [Kwa Jian Quan](team/k-j-q.md)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"* [Saravanan Swetha]()","lastModifiedDate":"2025-04-06","isFullCredit":false}],"authorContributionMap":{"Markneoneo":16,"-":5}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"# Javatro User Guide","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"**Javatro** is a command-line card game inspired by **Balatro**. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"It is designed to be played via a _Command Line Interface (CLI)_ and features multiple deck options, unique scoring mechanisms, and strategic gameplay. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"This guide explains the features, commands, and game flow to help you master Javatro.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"## Table of Contents","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"- [1. Introduction](#introduction)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"- [2. Quick Start](#quick-start)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"- [3. Features](#features)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    - [3.1 Main Menu](#main-menu)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    - [3.2 Selecting a Run](#selecting-a-run)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"    - [3.3 Selecting a Deck](#selecting-a-deck)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    - [3.4 Choosing a Blind](#choosing-a-blind)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    - [3.5 Game Interface](#game-interface)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    - [3.6 Playing Cards](#playing-cards)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    - [3.7 Discarding Cards](#discarding-cards)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    - [3.8 Viewing the Deck](#viewing-the-deck)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    - [3.9 Viewing Poker Hands](#viewing-poker-hands)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    - [3.10 Winning a Small / Large Blind](#winning-a-small--large-blind)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    - [3.11 Winning a Boss Blind](#winning-a-boss-blind)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    - [3.12 Winning the Game](#winning-the-game)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    - [3.13 Losing the Game](#losing-the-game)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    - [3.14 Help Menu](#help-menu)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"- [4. Gameplay Flow](#gameplay-flow)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"- [5. FAQs](#faqs)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"- [6. Known Issues](#known-issues)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    - [6.1 Terminal Window Behaviour](#terminal-window-behavior)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    - [6.2 Exiting the Game Mid-Move](#exiting-the-game-mid-move)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    - [6.3 Editing the Save File Manually](#editing-the-save-file-manually)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"- [7. Glossary](#glossary)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"- [8. Acknowledgements](#acknowledgements)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"**Javatro** is a strategic card game combining poker mechanics with roguelike elements. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"Build high-scoring poker hands, leverage unique deck abilities, and defeat challenging blinds to progress through rounds.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"The _objective_ of the game is to score the highest points by creating valid poker hands from the cards dealt. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"It adds a layer of complexity with various deck types and special mechanics, making it a unique experience.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"Before you begin, ensure you have **Java 17** installed.  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"_Javatro has **audio** implemented. Turn up your volume for the best experience!_","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"1. **Installation:**","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    - Download the `javatro.jar` file from the [latest release](https://github.com/AY2425S2-CS2113-W13-1/tp/releases/tag/release-v2.1) of Javatro.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    - Open your preferred terminal in Fullscreen.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    - Run the game using one of these commands:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"      ```bash","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"      java -Dfile.encoding\u003dUTF-8 -jar javatro.jar","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"      java \"-Dfile.encoding\u003dUTF-8\" -jar javatro.jar","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"      ```","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"2. **Navigation:**","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    - Use on-screen numbered options to navigate.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"    - For example, enter `1` to start a new game or `4` to exit in the main menu.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"*Tip:* If you enter an invalid command, Javatro will display an informative error message.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"*Note:* If you change your terminal window size when using the program, there may be UI errors. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"See: [Terminal Window Behaviour](#terminal-window-behavior)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"## Features","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"_This section details the various screens and features available in Javatro._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"### Main Menu","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"![Main Menu Screen](ug_images/main_menu.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"Players will be shown the **Javatro Main Menu** whenever they boot up the game or select `Main Menu`.  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"_Javatro Music Theme will begin playing._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"- `1. Start a Run`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"- `2. Help Menu`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"- `3. Exit Game`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"_Enter `1` to continue an existing run or start a new one.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"Enter `2` to see helpful information about Javatro.   ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"Enter `3` to exit the game._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"### Selecting a Run","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"![No Saves](ug_images/no_save.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"When launching Javatro for the _first time_, if **no saved game runs exist**, ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"players will be prompted to _start a new game run_ immediately.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"If the player has _existing saved runs_, the game will take you to the **Run Select Menu**, ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"where they can manage and continue their game progress. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"![Run Select Menu](ug_images/run_select.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"The **Run Select Menu** shows information about the _currently selected run_. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"Players can browse through their saved runs using the available navigation options.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"#### Information Provided:","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"- Round count _(how many rounds have been played)_","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"- Total score accumulated ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"- Remaining hands and discards ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"- Current ante count ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"- Type of blind ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"- Wins/Losses recorded in this run ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"- Deck type used in the run","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"- `1. Continue Run #X`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"- `2. View Next Run`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"- `3. View Previous Run`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"- `4. View List of Runs`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"- `5. Start New Game`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"_Enter `1` to continue the currently displayed run.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"Enter `2` to view the next run in the saved run list.   ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"Enter `3` to view the previous run.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"Enter `4` to view the full list of saved runs.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"Enter `5` to start a new game run._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"![Run List](ug_images/run_list.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"If the player has multiple saved runs, selecting the `View List of Runs` option will display the **entire list** of saved runs.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"Players can then select a **specific run** to _inspect or continue_, avoiding the need to click through runs one-by-one.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"_This feature is especially helpful for players managing many game sessions._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"### Selecting a Deck","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"![Deck Selection](ug_images/deck_select.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":" ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"After selecting `Start New Game`, players will be prompted to choose from various decks to use at the start of every run.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"**Decks** contain playing cards that are key to forming poker hands. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"_Each deck has different effects with unique rules or bonuses._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"| Deck                | Effect                                                       |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"|---------------------|--------------------------------------------------------------|","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"| `1. Red Deck`       | Grants the player one additional **discard** per round       |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"| `2. Blue Deck`      | Grants the player one additional **hand** per round          |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"| `3. Checkered Deck` | Starts with 26 **Hearts** and 26 **Spades**                  |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"| `4. Abandoned Deck` | Removes all **face** cards (King, Queen, Jack) from the deck |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"_Enter `1`, `2`, `3` or `4` to select your deck._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"### Choosing a Blind","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"![Blind Selection](ug_images/blind_menu.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"After selecting a deck, players are prompted to select a **Blind**.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"Blinds are the main obstacle that the player must overcome in Javatro. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"For each round, the player has to get enough score to beat the Blind, losing the game otherwise. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"_Defeating the Blind will award the player with rewards._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"An **Ante** is made up of three Blinds in succession: a Small Blind, a Large Blind, and a random Boss Blind. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"swethacool"},"content":"The Small and Big Blinds are optional in the gameplay.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"swethacool"},"content":"_However the Boss Blind must always be played and cannot be skipped._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"The score required by a certain Blind is determined by the Ante level. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"Players start at Ante 1 and go up a level for every Boss Blind defeated, ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"and can win the game by beating the last level of a run, at Ante 8.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"#### Information Provided:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"| Blind Type  | Target Score                     |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"|-------------|----------------------------------|","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"| Small Blind | A **low** score requirement      |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"| Large Blind | A **moderate** score requirement |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"| Boss Blind  | A **high** score requirement     |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"- `1. Accept Blind`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"- `2. Reject Blind`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"_Enter `1` to accept the current blind and proceed to the game, ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"swethacool"},"content":"or `2` to reject the current blind and progress to the next one._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"### Game Interface","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"![Game Screen](ug_images/small_blind.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"After selecting `Accept Blind` or `Continue Run`, players will be shown the main **Javatro game interface** and dealt cards at the start of each round.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"To **defeat a blind**, the player must select cards from their hand to play poker hands and score chips. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"_A given number of discards are available to assist with creating better hands._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"Upon reaching the score requirement, the round ends and the player receives rewards.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"#### Information Provided:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"| Blind Information                                          |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"|------------------------------------------------------------|","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"| Blind Name _(Boss Blinds will have unique names)_          |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"| Blind Description _(Boss Blinds will have unique effects)_ |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"| Score Information                     | Round Information                    | Gameplay Information                   |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"|---------------------------------------|--------------------------------------|----------------------------------------|","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"| Score required to \u003cbr/\u003e win the blind | Current Ante count                   | Current Round count                    |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"| Total score earned \u003cbr/\u003ein this round | Number of Hands\u003cbr/\u003e player has left | Number of Discards\u003cbr/\u003eplayer has left |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"| Passive Information          | Holding Hand                      |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"|------------------------------|-----------------------------------|","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"| Name of Deck in use          | Cards that are available for play |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"| List of active Joker effects | Cards that are available for play |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"- `1. Play Cards`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"- `2. Discard Cards`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"- `3. View Poker Hands`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"- `4. View Deck`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"- `5. Main Menu`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"- `6. Exit Game`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"_Enter a number from `1` to `6` to make a gameplay action._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"### Playing Cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"**_Sorted by Suit_**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"![Play Card Screen](ug_images/play_card_suit.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"After selecting `Play Cards`, the player is directed to the **Play Cards Menu**.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"Players are able to _select_ and _play_ cards to form valid poker hands. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"**Sorting options** are also provided to help arrange cards effectively before making a selection.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"- `1. Select Cards` - Choose cards you wish to **play** from your current hand.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"- `2. Sort cards by Suit` - Rearranges your cards based on their **suit** _(Spades, Hearts, Clubs, Diamonds)_.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"- `3. Sort cards by Rank` - Rearranges your cards based on their **rank** _(Ace, King, ..., 3, 2)._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"- `4. View Poker Hands` - Display possible **poker hands** you can form with your current cards.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"- `5. View Deck` - Shows all the remaining cards in the **deck**.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"- `6. Return To Game` - Go back to the **main game interface** without making any changes.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"_Enter a number from `1` to `6` to make a gameplay action._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"After selecting `1. Select Cards`, the player will be prompted to input the indices of the cards they wish to play.  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"_The player will no longer be able to return to the game interface at this point!_  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"_The input indices have to be comma-separated (as shown below)._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"![](ug_images/played_card.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"After entering the card indices, the game will show the **cards** the player has chosen to play, ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"as well as the **poker hand** that has been formed.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"### Discarding Cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"Markneoneo"},"content":"**_Sorted by Rank_**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"Markneoneo"},"content":"![Discard Card Screen](ug_images/discard_card_rank.png)  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"Markneoneo"},"content":"After selecting `Discard Cards`, the player is directed to the **Discard Cards Menu**.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"Player can _strategize_ and make preparations by _discarding_ unwanted cards, ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"allowing them to possibly form better poker hands by _redrawing_ new cards.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"- `1. Select Cards` - Choose cards you wish to **discard** from your current hand.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"- `2. Sort cards by Suit` - Rearranges your cards based on their **suit** _(Spades, Hearts, Clubs, Diamonds)_.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"- `3. Sort cards by Rank` - Rearranges your cards based on their **rank** _(Ace, King, ..., 3, 2)._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"- `4. View Poker Hands` - Display possible **poker hands** you can form with your current cards.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"Markneoneo"},"content":"- `5. View Deck` - Shows all the remaining cards in the **deck**.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"Markneoneo"},"content":"- `6. Return To Game` - Go back to the **main game interface** without making any changes.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"Markneoneo"},"content":"_Enter a number from `1` to `6` to make a gameplay action._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"Markneoneo"},"content":"After selecting `1. Select Cards`, the player will be prompted to input the indices of the cards they wish to discard.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"Markneoneo"},"content":"_The player will no longer be able to return to the game interface at this point!_  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"Markneoneo"},"content":"_The input indices have to be comma-separated (as shown below)._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"![](ug_images/discarded_card.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"After entering the card indices, the game will show the **cards** the player has chosen to discard.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"### Viewing the Deck","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"![Deck View Screen](ug_images/deck_view.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"Markneoneo"},"content":"After selecting `View Deck`, players are directed to the **Deck Viewer**, displaying the composition of the current deck. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"Markneoneo"},"content":"It shows the distribution of cards across _suits_ and _ranks_, helping to keep track which cards remain available.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"Markneoneo"},"content":"#### Information Provided:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"Markneoneo"},"content":"- **Deck Type**: Displayed on the top left.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"Markneoneo"},"content":"- **Suits**: Spades, Hearts, Clubs, Diamonds listed _row-wise_.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"Markneoneo"},"content":"- **Ranks**: A, K, Q, J, 10, ..., 2 listed _column-wise_.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"Markneoneo"},"content":"- **Total Count**: Shows how many **cards** of each rank and suit remain.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"Markneoneo"},"content":"_Enter `1` to go back to the previous screen._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"Markneoneo"},"content":"### Viewing Poker Hands","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"Markneoneo"},"content":"![Poker Hand Screen](ug_images/poker_hand.png)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"Markneoneo"},"content":"After selecting `View Poker Hands`, players are directed to the **Poker Hand List**, which shows all the possible _poker hands_, ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"Markneoneo"},"content":"allowing the player to easily see different statistics to help them plan and optimise.  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"Markneoneo"},"content":"**Poker Hands** are sets of between one and five cards that can be played in Javatro to obtain _Chips_ and _Multi_ for scoring.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"Markneoneo"},"content":"Each hand also has a **level** that affects its potency.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"Markneoneo"},"content":"In a run, all Hands start at Level 1, and are upgraded through **Planet cards**.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"Markneoneo"},"content":"Higher tier hands _take precedence_ over lower tier hands regardless of their level or scoring.  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"Markneoneo"},"content":"**E.g.** if your played hand is K K K K 2, and all of them are diamonds, the hand will always be a _Four of a Kind_ and never a _Flush_.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"Markneoneo"},"content":"#### Information Provided:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"Markneoneo"},"content":"- **Level**: The amount of **extra stats** given to a hand _(Incremented through Planet Cards)._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"Markneoneo"},"content":"- **Poker Hands**: Listed in _descending order_ of value.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"Markneoneo"},"content":"- **Chips**: The _base chip value_ awarded for completing a hand.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"Markneoneo"},"content":"- **Multiplier (MULTI)**: The _multiplier_ applied to chips for enhanced rewards.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"Markneoneo"},"content":"- **Plays**: The _number of times_ a hand has been successfully played.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"Markneoneo"},"content":"_Enter `1` to go back to the previous screen._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"Markneoneo"},"content":"#### Poker Hand Descriptions:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"Markneoneo"},"content":"| Poker Hand          | Condition                                                                                                                    |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"Markneoneo"},"content":"|---------------------|------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"Markneoneo"},"content":"| **High Card**       | When no other hand is possible, the one highest card in your hand. Aces are counted high for this hand.                      |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"Markneoneo"},"content":"| **Pair**            | Two cards with a matching rank. Suits may differ.                                                                            |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"Markneoneo"},"content":"| **Two Pair**        | Two cards with a matching rank, and two cards with any other matching rank. Suits may differ.                                |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"Markneoneo"},"content":"| **Three of a Kind** | Three cards with a matching rank. Suits may differ.                                                                          |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"Markneoneo"},"content":"| **Straight**        | Five cards in consecutive order which are not all from the same suit. Aces can be counted high or low, but not both at once. |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"Markneoneo"},"content":"| **Flush**           | Five cards of any rank, all from a single suit.                                                                              |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"Markneoneo"},"content":"| **Full House**      | Three cards with a matching rank, and two cards with any other matching rank, with cards from two or more suits.             |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"Markneoneo"},"content":"| **Four of a Kind**  | Four cards with a matching rank. Suits may differ.                                                                           |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"Markneoneo"},"content":"| **Straight Flush**  | Five cards in consecutive order, all from a single suit.                                                                     |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"Markneoneo"},"content":"| **Royal Flush**     | An ace-high Straight Flush formed by playing A K Q J 10 of the same suit.                                                    |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"K-J-Q"},"content":"---","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"Markneoneo"},"content":"### Winning a Small / Large Blind","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"Markneoneo"},"content":"![Win Planet Card Screen](ug_images/planet_card.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"Markneoneo"},"content":"**Small and Large Blinds** have no other effects and can be _skipped_.  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"Markneoneo"},"content":"The score required is _1x base chips_ for **Small Blind**, and _1.5x base chips_ for **Large Blind**.  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"Markneoneo"},"content":"After completing a Small or Large blind successfully, players will _randomly_ receive one of the 12 available **Planet Cards**. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"Markneoneo"},"content":"**Planet Cards** level up their associated poker hand type by increasing the base value of _chips_ and _multiplier_.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"Markneoneo"},"content":"- `1. Start Next Round`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"Markneoneo"},"content":"- `2. Exit Game`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"Markneoneo"},"content":"_Enter `1` to proceed to the next blind,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"Markneoneo"},"content":"or `2` to end the current game session._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"Markneoneo"},"content":"#### Planet Card Effects:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"Markneoneo"},"content":"| Planet Card | Bonus Stats           | Poker Hand      | Base Score          |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"Markneoneo"},"content":"|-------------|-----------------------|-----------------|---------------------|","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"Markneoneo"},"content":"| Pluto       | +1 Mult and +10 Chips | High Card       | 1 Mult x 5 Chips    |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"Markneoneo"},"content":"| Mercury     | +1 Mult and +15 Chips | Pair            | 2 Mult x 10 Chips   |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"Markneoneo"},"content":"| Uranus      | +1 Mult and +20 Chips | Two Pair        | 2 Mult x 20 Chips   |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"Markneoneo"},"content":"| Venus       | +2 Mult and +20 Chips | Three of a Kind | 3 Mult x 30 Chips   |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"Markneoneo"},"content":"| Saturn      | +3 Mult and +30 Chips | Straight        | 4 Mult x 30 Chips   |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"Markneoneo"},"content":"| Jupiter     | +2 Mult and +15 Chips | Flush           | 4 Mult x 35 Chips   |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"Markneoneo"},"content":"| Earth       | +2 Mult and +25 Chips | Full House      | 4 Mult x 40 Chips   |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"Markneoneo"},"content":"| Mars        | +3 Mult and +30 Chips | Four of a Kind  | 7 Mult x 60 Chips   |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"Markneoneo"},"content":"| Neptune     | +4 Mult and +40 Chips | Straight Flush  | 8 Mult x 100 Chips  |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"Markneoneo"},"content":"| Planet X    | +3 Mult and +35 Chips | Five of a Kind  | 12 Mult x 120 Chips |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"Markneoneo"},"content":"| Ceres       | +4 Mult and +40 Chips | Flush House     | 14 Mult x 140 Chips |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"Markneoneo"},"content":"| Eris        | +3 Mult and +50 Chips | Flush Five      | 16 Mult x 160 Chips |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"K-J-Q"},"content":"---","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"Markneoneo"},"content":"### Winning a Boss Blind","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"Markneoneo"},"content":"![Boss Blind](ug_images/boss_blind.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"Markneoneo"},"content":"**Boss Blinds** are the last blind of an **Ante**, most of which require a score of _2x base chips_.  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"Markneoneo"},"content":"**Boss Blinds** have certain special effects that add difficulty to the round and are randomly selected.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"Markneoneo"},"content":"_Boss Blinds cannot be skipped._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"Markneoneo"},"content":"After successfully beating a **Boss Blind**, players receive a _random_ **Joker Card**.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"Markneoneo"},"content":"![Win Joker Screen](ug_images/joker.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"Markneoneo"},"content":"**Jokers** are special cards at the core of Javatro\u0027s gameplay. They possess _unique effects_ that can synergize, ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"Markneoneo"},"content":"and a strong combination of jokers is typically essential for the player to defeat Blinds at higher Antes.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"Markneoneo"},"content":"Instead of being included in Decks and played alongside standard cards, ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"Markneoneo"},"content":"Jokers are held in the player\u0027s _5 dedicated joker slots_, and their effects will automatically be activated during gameplay.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"flyingapricot"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"Markneoneo"},"content":"- `1. Start Next Round`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"Markneoneo"},"content":"- `2. Exit Game`","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"Markneoneo"},"content":"_Enter `1` to proceed to the next round,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"Markneoneo"},"content":"or `2` to end the current game session._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"Markneoneo"},"content":"#### Joker Effects","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"Markneoneo"},"content":"| Joker      | Effect                                                                        |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"Markneoneo"},"content":"|------------|-------------------------------------------------------------------------------|","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"Markneoneo"},"content":"| Greedy     | Played cards with ♦️ **Diamond** suit give _+3 Mult_ when scored              |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"Markneoneo"},"content":"| Lusty      | Played cards with ♥️ **Heart** suit give _+3 Mult_ when scored                |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"Markneoneo"},"content":"| Wrathful   | Played cards with ♠️ **Spade** suit give _+3 Mult_ when scored                |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"Markneoneo"},"content":"| Gluttonous | Played cards with ♣️ **Club** suit give _+3 Mult_ when scored                 |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"Markneoneo"},"content":"| Half       | _+20 Mult_ if played hand contains **3 or fewer** cards                       |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"Markneoneo"},"content":"| Scary Face | Played **face** cards give _+30 Chips_ when scored                            |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"Markneoneo"},"content":"| Abstract   | _+3 Mult_ for each **Joker** card                                             |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"Markneoneo"},"content":"| Odd Todd   | Played cards with **odd rank** give _+31 Chips_ when scored _(A, 9, 7, 5, 3)_ |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"K-J-Q"},"content":"---","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"Markneoneo"},"content":"### Winning the Game","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"Markneoneo"},"content":"![Win](ug_images/win.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"Markneoneo"},"content":"When _Ante 8_ is completed, the player **wins** the run, and is allowed to start a new one.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"Markneoneo"},"content":"_Victory Music will begin playing._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"Markneoneo"},"content":"- `1. Main Menu`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"Markneoneo"},"content":"- `2. Exit Game`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"Markneoneo"},"content":"_Enter `1` to return to the main menu,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"Markneoneo"},"content":"or `2` to end the current game session._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"Markneoneo"},"content":"### Losing the Game","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"Markneoneo"},"content":"![lose](ug_images/lose.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"Markneoneo"},"content":"If the player is unable to reach the blind\u0027s chip requirement in the allotted number of hands,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"Markneoneo"},"content":"the run is **lost**, and the player must _restart_ from Ante 1.  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"Markneoneo"},"content":"_Losing Sound Effect will begin playing._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"Markneoneo"},"content":"- `1. Main Menu`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"Markneoneo"},"content":"- `2. Exit Game`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"Markneoneo"},"content":"_Enter `1` to return to the main menu,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"Markneoneo"},"content":"or `2` to end the current game session._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"Markneoneo"},"content":"### Help Menu","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"Markneoneo"},"content":"![img_2.png](ug_images/help_menu.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"Markneoneo"},"content":"#### Menu Options:","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"swethacool"},"content":"-`[1] Game Introduction`                               ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"swethacool"},"content":"-`[2] Game Rules`                                         ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"swethacool"},"content":"-`[3] How To Play`                                        ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"swethacool"},"content":"-`[4] Tips and Tricks`","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"swethacool"},"content":"_Enter `1` to learn more about Javatro as this section gives a brief overview of the game\u0027s objective, structure, ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"swethacool"},"content":"and what makes it unique. Perfect for first-time players._  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"Markneoneo"},"content":"![](ug_images/help_intro.png)  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"Markneoneo"},"content":"_Enter `2` to understand the core rules of the game._  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"Markneoneo"},"content":"![](ug_images/help_rules.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"Markneoneo"},"content":"_Enter `3` to understand a step-by-step breakdown of gameplay mechanics._  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"Markneoneo"},"content":"![](ug_images/help_howto.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"Markneoneo"},"content":"_Enter `4` to learn more about the helpful strategies and advice for surviving longer and building a stronger deck._  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"Markneoneo"},"content":"![](ug_images/help_tips.png)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"Markneoneo"},"content":"## Gameplay Flow","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"Markneoneo"},"content":"1. **Start Game**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"Markneoneo"},"content":"   Choose to _start_ a new game, or _continue_ a previous saved run.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"Markneoneo"},"content":"2. **Select Deck**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"Markneoneo"},"content":"   Choose a deck from the available options.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"Markneoneo"},"content":"3. **Select Blind**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"Markneoneo"},"content":"    Choose a blind _(Small, Large, or Boss)_ to determine the target score for the round.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"Markneoneo"},"content":"4. **Play Hands**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"Markneoneo"},"content":"    - Choose to `Play Cards` or `Discard Cards` based on your dealt cards.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"Markneoneo"},"content":"    - `View Poker Hands` or `View Deck` to strategize and evaluate your current hand.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"Markneoneo"},"content":"    - Played cards are assessed, and points are awarded based on the hand formed.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"Markneoneo"},"content":"5. **Score \u0026 Progress**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"Markneoneo"},"content":"    Accumulate points to meet or exceed the blind level to progress.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"Markneoneo"},"content":"6. **Game End**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"Markneoneo"},"content":"   - **Win** by beating _Ante 8 Boss Blind_.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"Markneoneo"},"content":"   - **Lose** by failing to meet the required score after using up all your hands.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"Markneoneo"},"content":"   - You may _exit_ the game at any point within the game.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"Markneoneo"},"content":"   - If you exit the game while a run is currently ongoing, your progress will be _saved_.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":502,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":503,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":504,"author":{"gitId":"flyingapricot"},"content":"## FAQs","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":505,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":506,"author":{"gitId":"Markneoneo"},"content":"**Q: How do I view remaining hands/discards?**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":507,"author":{"gitId":"Markneoneo"},"content":"_A: The game screen shows `Hands: X` and `Discards: Y` in the status bar._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":508,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":509,"author":{"gitId":"Markneoneo"},"content":"**Q: What happens if I run out of hands?**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":510,"author":{"gitId":"Markneoneo"},"content":"_A: The game ends if you fail to meet the target score before exhausting your hands._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":511,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":512,"author":{"gitId":"Markneoneo"},"content":"**Q: Can I change decks mid-game?**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":513,"author":{"gitId":"Markneoneo"},"content":"_A: No, deck selection is permanent for each run. Start a new game to try different decks._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":514,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":515,"author":{"gitId":"Markneoneo"},"content":"**Q: What if I enter an invalid command?**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":516,"author":{"gitId":"Markneoneo"},"content":"_A: Javatro displays an error message to help you correct your input._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":517,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":518,"author":{"gitId":"Markneoneo"},"content":"**Q: How do i save my game progress?**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":519,"author":{"gitId":"Markneoneo"},"content":"_A: Your game progress is automatically saved whenever you finish a run or make significant progress._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":520,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":521,"author":{"gitId":"Markneoneo"},"content":"**Q: Can I delete or overwrite saved runs?**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":522,"author":{"gitId":"Markneoneo"},"content":"_A: Currently, the game does not support deleting or overwriting saved runs._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":523,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":524,"author":{"gitId":"Markneoneo"},"content":"**Q: Can I cheat or modify my saved data?**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":525,"author":{"gitId":"Markneoneo"},"content":"_A: Modifying the save file will corrupt the save data and reset your saves._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":526,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":527,"author":{"gitId":"Markneoneo"},"content":"**Q: What happens if my save file gets corrupted?**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":528,"author":{"gitId":"Markneoneo"},"content":"_A: If the game detects a corrupted save file, it will attempt to create a new one and all your progress will be wiped_","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":529,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":530,"author":{"gitId":"Markneoneo"},"content":"**Q: I exited the game halfway right after making a move. What happens to my save?**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":531,"author":{"gitId":"Markneoneo"},"content":"_A: The save will be metastable. Doing this may most likely break your save, you have been warned..._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":532,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":533,"author":{"gitId":"Markneoneo"},"content":"**Q: How do I enable or disable music in the game?**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":534,"author":{"gitId":"Markneoneo"},"content":"_A: Music is enabled by default when you start the game and cannot be disabled, it runs throughout the game._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":535,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":536,"author":{"gitId":"Markneoneo"},"content":"**Q: What happens if I exit the game while music is playing?**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":537,"author":{"gitId":"Markneoneo"},"content":"_A: If you exit the game without stopping the music, the audio thread will be forcefully terminated. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":538,"author":{"gitId":"Markneoneo"},"content":"The next time you start the game, it will reinitialize the audio system and play the default music._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":539,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":540,"author":{"gitId":"Markneoneo"},"content":"### How do I navigate through Javatro?","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":541,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":542,"author":{"gitId":"Markneoneo"},"content":"_Navigation throughout the application is done via **numbered options**. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":543,"author":{"gitId":"Markneoneo"},"content":"Selecting an option is done by entering the corresponding number._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":544,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":545,"author":{"gitId":"flyingapricot"},"content":"```","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":546,"author":{"gitId":"flyingapricot"},"content":"1. New Game","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":547,"author":{"gitId":"flyingapricot"},"content":"2. Load Game","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":548,"author":{"gitId":"flyingapricot"},"content":"3. Exit","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":549,"author":{"gitId":"flyingapricot"},"content":"```","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":550,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":551,"author":{"gitId":"Markneoneo"},"content":"_For example, in the Main Menu, enter `1` and press `Enter` to start a new game._","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":552,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":553,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":554,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":555,"author":{"gitId":"Markneoneo"},"content":"## Known Issues","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":556,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":557,"author":{"gitId":"Markneoneo"},"content":"### Terminal Window Behavior","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":558,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":559,"author":{"gitId":"Markneoneo"},"content":"**Description:**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":560,"author":{"gitId":"Markneoneo"},"content":"**Javatro**’s UI relies on consistent terminal dimensions to render ANSI graphics and other elements correctly. Two specific scenarios can cause display issues:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":561,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":562,"author":{"gitId":"Markneoneo"},"content":"1. **Resizing the Terminal Window During Execution:**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":563,"author":{"gitId":"Markneoneo"},"content":"   _Changing_ the terminal window size while the program is running can disrupt the UI layout and cause misalignment or incorrect rendering of output.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":564,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":565,"author":{"gitId":"Markneoneo"},"content":"2. **Using a Small Terminal Window:**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":566,"author":{"gitId":"Markneoneo"},"content":"   If the terminal window is _not wide enough_, lines may wrap around, distorting the intended structure of ASCII elements and making the output hard to read.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":567,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":568,"author":{"gitId":"Markneoneo"},"content":"**Recommended Solution:**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":569,"author":{"gitId":"Markneoneo"},"content":"To ensure proper UI rendering, players are advised to:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":570,"author":{"gitId":"Markneoneo"},"content":"- Use a **fullscreen terminal window** before starting the program.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":571,"author":{"gitId":"Markneoneo"},"content":"- **Avoid resizing** the terminal during program execution.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":572,"author":{"gitId":"Markneoneo"},"content":"- Ensure the terminal is **wide enough** to accommodate full-line prints without wrapping.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":573,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":574,"author":{"gitId":"Markneoneo"},"content":"Following these guidelines will help maintain the intended appearance and functionality of the **Javatro**’s UI.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":575,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":576,"author":{"gitId":"Markneoneo"},"content":"### Exiting the Game Mid-Move","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":577,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":578,"author":{"gitId":"Markneoneo"},"content":"**Description:**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":579,"author":{"gitId":"Markneoneo"},"content":"Exiting the game immediately after making a move can corrupt the save file, ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":580,"author":{"gitId":"Markneoneo"},"content":"resulting in inaccurate or invalid values within the storage system. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":581,"author":{"gitId":"Markneoneo"},"content":"When the game attempts to load the corrupted data, it may fail to function correctly or produce unintended behavior.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":582,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":583,"author":{"gitId":"Markneoneo"},"content":"**Recommended Solution:**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":584,"author":{"gitId":"Markneoneo"},"content":"To prevent this issue, players should avoid closing the game abruptly during critical operations such as card plays or menu selections. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":585,"author":{"gitId":"Markneoneo"},"content":"Always allow the game to complete its saving process before exiting. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":586,"author":{"gitId":"Markneoneo"},"content":"If the issue persists, delete the corrupted save file and start a new game.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":587,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":588,"author":{"gitId":"Markneoneo"},"content":"### Editing the Save File Manually","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":589,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":590,"author":{"gitId":"Markneoneo"},"content":"**Description:**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":591,"author":{"gitId":"Markneoneo"},"content":"Editing the save file (savefile.csv) directly will wipe all saved data. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":592,"author":{"gitId":"Markneoneo"},"content":"When the game starts, it generates a hash using the existing save data and compares it against the saved hash. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":593,"author":{"gitId":"Markneoneo"},"content":"Any modification to the save file will cause the hashes to mismatch, ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":594,"author":{"gitId":"Markneoneo"},"content":"prompting the game to delete the save file and reset progress.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":595,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":596,"author":{"gitId":"Markneoneo"},"content":"**Recommended Solution:**  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":597,"author":{"gitId":"Markneoneo"},"content":"Avoid manually modifying the save file. If you need to transfer or backup save data, copy the entire file without altering its contents. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":598,"author":{"gitId":"Markneoneo"},"content":"If editing is necessary, ensure the hashes are recalculated using the same method as the game to prevent data loss.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":599,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":600,"author":{"gitId":"flyingapricot"},"content":"---","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":601,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":602,"author":{"gitId":"flyingapricot"},"content":"## Glossary","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":603,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":604,"author":{"gitId":"Markneoneo"},"content":"**Ante**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":605,"author":{"gitId":"Markneoneo"},"content":"A stage of a run. Each run is divided into multiple antes (usually eight), ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":606,"author":{"gitId":"swethacool"},"content":"with each ante consisting of several rounds ( 3 blinds per ante) that you must clear to progress. As the ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":607,"author":{"gitId":"swethacool"},"content":"antes increase, the score to beat also progressively increases. ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":608,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":609,"author":{"gitId":"Markneoneo"},"content":"**Blind**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":610,"author":{"gitId":"Markneoneo"},"content":"A round within an ante where you must score enough points (chips) to beat the challenge. There are three types:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":611,"author":{"gitId":"swethacool"},"content":"- **Small Blind**: The first round; you can skip or play it.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":612,"author":{"gitId":"swethacool"},"content":"- **Big Blind**: The second round; you can skip or play it.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":613,"author":{"gitId":"Markneoneo"},"content":"- **Boss Blind**: The final round of an ante with a unique, often restrictive challenge. This round cannot be skipped.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":614,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":615,"author":{"gitId":"Markneoneo"},"content":"**Chips**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":616,"author":{"gitId":"Markneoneo"},"content":"Points earned from playing a hand. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":617,"author":{"gitId":"Markneoneo"},"content":"Each hand’s chip value is calculated from the cards played and later multiplied by a multiplier.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":618,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":619,"author":{"gitId":"Markneoneo"},"content":"**Multiplier**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":620,"author":{"gitId":"Markneoneo"},"content":"A factor that increases your hand’s chip score. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":621,"author":{"gitId":"Markneoneo"},"content":"Multipliers can be raised through various effects, most notably by equipping Joker cards and obtaining Planet Cards.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":622,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":623,"author":{"gitId":"Markneoneo"},"content":"**Joker**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":624,"author":{"gitId":"Markneoneo"},"content":"Special cards that reside in your “Joker slots” (up to five by default) and grant passive effects. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":625,"author":{"gitId":"Markneoneo"},"content":"These effects may add chips, boost multipliers, or modify how hands are scored. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":626,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":627,"author":{"gitId":"Markneoneo"},"content":"**Playing Cards**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":628,"author":{"gitId":"Markneoneo"},"content":"The standard cards (initially a 52-card deck) that form the basis of every hand.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":629,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":630,"author":{"gitId":"Markneoneo"},"content":"**Planet Cards**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":631,"author":{"gitId":"Markneoneo"},"content":"Upgrades specific poker hand types by increasing their base chip value and multiplier.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":632,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":633,"author":{"gitId":"Markneoneo"},"content":"**Discard**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":634,"author":{"gitId":"Markneoneo"},"content":"A limited resource per round that lets you exchange unwanted cards from your hand. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":635,"author":{"gitId":"Markneoneo"},"content":"Managing discards is crucial for optimizing your hand.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":636,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":637,"author":{"gitId":"Markneoneo"},"content":"**Hand Size**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":638,"author":{"gitId":"Markneoneo"},"content":"The number of cards drawn at the start of each round. It determines your options for forming poker hands.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":639,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":640,"author":{"gitId":"Markneoneo"},"content":"**Hands**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":641,"author":{"gitId":"Markneoneo"},"content":"The number of times you can play cards during a round (similar to “lives”). ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":642,"author":{"gitId":"Markneoneo"},"content":"If you run out of hands before meeting the blind’s score, the run ends.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":643,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":644,"author":{"gitId":"Markneoneo"},"content":"**Run**  ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":645,"author":{"gitId":"Markneoneo"},"content":"A complete play session. A run ends when you fail an ante or successfully clear the final Boss Blind.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":646,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":647,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":649,"author":{"gitId":"flyingapricot"},"content":"## Acknowledgements","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":650,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24","isFullCredit":false},{"lineNumber":651,"author":{"gitId":"Markneoneo"},"content":"- Javatro game concept is inspired by **Balatro**, a roguelike deck builder game developed by _LocalThunk_ and published by _Playstack_.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":652,"author":{"gitId":"Markneoneo"},"content":"- **Javatro Music:** _Balatro - Complete Original Soundtrack (Official), Composed by LouisF._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":653,"author":{"gitId":"Markneoneo"},"content":"- **Winning Music:** _We Are the Champions, Song by Queen - 1977._","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":654,"author":{"gitId":"Markneoneo"},"content":"- **Losing Sound Effect:** _[Cat Laughing At You](https://youtu.be/L8XbI9aJOXk?feature\u003dshared)_","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":655,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":656,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":657,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":658,"author":{"gitId":"Markneoneo"},"content":"_**Note**: Screenshots show representative UI elements and may differ slightly in actual gameplay. ","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":659,"author":{"gitId":"Markneoneo"},"content":"All values reflect current game version v2.1._","lastModifiedDate":"2025-04-06","isFullCredit":false}],"authorContributionMap":{"Markneoneo":509,"swethacool":15,"flyingapricot":93,"K-J-Q":5,"-":34,"jwyk":3}},{"path":"docs/dg_diagrams/CardRenderer CD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"```mermaid  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"classDiagram  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"    class CardRenderer {  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"        +renderCard(Card) String[]  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"        -getSuitSymbol(Suit) String  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"        -getColour(Suit) String  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"    }  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"```  ","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"jwyk":8}},{"path":"docs/dg_diagrams/CardRenderer SD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"```mermaid  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"sequenceDiagram  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"    participant #58;GameScreen  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"    participant #58;CardRenderer  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"    participant #58;Card  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"    activate #58;UI","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"    activate #58;GameScreen","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"    #58;GameScreen-\u003e\u003e+#58;CardRenderer: renderCard(card)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"    #58;CardRenderer-\u003e\u003e#58;Card: getSuit()","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"    activate #58;Card","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"    deactivate #58;Card","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    activate #58;CardRenderer","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    #58;CardRenderer-\u003e\u003e#58;CardRenderer: getSuitSymbol() → \"H\"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    deactivate #58;CardRenderer","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    activate #58;CardRenderer","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    #58;CardRenderer-\u003e\u003e#58;CardRenderer: getColour() → ANSI code","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    deactivate #58;CardRenderer","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    #58;CardRenderer--\u003e\u003e-#58;GameScreen: [\" H \", ...]","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    #58;GameScreen-\u003e\u003e#58;UI: Display formatted card art  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    deactivate #58;GameScreen","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    deactivate #58;UI","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"```","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"jwyk":22}},{"path":"docs/dg_diagrams/Logic SD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"```mermaid","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"    participant #58;User","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"    participant #58;JavatroCore","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"    participant #58;CommandMap","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"    participant #58;Options","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"    participant #58;UI","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"    participant #58;Manager","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"    #58;User -\u003e\u003e #58;UI: Issue Command","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"    #58;UI -\u003e\u003e #58;Manager: Forward Command","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    #58;Manager -\u003e\u003e #58;JavatroCore: Process Command","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    #58;JavatroCore -\u003e\u003e #58;CommandMap: Check Command Type","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    #58;CommandMap -\u003e\u003e #58;Options: Execute Option (e.g., Sort, Discard, Select)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    #58;Options -\u003e\u003e #58;JavatroCore: Return Result","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    #58;JavatroCore -\u003e\u003e #58;Manager: Update State","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    #58;Manager -\u003e\u003e #58;UI: Render Updated State","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"```","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"jwyk":18}},{"path":"docs/dg_diagrams/Round CD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"---","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"config:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"  theme: default","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"  layout: elk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"---","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"```mermaid","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"classDiagram","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"    class Round {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"        +Round(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"        +addPropertyChangeListener(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"        +updateRoundVariables()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"        +playCards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"        +discardCards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"        +getCurrentScore()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"        +isLost()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"        +isWon()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"        +isRoundOver()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"        +getRoundName()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"        +setRoundName(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"        +getRoundDescription()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"        +setRoundDescription(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"        +getState()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"        +getConfig()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"        +getObservable()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"        +getBossType()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"        +setBossType(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"        +getDeck()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"        +getPlayedCards()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"        +getPlayedHand()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"        +setPlayerHandCards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"    class RoundState {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"        +RoundState(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"        +getCurrentScore()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"        +addScore(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"        +getRemainingDiscards()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"        +setRemainingDiscards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"        +increaseRemainingDiscards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"        +decrementDiscards()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"        +getRemainingPlays()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"        +setRemainingPlays(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        +decrementPlays()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        +getPlayerJokers()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"        +getDeck()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"        +getPlayerHand()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"        +getPlayerHandCards()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"        +setPlayerHandCards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"        +getChosenCards()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"        +setChosenCards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        +drawInitialCards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"    class RoundConfig {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"        +RoundConfig(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"        +getRoundName()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"        +setRoundName(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"        +getRoundDescription()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        +setRoundDescription(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"        +getBlindScore()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"        +getMinHandSize()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"        +setMinHandSize(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"        +getMaxHandSize()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"        +setMaxHandSize(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"        +getBossType()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"        +setBossType(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"    class RoundObservable {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"        +RoundObservable(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"        +addPropertyChangeListener(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"        +removePropertyChangeListener(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"        +updateRoundVariables(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"    class RoundActions {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"        +playCards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"        +discardCards(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"    class ActionResult {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"        +ActionResult(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"        +getCards()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"        +getPointsEarned()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"    class Deck {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"    class HeldJokers {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"    class BossType {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"        \u003c\u003cenumeration\u003e\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"        NONE","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"        THE_NEEDLE","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"        THE_WATER","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"        THE_PSYCHIC","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"    class Card {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"    class HoldingHand {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"    class PokerHand {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"    class Joker {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"    Round *-- RoundState : contains","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"    Round *-- RoundConfig : contains","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"    Round *-- RoundObservable : contains","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"    Round ..\u003e RoundActions : uses","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"    RoundActions *.. ActionResult : inner class","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"    RoundState o-- HeldJokers : contains","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"    RoundState o-- Deck : contains","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"    RoundState o-- HoldingHand : contains","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"    RoundState o-- \"0..*\" Card : contains via chosenCards","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"    RoundConfig o-- BossType : contains","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"    HoldingHand o-- \"0..*\" Card : contains via hand","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"    HeldJokers o-- \"0..*\" Joker : contains via jokers","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"    PokerHand o-- \"0..*\" Card : contains via cards","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"    RoundObservable o-- Round : references","lastModifiedDate":"2025-04-05","isFullCredit":false}],"authorContributionMap":{"K-J-Q":114}},{"path":"docs/dg_diagrams/Round SD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"# Initialise the Round","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"```mermaid","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"    actor Caller","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"    participant A as :Round","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"    participant B as config:RoundConfig","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"    participant C as state:RoundState","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"    participant E as \u003c\u003cclass\u003e\u003e BossType","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"    participant D as observable:RoundObservable","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"    Caller -\u003e\u003e A: new Round(ante, remainingPlays, deck, heldJokers, name, description)#nbsp;#nbsp;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"    Note right of A: Constructor activated","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"    A -\u003e\u003e B: new RoundConfig(...)#nbsp;#nbsp;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"    activate B","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    Note right of B: Constructor activated","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"    B --\u003e\u003e A: this.config : RoundConfig","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    deactivate B","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"    A -\u003e\u003e C: new RoundState(...)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"    activate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"    Note right of C: Constructor activated","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"    C --\u003e\u003e A: this.state : RoundState","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"    deactivate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"    A -\u003e\u003e A: applyDeckInvariants(deck)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    alt RED","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"        A -\u003e\u003e C: increaseRemainingDiscards(: int)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"        activate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"        C --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"        deactivate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"    else BLUE","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"        A -\u003e\u003e C: setRemainingPlays(: int)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"        activate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"        C --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"        deactivate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"    end","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":" ","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"    A -\u003e\u003e A: applyAnteInvariants(ante)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"    alt isBossBlind","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"        A -\u003e\u003e E: getBossType()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        activate E","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        E --\u003e\u003e A: randomBoss:BossType","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"        deactivate E","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"        A -\u003e\u003e B: setBossType(randomBoss)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"        activate B","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"        B --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"        deactivate B","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"    end","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"    A --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"    A -\u003e\u003e A: applyBossVariants()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"    alt THE_NEEDLE","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"        A -\u003e\u003e C: setRemainingPlays(1)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"        activate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        C --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"        deactivate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"    else THE_WATER","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"        A -\u003e\u003e C: setRemainingDiscards(0)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"        activate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"        C --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"        deactivate C","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"    else THE_PSYCHIC","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"        A -\u003e\u003e B: setMaxHandSize(5)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"        activate B","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"        B --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"        deactivate B","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"        A -\u003e\u003e B: setMinHandSize(5)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"        activate B","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"        B --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"        deactivate B","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"    end","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"    A --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"    A -\u003e\u003e D: new RoundObservable","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"    activate D","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"    Note right of D: Constructor activated","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"    D --\u003e\u003e A: this.observable : RoundObservable","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"    deactivate D","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"    A -\u003e\u003e A: validateParameters()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"    A --\u003e\u003e A: void","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"    A --\u003e\u003e Caller: currentRound : Round","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"```","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"# Playing Cards Flow","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"```mermaid","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"    actor Caller","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"    participant A as :Round","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"    participant B as \u003c\u003cclass\u003e\u003e RoundActions","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"    participant C as state:RoundState","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"    participant D as observable:RoundObservable","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"    Caller-\u003e\u003eA: playCards(cardIndices)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eB: playCards(C, config, cardIndices)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"    activate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"    B--\u003e\u003eA: result:ActionResult","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"    deactivate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eC: setChosenCards(result.getCards())","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"    activate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003eA: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"    deactivate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eC: addScore(result.getPointsEarned())","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"    activate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003eA: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"    deactivate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eC: decrementPlays()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"    activate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003eA: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"    deactivate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eD: updateRoundVariables(C, config)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"    activate D","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"    D--\u003e\u003eA: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"K-J-Q"},"content":"    deactivate D","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"    A--\u003e\u003eCaller: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"K-J-Q"},"content":"```","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"# Discarding Cards Flow","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"```mermaid","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"    actor Caller","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"    participant A as :Round","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"    participant B as \u003c\u003cclass\u003e\u003e RoundActions","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"    participant C as state:RoundState","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"    participant D as observable:RoundObservable","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"    Caller-\u003e\u003eA: discardCards(cardIndices)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eB: discardCards(C, config, cardIndices)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"    activate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"    B--\u003e\u003eA: result:ActionResult","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"    deactivate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eC: setChosenCards(result.getCards())","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"    activate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003eA: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"K-J-Q"},"content":"    deactivate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eC: decrementDiscards()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"    activate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003eA: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"    deactivate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eD: updateRoundVariables(C, config)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"    activate D","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"    D--\u003e\u003eA: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"    deactivate D","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"    A--\u003e\u003eCaller: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"```","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"K-J-Q"},"content":"# Checking if the Round is Won","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"K-J-Q"},"content":"```mermaid","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"K-J-Q"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"K-J-Q"},"content":"    actor Caller","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"K-J-Q"},"content":"    participant A as :Round","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"K-J-Q"},"content":"    participant C as state:RoundState","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"K-J-Q"},"content":"    participant D as observable:RoundObservable","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"K-J-Q"},"content":"    Caller-\u003e\u003eA: isWon()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eC: getCurrentScore()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"K-J-Q"},"content":"    activate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003eA: currentScore:int","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"K-J-Q"},"content":"    deactivate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eD: getBlindScore()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"K-J-Q"},"content":"    activate D","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"K-J-Q"},"content":"    D--\u003e\u003eA: blindScore:int","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"K-J-Q"},"content":"    deactivate D","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"K-J-Q"},"content":"    A--\u003e\u003eCaller: isWon:boolean","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"K-J-Q"},"content":"```","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"# Checking if the Round is Over","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"```mermaid","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"K-J-Q"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"K-J-Q"},"content":"    actor Caller","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"K-J-Q"},"content":"    participant A as :Round","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"K-J-Q"},"content":"    participant C as state:RoundState","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"K-J-Q"},"content":"    Caller-\u003e\u003eA: isRoundOver()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eC: getRemainingPlays()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"K-J-Q"},"content":"    activate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003eA: remainingPlays:int","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"K-J-Q"},"content":"    deactivate C","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003eA: isWon()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"K-J-Q"},"content":"    A--\u003e\u003eA: isWon:boolean","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"K-J-Q"},"content":"    A--\u003e\u003eCaller: isRoundOver:boolean","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"```","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"K-J-Q":197}},{"path":"docs/dg_diagrams/RoundActions SD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"```mermaid","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"    participant A as :Round","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"    participant B as \u003c\u003cclass\u003e\u003e RoundActions","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"    participant C as state:RoundState","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"    participant G as :HoldingHand","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"    participant E as \u003c\u003cclass\u003e\u003e HandResult","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"    participant D as config:RoundConfig","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"    participant F as :Score","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"    participant H as  :ActionResult","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003e+B: playCards(state, config, cardIndices)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"    activate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003eB: validatePlayCards(...)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    activate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"    B--\u003e\u003eB: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    deactivate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+C: getPlayerHand()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003e-B: playerHand:HoldingHand","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+G: play()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"    G--\u003e\u003e-B: playedCards:Card","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+E: evaluateHand(playedCards)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"    E--\u003e\u003e-B: result:PokerHand","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+D: getBossType()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    D--\u003e\u003e-B: boss:BossType","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+F: new Score(boss)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"    note right of F: Constructor activated here","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    F--\u003e\u003e-B: handScore:Score","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+F: getScore()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"    F--\u003e\u003e-B: pointsEarned:long","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+C: getPlayerHand()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003e-B: playerHand:HoldingHand","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+G: draw(...)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"    G--\u003e\u003e-B: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+H: new ActionResult()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"    note right of H: Constructor activated here","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"    H--\u003e\u003e-B: actionResult:ActionResult","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"    B--\u003e\u003eA: actionResult:ActionResult","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"    deactivate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"```","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"```mermaid","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"    participant A as :Round","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"    participant B as \u003c\u003cclass\u003e\u003e RoundActions","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"    participant C as state:RoundState","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"    participant F as :HoldingHand","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"    participant E as :ActionResult","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    A-\u003e\u003e+B: discardCards(state, config, cardIndices)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"    activate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"    activate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003eB: validateDiscardCards(...)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"    activate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"    B--\u003e\u003eB: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"    deactivate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+C: getPlayerHand()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003e-B: playerHand:HoldingHand","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+F: discard(cardIndices)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"    F--\u003e\u003e-B: discardedCards:Card","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+C: getDeck()","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"    C--\u003e\u003e-B: deck:Deck","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+F: draw(indicesToDiscard.size(), deck)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"    F--\u003e\u003e-B: void","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"    B-\u003e\u003e+E: ActionResult.forDiscard(discardedCards)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"    note right of E: Constructor activated here","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"    E--\u003e\u003e-B: actionResult:ActionResult","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"    B--\u003e\u003eA: actionResult:ActionResult","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"    deactivate B","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"    deactivate A","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"```","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"K-J-Q":73}},{"path":"docs/dg_diagrams/Score2 SD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"```mermaid","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"    activate #58;Round","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"        #58;Round-\u003e\u003e+#58;Score: getScore(PokerHand pokerHand, List\u003cCard\u003e playedCardList, HeldJokers heldJokers)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"        activate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"        #58;Score-\u003e\u003e+#58;PokerHand: getChips(), getMultiplier()","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"        #58;PokerHand--\u003e\u003e-#58;Score: return chips, return multiplier","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"        deactivate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"    deactivate #58;Round","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"```","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"jwyk":10}},{"path":"docs/dg_diagrams/Score3 SD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"```mermaid","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"    participant #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"    participant #58;Joker","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"    activate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"    loop Card card: playedCardList","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"        activate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"        #58;Score-\u003e\u003e#58;Score: Apply BossType conditions","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"        deactivate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"        alt Card is valid","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"            activate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"                #58;Score-\u003e\u003e#58;Score: scoreCard(Card card)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"            deactivate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"            loop [Joker joker: heldJokers]","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"                alt Joker \u003d\u003d ONCARDPLAY","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"                    #58;Score-\u003e\u003e+#58;Joker: interact(Score score, Card card)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"                    #58;Joker--\u003e\u003e-#58;Score: interact","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"                end","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"            end","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        end","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        deactivate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    end","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"```","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"jwyk":23}},{"path":"docs/dg_diagrams/Score4 SD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"```mermaid","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"    participant #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"    activate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"    loop Joker joker: heldJokers","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"        alt joker.ScoreType \u003d\u003d AFTERHANDPLAY","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"            #58;Score-\u003e\u003e+#58;Joker: interact(Score score, Card card)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"            #58;Joker--\u003e\u003e-#58;Score: interact","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"        end","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"    end","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    deactivate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"```","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"jwyk":13}},{"path":"docs/dg_diagrams/Score5 SD.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"```mermaid","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"sequenceDiagram","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"participant #58;Round","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"participant #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"activate #58;Round","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"    activate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"        activate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"            #58;Score-\u003e\u003e#58;Score: calculateFinalScore()","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"        deactivate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"        #58;Score--\u003e\u003e#58;Round: return final score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    deactivate #58;Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    deactivate #58;Round","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"```","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"jwyk":15}},{"path":"docs/team/jwyk.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"# John Woo Yi Kai - Project Portfolio Page","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"## Overview","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"**Javatro** is a roguelike deck-building game played via the command line, drawing inspiration from Balatro. It blends poker strategy with innovative deck mechanics, delivering a streamlined yet deeply engaging experience. With multiple deck types, escalating blind levels, and dynamic scoring systems, the game offers rich replayability and strategic depth.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"## Summary of Contributions","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"### Code Contributed","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"[Link to tP Code Dashboard](https://nus-cs2113-ay2425s2.github.io/tp-dashboard/?search\u003dmarkneoneo\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2025-02-21\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"### Features and Enhancements Implemented:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"1. **Joker System**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    - **Features**: Implemented the _Joker_ mechanic, where special effects get applied to cards or hands to enhance your overall score.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    - **Depth**:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"        - Implemented an abstract `Joker` class and related sub-classes to implement the Joker mechanic.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"        - Implemented the `HeldJokers` class to hold `Jokers` that the user has in the game.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        - Designed the system of giving each player a `Joker` card everytime a Boss Blind is won.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        - Created the `JokerFactory` class using the _Factory_ design pattern to distribute a random `Joker` card.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    - **Considerations**:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        - In Balatro, there are many types of Jokers that affect more than just affect your score - such as increasing discards or changing hand sizes. This was considered, but discarded due to time constraints for v2.0.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        - For Jokers that affect score, there are 3 main types: **+Chips**, **+Mult** and **xMult** Jokers. For Javatro, we decided to focus on the first 2 types of Jokers, as **xMult** would increase the complexity of testing for score for card positions.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        - There are 2 types of trigger effects, `ONCARDPLAY` and `AFTERHANDPLAY`. Other ways of triggering the Jokers such as \"on discard\" were considered but later disregarded as they were too complex to test.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"2. **Scoring Algorithm**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"   - **Features**: Developed the `Score` class that manages the scoring algorithm of a played hand every round, including factors such as boss-specific rules and Joker effects.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"   - **Depth**:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"     - Integrated the **Joker** and **Ante** system to work with the Scoring Algorithm ","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"3. **Deck and Cards in Hand** ","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"   - **Features**: Implemented `HoldingHand` class that manages the cards a user holds during a round, and the `Deck` holding the cards in a round.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"4. **Different Deck Types**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"   - **Features**: Implemented different deck types of **Red**, **Blue**, **Checkered** and **Abandoned** to enhance the gameplay experience for unique runs.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"   - **Depth**: ","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"     - Created different methods of instantiating deck types using a `DeckType`","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"     - Created the `DeckSelectScreen` that allows users to see the effects of each deck does before the start of a game.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"   - **Considerations**:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"     - Deck types that were related to economy such as the **Yellow** Deck were disregarded due to time constraints and over complexity of implementing a shop based system.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"     - The **Plasma** Deck was considered due to its unique scoring mechanism, but ultimately decided against as it would require a major rehaul of the `Ante` and `Score` class to calculate the target score and played hand score.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"     - Since the **Abandoned** Deck lacks face cards (K, Q, J), it was possible to run out of cards from the deck. As a result, it was the most troublesome deck to develop for. This issue was fixed by making the default _discards_ per round to **3**, thus making it impossible to run out of cards.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"### Contributions to the UG:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"- Documented Jokers and their implementation in the game.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"### Contributions to the DG:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"- Documented design and implementation of the `Score` component, including UML diagrams and sequence diagrams for respective methods.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"### Team-Based Tasks:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"- Tested and refined mechanics relating to round wins to ensure consistency and correct behaviour.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"- Collaborated to seamlessly integrate the `Score` system with key components such as `Round` and `BossType`, maintaining cohesive gameplay flow.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"- Assisted in integrating the `Score` component with the overall game flow.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"- Took initiative in team meetings to clarify doubts and plan out the objectives of the next release version.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"### Review/Mentoring Contributions:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"- Reviewed pull requests related to the scoring mechanic and provided timely feedback on how to refactor the code.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"- Kept track of and resolved bugs that popped up relating to the scoring mechanic and deck such as [#130](https://github.com/AY2425S2-CS2113-W13-1/tp/pull/130), [#118](https://github.com/AY2425S2-CS2113-W13-1/tp/pull/118) and [#84](https://github.com/AY2425S2-CS2113-W13-1/tp/pull/84).","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"jwyk":61}},{"path":"docs/team/k-j-q.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"# Kwa Jian Quan - Project Portfolio Page","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"## Overview","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"**Javatro** is a command-line roguelike deck-building game inspired by **Balatro**. It combines strategic poker-based gameplay with unique deck mechanics, offering players a minimalist yet engaging experience. The game features various deck types, blind levels, and scoring systems, providing replayability and depth.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"---","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"## Summary of Contributions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"### Code Contributions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"- [View my contributions on the tP Code Dashboard](https://nus-cs2113-ay2425s2.github.io/tp-dashboard/?search\u003dk-j-q\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2025-02-21\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"### Technical Contributions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"#### Key Classes Developed","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"1. **`Round` Class**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"   - Implemented the primary game round management system using object-oriented principles","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"   - Designed the class to follow Single Responsibility Principle by delegating specific functionality to helper classes","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"   - Created methods for tracking game state, evaluating win conditions, and applying boss-specific modifiers","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"   - Implemented proper exception handling with custom error messages for invalid game actions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"2. **`RoundState` Class**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"   - Developed a dedicated state management class to encapsulate the mutable aspects of a game round","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"   - Implemented methods for tracking scores, remaining plays/discards, and player resources","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"   - Created a clean interface for state modifications with validation","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"3. **`RoundActions` Class**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"   - Designed a utility class to handle card play and discard logic with robust validation","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"   - Implemented the ActionResult pattern to return multiple pieces of information about game actions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"   - Created validation methods that enforce game rules for card plays and discards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"4. **`RoundConfig` Class**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"   - Developed a configuration class to store game round parameters and settings","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"   - Implemented boss-type specific configurations that modify gameplay rules","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"   - Created constants and configuration methods with appropriate access modifiers","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"5. **`RoundObservable` Class**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"   - Implemented the Observer pattern to notify UI components of state changes","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"   - Created methods for registering listeners and broadcasting state updates","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"#### Comprehensive Testing","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"- **`RoundTest` Class**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"   - Created extensive unit tests covering all aspects of the Round component","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"   - Implemented tests for normal gameplay, edge cases, and error conditions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"   - Developed helper methods to reduce code duplication in tests","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"   - Achieved high test coverage for the Round component","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"- **`RoundActionsTest` Class**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"   - Developed unit tests for the RoundActions class to ensure correct card play and discard logic","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"   - Implemented tests for all possible action outcomes, including valid and invalid scenarios","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"  ","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"### Enhancements Implemented","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"#### Game Round Management","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"- **Round Structure and Flow**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"  - Developed the complete round lifecycle management system including initialization, play, discard, and completion","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"  - Implemented the `Round` class to manage the state and flow of a single game round, including configurations, scoring, and boss-specific rules","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"  - Created the `RoundState` and `RoundConfig` classes to properly separate concerns following SOLID principles","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"#### Boss Mechanics","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"- **Boss-Specific Gameplay Rules**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"  - Implemented unique gameplay modifications for different boss types:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"    - `THE_NEEDLE`: Limited plays to 1 per round","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"    - `THE_WATER`: Removed ability to discard cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"    - `THE_PSYCHIC`: Required exactly 5 cards in every hand","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"  - Added boss-specific scoring restrictions in the `Score` class","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"#### Card Actions System","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"- **Card Play and Discard Logic**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"  - Enhanced the `RoundActions` class with a stateless design for better testability","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"  - Implemented comprehensive validation for all card actions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"  - Created a flexible `ActionResult` pattern to return multiple values from actions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"#### Observer Pattern Implementation","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"- **UI Update Mechanism**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"  - Implemented the `RoundObservable` class using the Observer pattern","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"  - Created a clean interface for UI components to register as listeners","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"  - Enabled automatic UI updates when round state changes","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"### Documentation Contributions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"#### Developer Guide (DG)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"- **Round Component Documentation**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"  - Created comprehensive class diagrams showing the relationships between Round classes","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"  - Developed detailed sequence diagrams for key methods:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"    - `playCards`: Showing the flow from user input to score calculation","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"    - `discardCards`: Illustrating the card replacement mechanism","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"    - `isWon` and `isRoundOver`: Documenting win condition evaluation","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"  - Added technical documentation explaining the Observer pattern implementation","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"  - Wrote detailed explanations of the Round component\u0027s responsibilities and design decisions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"#### User Guide (UG)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"- **Player Instructions**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"  - Added clear descriptions of possible user inputs for playing and discarding cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"  - Documented round mechanics and scoring rules for player reference","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"  - Created examples showing valid card selections and their outcomes","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"### Team-Based Contributions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"#### Code Integration and Architecture","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"- **Component Integration**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"  - Designed the Round component to integrate cleanly with other system components","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"  - Implemented proper interfaces for the Deck, Player, and Score components","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"  - Collaborated with team members to ensure consistent coding style and architecture","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"#### Code Review and Refinement","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"- **Pull Request Reviews**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"  - Reviewed pull requests related to gameplay mechanics","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"  - Provided detailed feedback on code quality and suggested improvements","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"  - Identified potential bugs and edge cases in gameplay implementations","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"#### Testing Coordination","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"- **Test Framework Development**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"  - Established patterns for comprehensive unit testing","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"  - Created helper methods used across multiple test classes","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"  - Implemented robust test cases covering normal operation and edge cases","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"| Element         | Class, %   | Method, %    | Line, %       | Branch, %    |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"K-J-Q"},"content":"|-----------------|------------|--------------|---------------|--------------|","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"| round           | 100% (7/7) | 79% (62/78)  | 85% (152/177) | 66% (44/66)  |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"K-J-Q"},"content":"| └─ Round        | 100% (2/2) | 66% (24/36)  | 79% (57/72)   | 73% (19/26)  |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"K-J-Q"},"content":"| └─ RoundActions | 100% (2/2) | 100% (9/9)   | 95% (41/43)   | 68% (22/32)  |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"| └─ RoundConfig  | 100% (1/1) | 100% (12/12) | 100% (21/21)  | 50% (1/2)    |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"| └─ RoundObservable | 100% (1/1) | 66% (2/3)    | 90% (9/10)    | 100% (0/0)   |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"| └─ RoundState   | 100% (1/1) | 83% (15/18)  | 77% (24/31)   | 33% (2/6)    |","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"### Additional Contributions","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"#### Feature Enhancements","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"- **Ante and Blind System**:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"  - Implemented the foundational Ante object for round initialization","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"  - Created a flexible blind system with different difficulty levels","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"  - Added boss blinds with special gameplay modifications","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"#### Bug Fixes","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"- Fixed duplicate handling issues in user input (#136)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"- Resolved uncaught index error when drawing from an empty deck (#128)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"- Corrected UI to reflect max hands accurately (#124)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"K-J-Q"},"content":"- Addressed bug in `HoldingHand Play()` method (#62)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"#### Code Quality Improvements","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"K-J-Q"},"content":"- Implemented assertions throughout the Round component for robust error detection","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"- Refactored the Round class to improve separation of concerns","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"- Enhanced exception handling with descriptive error messages","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"- Improved code readability and maintainability by following OOP principles","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"- Ensured consistent naming conventions and code style across the Round component","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"- Conducted code reviews to maintain high standards of code quality","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"#### Documentation Updates","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"- Updated Developer Guide with detailed explanations of the Round component","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"- Contributed to the User Guide with clear instructions for gameplay","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"- Kept documentation synchronized with code changes throughout development","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"- Created diagrams and flowcharts to illustrate complex interactions within the Round component","lastModifiedDate":"2025-04-06","isFullCredit":false}],"authorContributionMap":{"K-J-Q":154}},{"path":"docs/team/markneoneo.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"# Mark Neo Qi Hao - Project Portfolio Page","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"## **Overview**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"**Javatro** is a terminal-based card game inspired by *Balatro*, offering strategic deck-building and poker mechanics. Players progress through rounds by scoring points with poker hands while managing jokers and modifiers. The application prioritizes a visually engaging terminal UI using ANSI formatting and dynamic rendering.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"As the **UI Module Lead**, I architected the screen management system, implemented ANSI-based card rendering, and resolved cross-terminal compatibility challenges. My contributions ensured a consistent user experience across diverse environments.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"## **Summary of Contributions**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"### **Code Contributed**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"[Link to tP Code Dashboard](https://nus-cs2113-ay2425s2.github.io/tp-dashboard/?search\u003dmarkneoneo\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2025-02-21\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"### **Enhancements Implemented**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"1. **UI Module Architecture**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    - **Feature**: Designed the `UI` and `Screen` classes to manage screen transitions and ANSI rendering.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    - **Depth**:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        - Implemented a Singleton `UI` class to centralize screen state and ANSI utilities.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        - Created an abstract `Screen` class with concrete implementations (e.g., `GameScreen`, `HelpScreen`).","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    - **Challenges**:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        - Resolved terminal flickering during transitions using `clearScreen()` with ANSI escape codes.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        - Debugged alignment issues caused by Unicode symbols, leading to a letter-based design for cards.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"2. **Dynamic Card Rendering**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    - **Feature**: Rendered poker hands as ASCII art with ANSI colors.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    - **Depth**:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        - Developed `CardRenderer` to convert `Card` objects into fixed-width ASCII art.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        - Integrated dynamic updates using the Observer pattern (e.g., score changes trigger re-rendering).","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    - **Challenges**:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        - Abandoned emojis/Unicode due to inconsistent spacing and terminal support.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        - Devised a grid system to align 8 cards in 2 rows without overflow.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"3. **Terminal Compatibility**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    - **Feature**: Ensured UI consistency across CMD, PowerShell, and Unix terminals.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    - **Depth**:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        - Replaced colored emojis with ANSI-styled letters (e.g., `H` in red for hearts).","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        - Added fallback rendering for unsupported terminals.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"### **Contributions to User Guide (UG)**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"- Authored **UI Interactions** section:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    - Explained screen navigation (e.g., `StartScreen` → `GameScreen`).","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    - Documented input syntax for card selection and menu commands.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"- Added **Troubleshooting** tips for terminal setup (e.g., `java \"-Dfile.encoding\u003dUTF-8\" -jar tp.jar`).","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"### **Contributions to Developer Guide (DG)**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"- **Sections**:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    - **UI Implementation**: Detailed Singleton pattern, screen transitions, and ANSI challenges.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    - **Emoji/Unicode Compatibility**: Explained design trade-offs and terminal limitations.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"- **UML Diagrams**:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    - Class diagrams for `UI`, `Screen`, and `CardRenderer`.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    - Sequence diagrams for screen transitions and card rendering.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"### **Contributions to Team-Based Tasks**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"- Setting up the **GitHub** team org/repo.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"- Maintaining the **issue tracker**.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"- Set up **ANSI utility class** for team-wide use.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"- Standardized **UI documentation** for screens and components.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"- Conducted **terminal compatibility testing** on Windows/macOS.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"### **Review/Mentoring Contributions**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"- Reviewed **12+ PRs**, including [PR #123](https://github.com/nus-cs2103-AY2324S2/tp/pull/123) (fixed ANSI color leaks).","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"- Mentored teammates on ANSI best practices and terminal debugging.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"### **Contributions Beyond the Project Team**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"- Reported **3 bugs** in other teams’ ip.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"- Gave structured and constructive feedback on other teams\u0027 DG.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"## **Contributions to the Developer Guide (Extracts)**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"### **UI Implementation Challenges**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"\u003e *\"Emojis and Unicode symbols were initially used for suits (e.g., ♥️), but inconsistent spacing caused misalignment in card art. For example, a heart symbol occupied 1 column, while a diamond spanned 2 columns. After testing across terminals, we adopted letters (`H`, `D`, `C`, `S`) with ANSI colors, ensuring fixed-width rendering.\"*","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"### **CardRenderer Class Diagram**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"```mermaid  ","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"classDiagram  ","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"    class CardRenderer {  ","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        +renderCard(Card): String[]  ","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        -getSuitSymbol(Suit): String  ","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        -getColour(Suit): String  ","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"    }  ","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"```  ","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"---","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"## **Contributions to the User Guide (Extracts)**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"### **Navigating the UI**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"\u003e *\"Example\"*","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":93}},{"path":"docs/team/swethacool.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"# Saravanan Swetha - Project Portfolio Page","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"## Overview","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"**Javatro** is a command-line roguelike deck-building game inspired by **Balatro**, blending poker-style strategy with distinctive deck mechanics. It delivers a streamlined yet captivating experience through **diverse deck types**, escalating **blind levels**, and dynamic **scoring systems**, ensuring both depth and replayability.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"---","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"### Summary of Contributions","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"### Code Contributions","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"- [View my contributions on the tP Code Dashboard](https://nus-cs2113-ay2425s2.github.io/tp-dashboard/?search\u003dswethacool\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2025-02-21\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dswethacool\u0026tabRepo\u003dAY2425S2-CS2113-W13-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026authorshipIsIgnoredFilesChecked\u003dfalse)","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"### Technical Contributions","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"#### Key Classes Developed","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"1. **`Ante` Class:** ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"   - Designed and implemented the core logic for the ante system and blind progression mechanics using object-oriented principles.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"   - Used enums to define and encapsulate Small Blind, Large Blind, and Boss Blind, each with custom multipliers and display names.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"   - Designed the class to follow Single Responsibility Principle, focusing solely on progression logic and round multipliers.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"   - Applied defensive programming and clear method contracts to ensure state transitions remained consistent.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"   ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"   **Developed methods to:**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"   - Increment the ante and transition between blinds.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"   - Retrieve current ante/blind values for display and scoring.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"   - Reset ante/blind state for new games or testing.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"2. **`Blind` Class** ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"   - Defined a strongly-typed enum to represent the three blind levels used in each round.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"   - The blinds progress and rotate between Small, Large, and Boss blind for every ante. ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"   - Handled blind progression logic, determining the next blind based on current state and user choice.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"   - Associated each blind with:","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"     1. A specific multiplier for score calculation.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"     2. A user-friendly label for use in the UI and help screens.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"   - Provided a next() method to control valid blind progression during gameplay.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"3. **`AcceptBlindOption` Class**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"   - Implemented the logic that handles player acceptance of the current blind and progresses the game accordingly.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"   - Integrated ante and blind progression into this class to ensure smooth transitions between rounds.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"   - Triggered appropriate game state updates, including score calculation and blind level advancement.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"   - Ensured validation of game conditions before accepting the blind to prevent illegal state transitions.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"4. **`RejectBlindOption` Class**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"   - Designed this class to represent the player’s decision to reject the current blind.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"   - Coordinated with game state classes to update the round without progressing the blind level.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"   - Added safeguard checks to avoid abuse of the reject mechanic and maintain game balance.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"   - Ensured consistent UI and console feedback when a blind is rejected.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"5. **UI Box \u0026 Function Usage for `AcceptBlindOption` and `RejectBlindOption` classes**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"   - Created the UI box for blind acceptance/rejection display, reusing functions to maintain code efficiency and prevent duplication. ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"swethacool"},"content":"   - Leveraged existing UI handling logic elsewhere to keep the code clean and consistent across different game scenarios.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"swethacool"},"content":"   ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"swethacool"},"content":"6. **`Help Menu` Class**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"swethacool"},"content":"   #### Implemented In-Game Help Menu","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"swethacool"},"content":"   - Developed a modular command-line interface that responds to user input for different help topics","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"swethacool"},"content":"   ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"swethacool"},"content":"   1. **Game Introduction Section:** ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"swethacool"},"content":"      - Introduced Javatro as a roguelike deck-building game inspired by Balatro.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"swethacool"},"content":"      - Explained the goal of the game: building a deck and progressing through challenges using poker hands.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"swethacool"},"content":"      - Motivated players with an engaging statement: \"Think strategically, manage your deck wisely, and see how far you can go!\".","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"swethacool"},"content":"      - Crafted a friendly, simple tone to welcome players and ease them into the game mechanics.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"swethacool"},"content":"   2. **How to Play Section:** ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"swethacool"},"content":"      - Wrote a beginner-friendly walkthrough explaining key game mechanics, such as drawing cards, playing hands, and advancing blinds.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"swethacool"},"content":"      - Broke down complex gameplay sequences into digestible steps for new players.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"swethacool"},"content":"      - Organized the steps into a structured, easy-to-read format for players to follow throughout the game.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"swethacool"},"content":"      ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"swethacool"},"content":"   3. **Tips \u0026 Tricks Section**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"swethacool"},"content":"      - Curated strategic advice for maximizing scores, managing discards/plays, and timing blind acceptance.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"swethacool"},"content":"      - Included advanced tactics and considerations for boss blinds and deck composition.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"swethacool"},"content":"      - Suggested saving powerful hands for crucial rounds and using special cards wisely.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"swethacool"},"content":"      - Included a motivational message: \"Good luck and have fun!\"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"swethacool"},"content":"      ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"swethacool"},"content":"   4. **Rules Section**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"swethacool"},"content":"      - Compiled a clear set of core rules governing poker hand evaluations, round progression, and resource management.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"swethacool"},"content":"      - Described the game-ending condition and the progressively challenging rounds.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"swethacool"},"content":"      - Emphasized strategic hand selection and deck management.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"swethacool"},"content":"#### Comprehensive Testing","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"swethacool"},"content":"- **`AnteTest` Class**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"swethacool"},"content":"  - **Initial Setup Verification**: Ensured correct initialization with starting values for ante count, blind level, and round score.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"swethacool"},"content":"  - **Blind Multiplier Accuracy**: Validated that the multipliers for different blind levels (SMALL_BLIND, LARGE_BLIND, BOSS_BLIND) were correctly applied to the score calculations.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"swethacool"},"content":"  - **Round Progression \u0026 Reset Logic**: Confirmed that the blind levels and ante count progress correctly across rounds and reset appropriately after reaching maximum values.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"swethacool"},"content":"  - **Randomized Testing \u0026 Edge Cases**: Tested various random ante counts and blind selections to ensure accurate score calculations and proper handling of dynamic game scenarios, including verifying the ante count cap.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"swethacool"},"content":"#### Enhancements Implemented","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"swethacool"},"content":"##### Blind Acceptance and Rejection Mechanics","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"swethacool"},"content":"- Added logic to allow players to accept or reject the current blind, providing a more strategic layer to gameplay and to mimic the real gameplay of Balatro.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"swethacool"},"content":"##### Enum-Based Blind System","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"swethacool"},"content":"- Simplified blind progression through a structured enum system.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"swethacool"},"content":"- Ensures controlled and predictable blind levels without complex logic.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"swethacool"},"content":"##### Ante Progression ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"swethacool"},"content":"- Prevents unfair jumps in bet sizes, ensuring a balanced game experience.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"swethacool"},"content":"##### Randomized Blind and Score Testing","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"swethacool"},"content":"- Implemented comprehensive testing to handle random blind selections and score calculations.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"swethacool"},"content":"- Validated edge cases for the maximum ante count, blind cycling limits, and the impact of various blind levels on the score.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"swethacool"},"content":"- Ensured the gameplay logic behaves as expected across multiple randomized scenarios, enhancing robustness.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"swethacool"},"content":"Overall: The dynamic system allows for engaging gameplay while avoiding excessive complexity in tracking and logic.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"swethacool"},"content":"### Documentation Contributions","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"swethacool"},"content":"#### Developer Guide (DG)","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"swethacool"},"content":"1. **Ante and Blind System:**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"swethacool"},"content":"   - Explained about the ante progression and blind levels (SMALL, LARGE, BOSS).","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"swethacool"},"content":"   - Explained about the regulation of the game’s score to beat and increasing stakes as the game advances.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"swethacool"},"content":"   - Explained about the defined methods for the Ante class","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"swethacool"},"content":"   - Explained about the implementation of AcceptBlindOption and RejectBlindOption classes to manage player decisions regarding the blind, integrated with game state classes for smooth progression.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"swethacool"},"content":"   - Highlighted how the ante logic and player choices are encapsulated and structured using OOP principles.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"swethacool"},"content":"   ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"swethacool"},"content":"2. Created a detailed sequence diagram to illustrate the flow of blind options and ante progression.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"swethacool"},"content":"3. Created comprehensive class diagrams to illustrate the structure and relationships between:","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"swethacool"},"content":"  - Ante class, which manages ante levels, blind stages, and score calculation.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"swethacool"},"content":"  - Blind enum, which defines multipliers and names for SMALL, LARGE, and BOSS blinds.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"swethacool"},"content":"  - AcceptBlindOption and RejectBlindOption, which implement the Option interface to handle blind decisions.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"swethacool"},"content":"4. Elaborated on the design considerations to illustrate how the dynamic approach maintains player engagement while minimizing overhead in logic and state tracking.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"swethacool"},"content":"5. Added JavaDocs to the relevant classes to ensure better understandability and readability of what each method does.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"swethacool"},"content":"#### User Guide (UG)","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"swethacool"},"content":"- **Help Menu**:","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"swethacool"},"content":"  - Designed Help Menu layout with 4 clear sections","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"swethacool"},"content":"  - Wrote concise descriptions for: Game Introduction, Rules, How To Play, Tips \u0026 Tricks.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"swethacool"},"content":"  - Included visuals for user guidance.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"swethacool"},"content":"  - Focused on clarity and ease for new players","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"swethacool"},"content":"### Team-Based Contributions","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"swethacool"},"content":"#### System Design \u0026 Integration","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"swethacool"},"content":"- **Component Integration**:","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"swethacool"},"content":"  - Designed the Ante and Blind System to integrate cleanly with core components.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"swethacool"},"content":"  - Implemented clear interfaces between the Ante and Blind system to ensure smooth integration and consistent data flow.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"swethacool"},"content":"  - Collaborated with teammates to ensure consistent coding style and seamless architecture","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"swethacool"},"content":"  - Reused UI code to prevent duplication, better readability, and also to follow the coding standards. ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"swethacool"},"content":"#### Code Review and Refinement","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"swethacool"},"content":"- **Pull Request Reviews**:","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"swethacool"},"content":"  - Reviewed Pull Requests for gameplay features","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"swethacool"},"content":"  - Provided constructive feedback, suggested code improvements, and caught edge cases","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"swethacool"},"content":"  - Helped to identify potential bugs.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"swethacool"},"content":"  - Ensured consistent architecture and clean integration between different team members.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"swethacool"},"content":"#### Testing Coordination","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"swethacool"},"content":"- Set up reusable test helpers and patterns.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"swethacool"},"content":"- Wrote thorough unit tests covering core and edge behaviors.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"swethacool"},"content":"- Strengthened code reliability through collaborative test design.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"swethacool"},"content":"### Additional Contributions","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"swethacool"},"content":"#### Feature Enhancements ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"swethacool"},"content":"- **nextRound() Enhancement:**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"swethacool"},"content":"- Improved progression by advancing the blind level or increasing ante when the Boss Blind is reached.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"swethacool"},"content":"- Ensures smoother transitions and maintains game balance through controlled progression.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"swethacool"},"content":"- Calling from the Round class to getRoundScore() which returns the round score based on the ante and its corresponding blind multiplier.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"swethacool"},"content":"- Setting the conditions for the round to progress to next level and the winning terms. ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"swethacool"},"content":"#### Code Quality Improvements","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"swethacool"},"content":"- Implemented assertions throughout the Ante and Blind component to ensure strong error detection.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"swethacool"},"content":"- Refactored Ante and Blind class to improve separation of concerns.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"swethacool"},"content":"- Ensure effective exception handling with descriptive and informative error messages.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"swethacool"},"content":"- Improved code readability and maintainability by following OOP principles.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"swethacool"},"content":"- Ensured consistent naming conventions and code style across the Ante and Blind component.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"swethacool"},"content":"- Conducted code reviews to maintain high standards of code quality","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"swethacool"},"content":"- Established clear interfaces between components to maintain modularity and facilitate team collaboration.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"swethacool"},"content":"- Contributed to consistent architectural design, aligning with team conventions and ensuring maintainable codebase structure.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"swethacool"},"content":"- Integrated the Ante and Blind system seamlessly with core modules like Deck, Player, and Score, ensuring smooth game flow.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"swethacool"},"content":"- Ensured the display of the Help Menu aligned with the UI code already done by another team member to ensure consistency. ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"swethacool"},"content":"#### Documentation Updates","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"swethacool"},"content":"- Updated Developer Guide with detailed explanations of the Ante and Blind component","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"swethacool"},"content":"- Had a fair share of contributions to the User Guide by elaborating on the Help Menu curated just for the players. ","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"swethacool"},"content":"- Created class and sequence diagrams to illustrate complex interactions within the Ante and Blind component","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"swethacool"},"content":"### **Contributions Beyond the Project Team**","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"swethacool"},"content":"- Reported **10 bugs** in other teams’ tp.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"swethacool"},"content":"- Gave structured and constructive feedback on other teams\u0027 DG and TP code work.","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"swethacool"},"content":"   ","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"swethacool":186}},{"path":"src/main/java/javatro/Javatro.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import javatro.audioplayer.AudioPlayer;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javatro.display.screens.StartScreen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * The {@code javatro} class serves as the main entry point for the application. It initializes the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" * necessary components, including the view, core logic, and manager, and sets the screen of the","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" * manager to the start screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Javatro {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private static AudioPlayer mainAudioPlayer;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** The view component of the application. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    private static final UI javatroView \u003d new UI();","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /** The core logic component of the application. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    private static final JavatroCore javatroCore \u003d new JavatroCore();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /** The manager responsible for handling interactions between the view and core components. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    private static final JavatroManager javatroManager;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    static {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"            javatroManager \u003d new JavatroManager(javatroView, javatroCore);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"     * The main entry point of the application. It initializes the start screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"     * @param args Command-line arguments (not used in this application).","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    public static void main(String[] args) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        assert false : \"dummy assertion set to fail\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(new StartScreen());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":20,"flyingapricot":16,"-":9}},{"path":"src/main/java/javatro/audioplayer/AudioPlayer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.audioplayer;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import java.io.BufferedInputStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import java.io.IOException;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import java.io.InputStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javax.sound.sampled.*;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"public class AudioPlayer {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"    private static AudioPlayer instance;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"    private Clip audioClip;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"    private Thread audioThread;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    private String currentAudioPath;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private AudioPlayer() {}","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    public static synchronized AudioPlayer getInstance() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"            instance \u003d new AudioPlayer();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"        return instance;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    public synchronized void playAudio(String audioPath) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        if (audioPath.equals(currentAudioPath) \u0026\u0026 isPlaying()) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"            return; // Avoid restarting the same audio","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        switchAudio(audioPath);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    public synchronized void switchAudio(String newAudioPath) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        stopAudio(); // Stop the current audio first","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        audioThread \u003d","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new Thread(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"                        () -\u003e {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"                            try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"                                currentAudioPath \u003d newAudioPath;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"                                // Load the audio file from resources","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"                                InputStream inputStream \u003d","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"                                        getClass().getResourceAsStream(\"/\" + newAudioPath);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"                                if (inputStream \u003d\u003d null) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"                                    throw new IOException(\"Audio file not found: \" + newAudioPath);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"                                }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"                                BufferedInputStream bufferedStream \u003d","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"                                        new BufferedInputStream(inputStream);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"                                AudioInputStream audioStream \u003d","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"                                        AudioSystem.getAudioInputStream(bufferedStream);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"                                audioClip \u003d AudioSystem.getClip();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"                                audioClip.open(audioStream);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"                                audioClip.loop(Clip.LOOP_CONTINUOUSLY); // Loop indefinitely","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"                                audioClip.start();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"                                // Keep the thread alive while the audio is playing","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"                                while (audioClip !\u003d null \u0026\u0026 audioClip.isRunning()) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"                                    try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"                                        Thread.sleep(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                                                100); // Check every 100ms if the audio is still","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"                                        // playing","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"                                    } catch (InterruptedException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"                                        break; // Exit if interrupted","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"                                    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"                                }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"                                audioStream.close();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                            } catch (UnsupportedAudioFileException","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                                    | IOException","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                                    | LineUnavailableException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"                                e.printStackTrace();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"                            }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"                        });","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"        audioThread.setDaemon(true); // Ensure the thread doesn\u0027t block the application from exiting","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"        audioThread.start();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"    public synchronized void stopAudio() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"        if (audioClip !\u003d null) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"            audioClip.stop();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"            audioClip.close();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"            audioClip \u003d null;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"            currentAudioPath \u003d null;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"        if (audioThread !\u003d null \u0026\u0026 audioThread.isAlive()) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"                audioThread.join(); // Wait for the audio thread to finish properly","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"            } catch (InterruptedException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"                e.printStackTrace();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"    public synchronized boolean isPlaying() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"        return audioClip !\u003d null \u0026\u0026 audioClip.isRunning();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"    public synchronized String getCurrentAudioPath() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"        return currentAudioPath;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"flyingapricot":87,"-":18}},{"path":"src/main/java/javatro/core/Ante.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"package javatro.core;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @author swethacool","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":" * The {@code Ante} class represents the ante system in a poker game, managing the current round,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" * ante values, and blind progression.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"public class Ante {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"    private Ante ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"    private static final int MAX_ANTE_COUNT \u003d 8;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /** Enum representing different blind levels with associated multipliers and names. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"    public enum Blind {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"        SMALL_BLIND(1.0, \"SMALL BLIND\"),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"        LARGE_BLIND(1.5, \"LARGE BLIND\"),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"        BOSS_BLIND(2.0, \"BOSS BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"        private final double multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"        private final String name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"        /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"         * Constructs a Blind with a multiplier and a name.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"         *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"         * @param multiplier The multiplier applied to the ante score.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"         * @param name The name of the blind level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"         */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"        Blind(double multiplier, String name) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"            this.multiplier \u003d multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"            this.name \u003d name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"        /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"         * Gets the multiplier associated with this blind.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"         *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"         * @return The multiplier value.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"         */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"        public double getMultiplier() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"            return multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"        /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"         * Gets the name of the blind.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"         *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"         * @return The name of the blind.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"         */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"        public String getName() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"            return name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"    private static int anteCount;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"swethacool"},"content":"    private Blind blind;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"swethacool"},"content":"    private final int[] anteScore \u003d {300, 800, 2000, 5000, 11000, 20000, 35000, 50000};","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"swethacool"},"content":"     * Constructs an {@code Ante} object with an initial ante count of 1 and the small blind level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"swethacool"},"content":"    public Ante() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"swethacool"},"content":"        anteCount \u003d 1;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"swethacool"},"content":"        blind \u003d Blind.SMALL_BLIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"swethacool"},"content":"     * Calculates the round score based on the ante level and blind multiplier.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"swethacool"},"content":"     * @return The round score as an integer.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"swethacool"},"content":"    public int getRoundScore() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"swethacool"},"content":"        return (int) (anteScore[anteCount - 1] * blind.multiplier);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"swethacool"},"content":"     * Gets the base ante score for the current round.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"swethacool"},"content":"     * @return The ante score as an integer.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"swethacool"},"content":"    public int getAnteScore() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"swethacool"},"content":"        return anteScore[anteCount - 1];","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"    // @author K-J-Q","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"     * Sets the ante count for the game.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"     * @param anteCount The new ante count to set.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if the ante count is not between 1 and {@link","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *     #MAX_ANTE_COUNT}","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"    public void setAnteCount(int anteCount) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"        if (anteCount \u003c 1 || anteCount \u003e MAX_ANTE_COUNT) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"            // not using javatro exception since this method should only be used in tests","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"                    \"Ante count must be between 1 and \" + MAX_ANTE_COUNT);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"        Ante.anteCount \u003d anteCount;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /** Resets the ante to the first round with the small blind. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"swethacool"},"content":"    public void resetAnte() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"swethacool"},"content":"        anteCount \u003d 1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /** Moves to the next round of the ante system, adjusting the blind level and ante count. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"swethacool"},"content":"    public void nextRound() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"swethacool"},"content":"        if (blind \u003d\u003d Blind.SMALL_BLIND) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"swethacool"},"content":"            blind \u003d Blind.LARGE_BLIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"swethacool"},"content":"        } else if (blind \u003d\u003d Blind.LARGE_BLIND) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"swethacool"},"content":"            blind \u003d Blind.BOSS_BLIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"swethacool"},"content":"        } else {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"swethacool"},"content":"            if (anteCount \u003d\u003d MAX_ANTE_COUNT) return;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"swethacool"},"content":"            blind \u003d Blind.SMALL_BLIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"swethacool"},"content":"            anteCount++;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"    public Blind getNextBlind() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"        Blind newBlind \u003d null;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"        if (blind \u003d\u003d Blind.SMALL_BLIND) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"            newBlind \u003d Blind.LARGE_BLIND;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"flyingapricot"},"content":"        } else if (blind \u003d\u003d Blind.LARGE_BLIND) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"            newBlind \u003d Blind.BOSS_BLIND;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"        } else {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"            if (anteCount \u003d\u003d MAX_ANTE_COUNT) return null;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"            newBlind \u003d Blind.SMALL_BLIND;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"        return newBlind;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"swethacool"},"content":"     * Sets the blind level manually.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"swethacool"},"content":"     * @param blind The new blind level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"swethacool"},"content":"    public void setBlind(Blind blind) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"swethacool"},"content":"        this.blind \u003d blind;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"swethacool"},"content":"     * Gets the current blind level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"swethacool"},"content":"     * @return The current {@code Blind} level.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"swethacool"},"content":"    public Blind getBlind() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"swethacool"},"content":"        return blind;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"swethacool"},"content":"     * Gets the current ante count.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"swethacool"},"content":"     * @return The ante count as an integer.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"swethacool"},"content":"    public int getAnteCount() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"swethacool"},"content":"        return anteCount;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"swethacool":116,"flyingapricot":13,"K-J-Q":14,"-":12,"jwyk":1}},{"path":"src/main/java/javatro/core/BossType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"/**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents the types of bosses available in the game. Each boss type modifies gameplay rules in","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":" * specific ways.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":" */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"public enum BossType {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"    NONE(\"\", \"\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"    THE_NEEDLE(\"The Needle\", \"Play only 1 hand\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"    THE_WATER(\"The Water\", \"Start with 0 discards\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"    THE_CLUB(\"The Club\", \"All Club cards cannot score\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    THE_WINDOW(\"The Window\", \"All Diamond cards cannot score\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"    THE_HEAD(\"The Head\", \"All Heart cards cannot score\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"    THE_GOAD(\"The Goad\", \"All Spade cards cannot score\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"    THE_PLANT(\"The Plant\", \"All face cards cannot score\"),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    THE_PSYCHIC(\"The Psychic\", \"Must play 5 cards (not all cards need to score)\");","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    private final String name;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"    private final String description;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"     * Constructs a BossType with the given description.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"     * @param name The name of the BossType.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"     * @param description The description of the BossType.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    BossType(String name, String description) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"        this.name \u003d name;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"     * Returns the name of the BossType.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"     * @return The name of the BossType.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"    public String getName() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"        return name;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"     * Returns the description of the BossType.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"     * @return The description of the BossType.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"    public String getDescription() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"        return description;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"     * Returns a random boss type (excluding NONE).","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"     * @return A randomly selected boss type","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"    public static BossType getRandomBossType() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"        // skip the first value (NONE) to ensure a valid boss type is selected","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"        int randomIndex \u003d (int) (Math.random() * (values().length - 1));","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assert randomIndex \u003e\u003d 0 \u0026\u0026 randomIndex \u003c values().length - 1 : \"Random index out of bounds\";","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"        return values()[randomIndex + 1];","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-04-01","isFullCredit":false}],"authorContributionMap":{"K-J-Q":58,"-":3}},{"path":"src/main/java/javatro/core/Card.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * Represents a playing card with a rank and a suit in a card game. Each card has a specific rank","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * (e.g., ACE, KING) and suit (e.g., HEARTS, SPADES). The card\u0027s rank determines both its display","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" * symbol and its chip value in gameplay.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"public record Card(Rank rank, Suit suit) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"    /** Compact constructor to validate card components. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"    public Card {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"        assert rank !\u003d null : \"Rank must not be null\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"        assert suit !\u003d null : \"Suit must not be null\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a new card by copying an existing card instance.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     * @param other The card to copy. Must not be {@code null}.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    public Card(Card other) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        this(other.rank(), other.suit());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * Enumeration of card ranks with associated symbols and chip values. Chip values follow","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * standard casino blackjack values.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    public enum Rank {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        TWO(\"2\", 2),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        THREE(\"3\", 3),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        FOUR(\"4\", 4),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        FIVE(\"5\", 5),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        SIX(\"6\", 6),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        SEVEN(\"7\", 7),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        EIGHT(\"8\", 8),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        NINE(\"9\", 9),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        TEN(\"10\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        JACK(\"J\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        QUEEN(\"Q\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        KING(\"K\", 10),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"        ACE(\"A\", 11);","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        private final String symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        private final int chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"         * Creates a rank with its display symbol and chip value.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"         * @param symbol The character representation of the rank","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"         * @param chips The game value in chips for this rank","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        Rank(String symbol, int chips) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"            assert symbol !\u003d null : \"Rank symbol cannot be null\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"            this.symbol \u003d symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"            this.chips \u003d chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        /** Returns the display symbol for this rank. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        public String getSymbol() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"            return symbol;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        /** Returns the chip value used in game calculations. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        public int getChips() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"            return chips;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"    /** Enumeration of card suits with full display names. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    public enum Suit {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"        HEARTS(\"Hearts\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        CLUBS(\"Clubs\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        SPADES(\"Spades\"),","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        DIAMONDS(\"Diamonds\");","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        private final String name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"         * Creates a suit with its full display name.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"         * @param name The formal name of the suit","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        Suit(String name) {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"            assert name !\u003d null : \"Suit name cannot be null\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"            this.name \u003d name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        /** Returns the formal name of the suit. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        public String getName() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"            return name;","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"     * Returns the chip value of this card based on its rank.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"     * @return Chip value for game calculations","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"    public int getChips() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        return rank.getChips();","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"     * Returns a human-readable string representation of the card. Format: \"[Symbol] of [Suit]\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"     * (e.g., \"A of Hearts\").","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"    public String toString() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"        // Format: \u003cRank Symbol\u003e of \u003cSuit Name\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"        return String.format(\"%s of %s\", rank.getSymbol(), suit.getName());","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":114}},{"path":"src/main/java/javatro/core/Deck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import java.util.Collections;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"/*","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" * Holds all the free cards the player has","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":" * Contains an ArrayList of type Card: with 0 being the top of the deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":" * and ArrayList.size() being the bottom","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class Deck {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e deck;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    private DeckType deckType;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"     * Initialize the deck with cards that the player owns If no new cards owned or a new game has","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"     * started, initializes a new deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    public Deck(DeckType deckType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        this.deckType \u003d deckType;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"        this.deck \u003d populateNewDeck(deckType);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /** Copy Constructor for deck class */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    Deck(Deck oldDeck) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        this.deck \u003d new ArrayList\u003cCard\u003e(oldDeck.deck.size());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        this.deckType \u003d oldDeck.deckType;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        for (Card card : oldDeck.deck) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"            this.deck.add(new Card(card));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    /** Draws and returns a card from the top of the deck */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    public Card draw() throws JavatroException {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        try {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"            return deck.remove(0);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"            throw JavatroException.noCardsRemaining();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /** Returns an integer containing the cards left in the deck */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"    public int getRemainingCards() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        return deck.size();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"    /** Returns an ArrayList containing all the remaining cards in the deck */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    public ArrayList\u003cCard\u003e getWholeDeck() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e wholeDeckList \u003d new ArrayList\u003cCard\u003e(deck.size());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"        for (Card card : deck) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"            wholeDeckList.add(new Card(card));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        return wholeDeckList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /** Returns an DeckType containing the deck variant you are using */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"    public DeckType getDeckName() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"        return deckType;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"    /** Shuffle the deck you are using */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"    public void shuffle() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(deck);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /** Initialize a new deck for the game, based on the deckType given. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateNewDeck(DeckType deckType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"        //","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"        if (deckType \u003d\u003d DeckType.CHECKERED) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"            newDeck \u003d populateNewCheckeredDeck();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"        } else if (deckType \u003d\u003d DeckType.ABANDONED) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"            newDeck \u003d populateNewAbandonedDeck();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"            newDeck \u003d populateDefaultDeck();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"        assert newDeck !\u003d null;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jwyk"},"content":"     * Initialize a new shuffled 52 card deck for a new game Consists of the standard Poker Deck: 13","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jwyk"},"content":"     * Cards of the 4 Suits","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateDefaultDeck() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"        for (Card.Rank rank : Card.Rank.values()) {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jwyk"},"content":"            for (Card.Suit suit : Card.Suit.values()) {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"                newDeck.add(new Card(rank, suit));","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(newDeck);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"    public void populateWithSavedDeck() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"        Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d Storage.START_OF_REST_OF_DECK; i \u003c Storage.START_OF_REST_OF_DECK + 44; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"            if (storage.getValue(storage.getRunChosen() - 1, i).equals(\"-\")","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"                    || storage.getValue(storage.getRunChosen() - 1, i).equals(\"NA\")) continue;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"            newDeck.add(Storage.parseCardString(storage.getValue(storage.getRunChosen() - 1, i)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"        Storage.isNewDeck \u003d false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"        Collections.shuffle(newDeck);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"        deck \u003d new ArrayList\u003c\u003e(newDeck);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"     * Initialize a new shuffled 52 card deck for a new game Consists of the standard Poker Deck: 26","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"     * Cards of the 2 Suites: Spades and Hearts.","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateNewCheckeredDeck() {","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jwyk"},"content":"        for (Card.Rank rank : Card.Rank.values()) {","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jwyk"},"content":"            // Populate for Hearts","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jwyk"},"content":"            Card.Suit suitHeart \u003d Card.Suit.valueOf(Card.Suit.HEARTS.toString());","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jwyk"},"content":"            newDeck.add(new Card(rank, suitHeart));","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jwyk"},"content":"            newDeck.add(new Card(rank, suitHeart));","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jwyk"},"content":"            // Populate for Spades","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jwyk"},"content":"            Card.Suit suitSpades \u003d Card.Suit.valueOf(Card.Suit.SPADES.toString());","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jwyk"},"content":"            newDeck.add(new Card(rank, suitSpades));","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jwyk"},"content":"            newDeck.add(new Card(rank, suitSpades));","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(newDeck);","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"jwyk"},"content":"     * Initialize a new shuffled 52 card deck for a new game Consists of the standard Poker Deck: 26","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"jwyk"},"content":"     * Cards of the 2 Suites: Spades and Hearts.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"jwyk"},"content":"    private ArrayList\u003cCard\u003e populateNewAbandonedDeck() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e newDeck \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"jwyk"},"content":"        Arrays.stream(Card.Rank.values())","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .filter(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                        rank -\u003e","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"                                rank !\u003d Card.Rank.KING","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"                                        \u0026\u0026 rank !\u003d Card.Rank.QUEEN","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"                                        \u0026\u0026 rank !\u003d Card.Rank.JACK)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"                .forEach(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"                        rank -\u003e {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"jwyk"},"content":"                            Arrays.stream(Card.Suit.values())","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"jwyk"},"content":"                                    .forEach(suit -\u003e newDeck.add(new Card(rank, suit)));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"jwyk"},"content":"                        });","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"jwyk"},"content":"        Collections.shuffle(newDeck);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"jwyk"},"content":"        return newDeck;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Enum representing the type of the deck. Test Deck is not to be used, and is a default deck.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"jwyk"},"content":"    public enum DeckType {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"flyingapricot"},"content":"        ABANDONED(\"ABANDONED\"),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"flyingapricot"},"content":"        BLUE(\"BLUE\"),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"flyingapricot"},"content":"        CHECKERED(\"CHECKERED\"),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"flyingapricot"},"content":"        RED(\"RED\"),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"flyingapricot"},"content":"        DEFAULT(\"DEFAULT\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"jwyk"},"content":"        private final String name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"jwyk"},"content":"        DeckType(String name) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"jwyk"},"content":"            this.name \u003d name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"jwyk"},"content":"        /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"jwyk"},"content":"         * Returns the symbol of the rank.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"jwyk"},"content":"         *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"jwyk"},"content":"         * @return The symbol of the rank.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"jwyk"},"content":"         */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"jwyk"},"content":"        public String getName() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"jwyk"},"content":"            return name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":1,"flyingapricot":24,"-":14,"jwyk":148}},{"path":"src/main/java/javatro/core/HandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FIVE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FIVE_OF_A_KIND;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FLUSH;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FLUSH_FIVE;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FLUSH_HOUSE;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FOUR_OF_A_KIND;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FULL_HOUSE;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.HIGH_CARD;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.PAIR;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.ROYAL_FLUSH;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.STRAIGHT;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.STRAIGHT_FLUSH;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.THREE_OF_A_KIND;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.TWO_PAIR;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"import java.util.HashMap;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"import java.util.Map;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":" * The `HandResult` class evaluates a poker hand based on the given cards. It supports hands with 1","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":" * to 5 cards and determines the best possible poker hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"public class HandResult {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     * Evaluates the poker hand based on the given list of cards.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     * @param cards A list of cards to evaluate. Must contain between 1 and 5 cards.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"     * @return A `PokerHand` object representing the evaluated hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     * @throws IllegalArgumentException If the input is null or contains fewer than 1 card.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    public static PokerHand evaluateHand(List\u003cCard\u003e cards) throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        if (cards \u003d\u003d null || cards.isEmpty() || cards.size() \u003e 5) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidPlayedHand(1, 5);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        // First check for Flush Five (all cards identical)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        if (isFlushFive(cards)) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FLUSH_FIVE);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        // Counts occurrences of each rank (e.g., {\"A\":1, \"K\":1, \"Q\":1, \"J\":1, \"10\":1} for a Royal","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        // Flush).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cCard.Rank, Integer\u003e rankCount \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        // Counts occurrences of each suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cCard.Suit, Integer\u003e suitCount \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        // card.rank() retrieves the rank of the card (e.g., Rank.ACE, Rank.KING, Rank.TEN, etc.).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        // rankCount.getOrDefault(card.rank(), 0) checks if the rank is already in the map:","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        //   - If yes, it gets the current count.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        //   - If not, it returns 0 (default value).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        // +1 increments the count for that rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        // put() updates the rank count in the map.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"            rankCount.put(card.rank(), rankCount.getOrDefault(card.rank(), 0) + 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"            suitCount.put(card.suit(), suitCount.getOrDefault(card.suit(), 0) + 1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        boolean isFlush \u003d suitCount.containsValue(5); // All 5 cards have the same suit","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"        boolean isStraight \u003d isStraight(rankCount); // Cards form a consecutive sequence","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        boolean isRoyal \u003d isRoyal(rankCount); // Special case: A, K, Q, J, 10","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        // Check remaining special hands","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        PokerHand specialHand \u003d checkSpecialHands(rankCount, isFlush);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        if (specialHand !\u003d null) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"            return specialHand;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        // Determine the best poker hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        if (cards.size() \u003d\u003d 1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(HIGH_CARD); // Single card is always a high card","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        } else {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"            return evaluateMultiCardHand(rankCount, isFlush, isStraight, isRoyal);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"    /** Checks if all cards are exactly identical (same rank and suit) */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isFlushFive(List\u003cCard\u003e cards) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        if (cards.size() !\u003d 5) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"            return false;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        Card first \u003d cards.get(0);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"            if (!card.rank().equals(first.rank()) || !card.suit().equals(first.suit())) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                return false;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        return true;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"    /** Checks for special poker hands (Flush Five, Flush House, Five of a Kind). */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"    private static PokerHand checkSpecialHands(Map\u003cCard.Rank, Integer\u003e rankCount, boolean isFlush) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        // Five of a Kind (all cards same rank, but possibly different suits)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"        if (rankCount.size() \u003d\u003d 1 \u0026\u0026 rankCount.values().iterator().next() \u003d\u003d 5) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FIVE_OF_A_KIND);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"        // Flush House (full house where all cards same suit)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"        if (isFlush \u0026\u0026 rankCount.size() \u003d\u003d 2) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"            boolean hasThree \u003d false;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"            boolean hasTwo \u003d false;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"            for (int count : rankCount.values()) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"                if (count \u003d\u003d 3) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"                    hasThree \u003d true;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"                if (count \u003d\u003d 2) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"                    hasTwo \u003d true;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"            if (hasThree \u0026\u0026 hasTwo) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                return new PokerHand(FLUSH_HOUSE);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        return null;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"     * Evaluates poker hands with 2 to 5 cards using a priority-based approach.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"     * @param isFlush Whether the hand is a flush.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"     * @param isStraight Whether the hand is a straight.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"     * @param isRoyal Whether the hand is a royal flush.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"     * @return A `HandResult` object representing the evaluated hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"    private static PokerHand evaluateMultiCardHand(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"            Map\u003cCard.Rank, Integer\u003e rankCount,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"            boolean isFlush,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"            boolean isStraight,","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"            boolean isRoyal) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        // Check for the strongest hands first","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        if (isRoyal \u0026\u0026 isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(ROYAL_FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"        } else if (isStraight \u0026\u0026 isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(STRAIGHT_FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(4)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FOUR_OF_A_KIND);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(3) \u0026\u0026 rankCount.containsValue(2)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FULL_HOUSE);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"        } else if (isFlush) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(FLUSH);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"        } else if (isStraight) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(STRAIGHT);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(3)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(THREE_OF_A_KIND);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.values().stream().filter(count -\u003e count \u003d\u003d 2).count() \u003d\u003d 2) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(TWO_PAIR);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        } else if (rankCount.containsValue(2)) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"            return new PokerHand(PAIR);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"        // Default case: High Card","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"        return new PokerHand(HIGH_CARD);","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the given hand forms a straight (consecutive sequence of ranks).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"     * @return `true` if the hand is a straight, `false` otherwise.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isStraight(Map\u003cCard.Rank, Integer\u003e rankCount) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"        // rankCount.keySet() gets the unique card ranks in the hand.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard.Rank\u003e ranks \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"                rankCount.keySet().stream()","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"                        .sorted() // sorts the ranks in ascending order.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"                        .toList(); // converts the result into a list.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"        // A straight must have five distinct card ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"        if (ranks.size() \u003d\u003d 5) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"            boolean normalStraight \u003d true;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"            // Loops through the sorted list and checks if each rank follows the previous rank","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"            // consecutively","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"            // ordinal() returns the numerical position of the enum value.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"            // If the difference between consecutive ranks is not exactly 1, return false.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"            for (int i \u003d 0; i \u003c 4; i++) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"                if (ranks.get(i + 1).ordinal() !\u003d ranks.get(i).ordinal() + 1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"                    normalStraight \u003d false;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"                    break;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"            // Special case: Ace-low straight (A-2-3-4-5)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"            boolean aceLowStraight \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"                    ranks.contains(ACE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"                            \u0026\u0026 ranks.contains(TWO)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"                            \u0026\u0026 ranks.contains(THREE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"                            \u0026\u0026 ranks.contains(FOUR)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"                            \u0026\u0026 ranks.contains(FIVE);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"            return normalStraight || aceLowStraight;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"        return false;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the given hand is a royal flush (A, K, Q, J, 10 of the same suit).","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"     * @param rankCount A map of card ranks and their counts.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"     * @return `true` if the hand is a royal flush, `false` otherwise.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"    private static boolean isRoyal(Map\u003cCard.Rank, Integer\u003e rankCount) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"        return rankCount.containsKey(ACE)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(KING)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(QUEEN)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(JACK)","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 rankCount.containsKey(TEN);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":229}},{"path":"src/main/java/javatro/core/HoldingHand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import java.util.Comparator;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import java.util.HashSet;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import java.util.Set;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"/*","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" * Tracks the 8 cards held in a hand","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":" * Handles the draw function and discard function","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"public class HoldingHand {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    public List\u003cCard\u003e Hand;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    private int HOLDING_LIMIT; // The maximum number of cards a hand can hold","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Instantiate an empty List of Cards. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    public HoldingHand() {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        Hand \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        this.HOLDING_LIMIT \u003d 8;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"     * Adds a Card to the Hand.","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis function should not be called if Hand size \u003e\u003d HOLDING_LIMIT","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    public void add(Card cardToAdd) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        if (Hand.size() \u003c HOLDING_LIMIT) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"            Hand.add(cardToAdd);","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"            throw new JavatroException(\"Exceeded Cards to be added.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"     * Draws a specified number of cards from the deck and adds them to the Hand.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"     * @param numberOfDraws The number of cards to draw from the deck","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"     * @param deck Deck containing the remaining cards","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    public void draw(int numberOfDraws, Deck deck) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c numberOfDraws; i++) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"            if (Hand.size() \u003c HOLDING_LIMIT) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"                Card tempCard \u003d deck.draw();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"                Hand.add(tempCard);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"            } else {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"                throw new JavatroException(\"Exceeded Cards to be added.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"     * Returns the specified cards as requested by the player Hand will then draw the same number of","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"     * cards back from the deck","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"     * \u003cp\u003eThis function should not be called if there are no cards played.","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"     * @param cardsToPlay List containing cards to be played","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"    public List\u003cCard\u003e play(List\u003cInteger\u003e cardsToPlay) throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e playList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"        // Validate that cardsToPlay and the played card positions are valid inputs","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"        if (cardsToPlay.size() \u003e 5) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new JavatroException(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"                    \"Number of cards played \"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                            + \"(\"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                            + cardsToPlay.size()","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                            + \")\"","lastModifiedDate":"2025-03-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                            + \" exceeds maximum allowed. (5)\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"            for (int index : cardsToPlay) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"                if (index \u003c 0 || index \u003e\u003d Hand.size()) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"                    throw new JavatroException(\"Invalid index in cards to be played: \" + index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"                }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jwyk"},"content":"        // Create a set to mark indices for removal","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"        Set\u003cInteger\u003e indicesToRemove \u003d new HashSet\u003c\u003e(cardsToPlay);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"        // Add cards that should be played in order of cardsToPlay","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"        for (int index : cardsToPlay) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"            if (indicesToRemove.contains(index)) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"                Card card \u003d Hand.get(index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jwyk"},"content":"                playList.add(card);","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"        // Remove the cardsToPlay from the Hand in descending order of indices","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"        List\u003cInteger\u003e sortedToRemove \u003d new ArrayList\u003c\u003e(indicesToRemove);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"        sortedToRemove.sort(Comparator.reverseOrder());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"        for (int index : sortedToRemove) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jwyk"},"content":"            Hand.remove(index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"        return playList;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"     * Discards a set number of cards. This function should not be used if the number of discards","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"     * left is 0.","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"     * @param cardsToDiscard List containing the cards at specified positions to be discarded","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"    public List\u003cCard\u003e discard(List\u003cInteger\u003e cardsToDiscard) throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e discardList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jwyk"},"content":"        // Validate that cardsToDiscard and the played card positions are valid inputs","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"        if (cardsToDiscard.size() \u003e 5) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new JavatroException(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"                    \"Number of cards discarded \"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"                            + \"(\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"                            + cardsToDiscard.size()","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"                            + \")\"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"                            + \" exceeds maximum allowed. (5)\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jwyk"},"content":"        } else {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jwyk"},"content":"            for (int index : cardsToDiscard) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jwyk"},"content":"                if (index \u003c 0 || index \u003e\u003d Hand.size()) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"                    throw new JavatroException(\"Invalid index in cards to be discarded: \" + index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"                }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        // Store the cards to be discarded","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        Set\u003cInteger\u003e indicesToDiscard \u003d new HashSet\u003c\u003e(cardsToDiscard);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        for (int index : indicesToDiscard) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"            discardList.add(Hand.get(index)); // Add card to discard list before removing","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"        // Remove the cardsToPlay from the Hand in descending order of indices","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e sortedToRemove \u003d new ArrayList\u003c\u003e(indicesToDiscard);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jwyk"},"content":"        sortedToRemove.sort(Comparator.reverseOrder());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jwyk"},"content":"        for (int index : sortedToRemove) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jwyk"},"content":"            Hand.remove(index);","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        return discardList;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Sorts the hand first by suit (Spades \u003e Hearts \u003e Clubs \u003e Diamonds), then by rank (Ace \u003e King \u003e","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Queen \u003e ... \u003e Two) within each suit.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"    public void sortBySuit() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Hand.sort(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                Comparator.comparingInt(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"                                (Card card) -\u003e","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"                                        switch (card.suit()) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"                                            case SPADES -\u003e 0;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"                                            case HEARTS -\u003e 1;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"                                            case CLUBS -\u003e 2;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"                                            case DIAMONDS -\u003e 3;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"                                            default -\u003e 4; // shouldn\u0027t happen","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"                                        })","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"                        .thenComparingInt(card -\u003e -card.rank().ordinal()));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Sorts the hand first by rank (Ace \u003e King \u003e Queen \u003e ... \u003e Two), then by suit (Spades \u003e Hearts","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * \u003e Clubs \u003e Diamonds) within each rank.","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"    public void sortByRank() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Hand.sort(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"                Comparator.comparingInt((Card card) -\u003e -card.rank().ordinal())","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"                        .thenComparingInt(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"                                card -\u003e","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"                                        switch (card.suit()) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"                                            case SPADES -\u003e 0;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"                                            case HEARTS -\u003e 1;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"                                            case CLUBS -\u003e 2;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"                                            case DIAMONDS -\u003e 3;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"                                            default -\u003e 4; // shouldn\u0027t happen","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"                                        }));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"flyingapricot"},"content":"     * Retrieves the list of cards in the player\u0027s hand.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"flyingapricot"},"content":"     * @return A {@code List} of {@code Card} objects representing the player\u0027s hand.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"flyingapricot"},"content":"    public List\u003cCard\u003e getHand() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"flyingapricot"},"content":"        return Hand;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"    // Sets input as current hand","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void setHand(List\u003cCard\u003e hand) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"        this.Hand \u003d hand;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * Change the HOLDING_LIMIT of the HoldingHand Class. This function is used when you need to","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * manually change the HOLDING_LIMIT","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"jwyk"},"content":"    public void setHOLDINGLIMIT(int holdingLimit) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"jwyk"},"content":"        HOLDING_LIMIT \u003d holdingLimit;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":39,"flyingapricot":9,"K-J-Q":15,"-":35,"jwyk":102}},{"path":"src/main/java/javatro/core/JavatroCore.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code JavatroCore} class represents the main game model, responsible for managing game","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * rounds and initializing the game state.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.core.Deck.DeckType;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.round.Round;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.util.*;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"/** The core game logic class that manages the game state and rounds. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"public class JavatroCore {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    /** The current active round in the game. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    public static Round currentRound;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    /** The current ante for the game. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    protected static Ante ante;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    /** The current round count of the game. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    protected static int roundCount;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    /** The number of plays give per round (Default value \u003d 4). */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    public static int totalPlays;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    /** The deck used throughout the game. (A copy of this deck is made for every new Round) */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    public static Deck deck;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    /** The deck used throughout the game. (A copy of this deck is made for every new Round) */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    public static HeldJokers heldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    private static final Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    /** Stores the play counts for each poker hand type */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Map\u003cPokerHand.HandType, Integer\u003e pokerHandPlayCounts \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new EnumMap\u003c\u003e(PokerHand.HandType.class);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"    // @author swethaiscool","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"     * Retrieves the current ante.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"     * @return the current {@link Ante} instance","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"    public static Ante getAnte() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        return ante;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"     * Retrieves the current round count.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"     * @return the current round count","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"    public static int getRoundCount() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"        return roundCount;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /** Advances the game to the next round, updating the ante and incrementing the round count. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"    public void nextRound() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"        ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"        roundCount++;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"        // Update ante and blind values and round count","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"        storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"                storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"                Storage.ROUND_NUMBER_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                String.valueOf(roundCount)); // Update Round Count","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"        storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                Storage.ANTE_NUMBER_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"                String.valueOf(ante.getAnteCount())); // Update Ante Count","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"        storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"                Storage.BLIND_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"                String.valueOf(ante.getBlind().getName())); // Update Blind","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"        Round nextRound \u003d classicRound();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"        // Update Holding Hand","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"        for (int i \u003d Storage.HOLDING_HAND_START_INDEX;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"                i \u003c Storage.HOLDING_HAND_START_INDEX + 8;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"                i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"            Card currentCard \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    nextRound.getPlayerHandCards().get(i - Storage.HOLDING_HAND_START_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"                    i,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"                    Storage.cardToString(currentCard)); // Update Holding Hand Cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"        // Update deck","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"        deck \u003d","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"                new Deck(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"                        Storage.DeckFromKey(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"                                storage.getValue(storage.getRunChosen() - 1, Storage.DECK_INDEX)));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"        Storage.isNewDeck \u003d true;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"        startNewRound(nextRound);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /** Initializes a new game by resetting the ante, round count, jokers and decks. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"    public void setupNewGame(DeckType deckType) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"        ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"        ante.setBlind(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"                Storage.BlindFromKey(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"                        storage.getValue(storage.getRunChosen() - 1, Storage.BLIND_INDEX)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"        ante.setAnteCount(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"                Integer.parseInt(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"                        storage.getValue(storage.getRunChosen() - 1, Storage.ANTE_NUMBER_INDEX)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"        roundCount \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"                Integer.parseInt(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"                        storage.getValue(storage.getRunChosen() - 1, Storage.ROUND_NUMBER_INDEX));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jwyk"},"content":"        totalPlays \u003d 4;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"        // Update Jokers","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d Storage.JOKER_HAND_START_INDEX; i \u003c Storage.JOKER_HAND_START_INDEX + 5; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"            if (Objects.equals(storage.getValue(storage.getRunChosen() - 1, i), \"-\")","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    || Objects.equals(storage.getValue(storage.getRunChosen() - 1, i), \"NA\"))","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"                continue;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"                heldJokers.add(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"                        Storage.parseJokerString(storage.getValue(storage.getRunChosen() - 1, i)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jwyk"},"content":"        deck \u003d new Deck(deckType);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jwyk"},"content":"    // @author swethaiscool","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"     * Starts a new round and assigns it to the current round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"     * @param round The new round to start.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"jwyk"},"content":"    private static void startNewRound(Round round) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"        currentRound \u003d round;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"        // Set round number, discards and hands","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jwyk"},"content":"        assert currentRound !\u003d null;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"        int savedPlays \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                Integer.parseInt(storage.getValue(storage.getRunChosen() - 1, Storage.HAND_INDEX));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"        int savedDiscards \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"                Integer.parseInt(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"                        storage.getValue(storage.getRunChosen() - 1, Storage.DISCARD_INDEX));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"flyingapricot"},"content":"        if (savedPlays \u003d\u003d -1) savedPlays \u003d 4;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"flyingapricot"},"content":"        if (savedDiscards \u003d\u003d -1) savedDiscards \u003d 3;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"        currentRound.updatePlays(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"                deck.getDeckName().getName().equals(\"BLUE\") \u0026\u0026 savedPlays \u003d\u003d 4","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"                        ? savedPlays + 1","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"                        : savedPlays);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"        currentRound.updateDiscards(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"                deck.getDeckName().getName().equals(\"RED\") \u0026\u0026 savedDiscards \u003d\u003d 3","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"                        ? savedDiscards + 1","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"                        : savedDiscards);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"flyingapricot"},"content":"        storage.setValue(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"flyingapricot"},"content":"                storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"flyingapricot"},"content":"                Storage.HAND_INDEX,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"flyingapricot"},"content":"                String.valueOf(currentRound.getRemainingPlays())); // Update Number Of Plays","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"flyingapricot"},"content":"        storage.setValue(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"flyingapricot"},"content":"                storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"flyingapricot"},"content":"                Storage.DISCARD_INDEX,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"flyingapricot"},"content":"                String.valueOf(currentRound.getRemainingDiscards())); // Update Number Of Discards","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"flyingapricot"},"content":"        storage.setValue(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"flyingapricot"},"content":"                storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"flyingapricot"},"content":"                Storage.ROUND_SCORE_INDEX,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"flyingapricot"},"content":"                String.valueOf(currentRound.getCurrentScore())); // Update Current Score","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"flyingapricot"},"content":"        // Update save file","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"flyingapricot"},"content":"            storage.updateSaveFile();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"flyingapricot"},"content":"            System.out.println(\"Could not save info.\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"flyingapricot"},"content":"     * Creates a new classic round with predefined settings.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"flyingapricot"},"content":"     * @return A {@code Round} instance configured as a classic round.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"jwyk"},"content":"    private static Round classicRound() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"jwyk"},"content":"        Deck d;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"jwyk"},"content":"            d \u003d new Deck(deck);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"jwyk"},"content":"            d.shuffle();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return new Round(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"                    ante, 4, d, heldJokers, ante.getBlind().getName(), ante.getBlind().getName());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException javatroException) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"flyingapricot"},"content":"            System.out.println(javatroException.getMessage());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"flyingapricot"},"content":"        return null;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * Starts the game by initializing a new set of game parameters. This method is called when the","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * game begins.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while starting the game.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"jwyk"},"content":"    public void beginGame() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"flyingapricot"},"content":"        Round newRound \u003d Objects.requireNonNull(classicRound());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"flyingapricot"},"content":"        // Update round attributes","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"        newRound.setCurrentScore(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"                Integer.parseInt(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"                        storage.getValue(storage.getRunChosen() - 1, Storage.ROUND_SCORE_INDEX)));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"flyingapricot"},"content":"        // Update deck with rest of the cards (If deck is not empty)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"flyingapricot"},"content":"        if (!Storage.isNewDeck) newRound.getDeck().populateWithSavedDeck();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"flyingapricot"},"content":"        // Update savedCards","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"flyingapricot"},"content":"        List\u003cCard\u003e savedCards \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"flyingapricot"},"content":"        int emptyCardCount \u003d 0;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d Storage.HOLDING_HAND_START_INDEX;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"flyingapricot"},"content":"                i \u003c Storage.HOLDING_HAND_START_INDEX + 8;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"flyingapricot"},"content":"                i++) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"flyingapricot"},"content":"            if (storage.getValue(storage.getRunChosen() - 1, i).equals(\"-\")","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"flyingapricot"},"content":"                    || storage.getValue(storage.getRunChosen() - 1, i).equals(\"NA\")) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"flyingapricot"},"content":"                emptyCardCount \u003d emptyCardCount + 1;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"flyingapricot"},"content":"                continue;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"flyingapricot"},"content":"            savedCards.add(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"flyingapricot"},"content":"                    Storage.parseCardString(storage.getValue(storage.getRunChosen() - 1, i)));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"flyingapricot"},"content":"        if (emptyCardCount \u003c 8) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"flyingapricot"},"content":"            newRound.setPlayerHandCards(savedCards);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"flyingapricot"},"content":"        startNewRound(newRound);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"    /** Initializes poker hand play counts at game start */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"    public static void initializePokerHandStats() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"            pokerHandPlayCounts.put(handType, 0);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"-"},"content":"    /** Gets the play count for a specific hand type */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"    public static int getPlayCount(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"        return pokerHandPlayCounts.getOrDefault(handType, 0);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"    /** Increments the play count for a specific hand type */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"Markneoneo"},"content":"    public static void incrementPlayCount(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"        pokerHandPlayCounts.put(handType, getPlayCount(handType) + 1);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-16","isFullCredit":false}],"authorContributionMap":{"Markneoneo":18,"flyingapricot":115,"K-J-Q":2,"-":71,"jwyk":55}},{"path":"src/main/java/javatro/core/JavatroException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * Custom exception class for handling application-specific errors in the Javatro game. Provides","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * factory methods for creating consistent exceptions with colored error messages.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public final class JavatroException extends Exception {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a JavatroException with a colored error message.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * @param message The error message to display (will be colored red)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    public JavatroException(String message) {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"        super(RED + message + END);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a JavatroException with colored message and cause.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     * @param message The error message to display (colored red)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * @param cause The underlying cause of the exception","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    public JavatroException(String message, Throwable cause) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        super(RED + message + END, cause);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    // Region: Factory methods for specific exception types","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"    // @@author JQ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"     * Creates exception for invalid number of cards in a poker hand.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"     * @param minCards Minimum allowed cards","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"     * @param maxCards Maximum allowed cards","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"     * @return Configured exception instance","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidPlayedHand(int minCards, int maxCards) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"                \"A poker hand must contain between \" + minCards + \" and \" + maxCards + \" cards.\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"     * @return Exception for invalid plays per round configuration","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidPlaysPerRound() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Number of plays per round must be greater than 0.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"     * @return Exception for invalid blind score input","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidBlindScore() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Blind score must be greater than or equal to 0!\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"     * @return Exception for null deck configuration","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException invalidDeck() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Deck cannot be null.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating the deck is empty.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when all the cards in the deck have been drawn.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"     * @return A {@code JavatroException} indicating the deck is empty.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException noCardsRemaining() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Deck is empty.\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"     * Creates an exception indicating no plays remaining.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"     * \u003cp\u003eThis exception is thrown when the user tries to play cards when no plays are remaining.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"     * @return A {@code JavatroException} indicating that no plays are remaining.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException noPlaysRemaining() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"No plays remaining.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"    // @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"     * @return Exception for invalid card selection input","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidCardInput() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Invalid input! Please enter valid numbers.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"     * Creates exception for exceeding maximum card selection.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsToSelect Maximum allowed cards","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"     * @return Configured exception instance","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException exceedsMaxCardSelection(int maxCardsToSelect) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"You can only select up to \" + maxCardsToSelect + \" cards.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"     * Creates exception for invalid menu input range.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"     * @param maxRange Maximum valid input value","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"     * @return Configured exception instance","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidMenuInput(int maxRange) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"                \"Invalid input! Please enter a number between 1 and \" + maxRange + \".\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"     * @return Exception for non-numeric input where number expected","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidInputType() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Invalid input! Please enter a number.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"     * @return Exception for missing or empty options title","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidOptionsTitle() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Options title cannot be null or empty.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"     * @return Exception for invalid options list size","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidOptionsSize() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Number of options cannot be null or empty.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"     * @return Exception for null screen reference","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Screen cannot be null.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"     * Creates exception for index out of bounds.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"     * @param index Invalid index that was accessed","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"     * @return Configured exception instance","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException indexOutOfBounds(int index) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Index is out of bounds: \" + index);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"     * Creates exception for missing resource file.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"     * @param fileName Name of missing file","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"     * @return Configured exception instance","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException errorLoadingLogo(String fileName) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Error loading logo from: \" + fileName);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"     * @return Exception for invalid selection limit","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"    public static JavatroException invalidSelectionLimit() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        return new JavatroException(\"Selection limit must be a positive value.\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"K-J-Q"},"content":"    // @@author JQ","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"K-J-Q"},"content":"     * @return Exception when no discards remain","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException noRemainingDiscards() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"No remaining discards available\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"K-J-Q"},"content":"     * @return Exception for exceeding discard limit","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException tooManyDiscards() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Too many cards selected for discarding\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"K-J-Q"},"content":"     * @return Exception for attempting zero discards","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException cannotDiscardZeroCards() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(\"Cannot discard zero cards\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"     * @return Exception for exceeding maximum joker limit","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"K-J-Q"},"content":"    public static JavatroException exceedsMaxJokers() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"K-J-Q"},"content":"        return new JavatroException(","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"K-J-Q"},"content":"                \"Cannot add more Jokers, or the maximum limit will be exceeded.\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-08","isFullCredit":false}],"authorContributionMap":{"Markneoneo":117,"K-J-Q":86}},{"path":"src/main/java/javatro/core/PlanetCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import java.util.EnumMap;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import java.util.Map;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * Represents a planet card associated with a specific poker hand type. Each card provides chip and","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * multiplier increments and can be leveled up to increase these bonuses. Maintains static level","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" * tracking for all hand types.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003ePredefined cards are initialized statically and accessed through factory methods. Level","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" * management affects all instances of a particular hand type.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"public class PlanetCard {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     * Maps each poker hand type to its current enhancement level. Initialized to level 1 for all","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     * hand types.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    public static final Map\u003cPokerHand.HandType, Integer\u003e LEVELS \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"            new EnumMap\u003c\u003e(PokerHand.HandType.class);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * Registry of all predefined planet cards mapped to their corresponding hand types. Populated","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * during class initialization.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    private static final Map\u003cPokerHand.HandType, PlanetCard\u003e CARDS \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            new EnumMap\u003c\u003e(PokerHand.HandType.class);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    static {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        // Initialize base levels for all known hand types","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"            // Take from storage and update","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"            Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"            if (storage.getRunChosen() \u003c storage.getNumberOfRuns()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"                // Saved Run, load data from csv","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.HIGH_CARD, Storage.HIGH_CARD_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.PAIR, Storage.PAIR_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.TWO_PAIR, Storage.TWO_PAIR_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.THREE_OF_A_KIND, Storage.THREE_OF_A_KIND_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.STRAIGHT, Storage.STRAIGHT_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.FLUSH, Storage.FLUSH_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.FULL_HOUSE, Storage.FULL_HOUSE_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.FOUR_OF_A_KIND, Storage.FOUR_OF_A_KIND_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.STRAIGHT_FLUSH, Storage.STRAIGHT_FLUSH_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.ROYAL_FLUSH, Storage.ROYAL_FLUSH_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.FIVE_OF_A_KIND, Storage.FIVE_OF_A_KIND_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.FLUSH_HOUSE, Storage.FLUSH_HOUSE_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(PokerHand.HandType.FLUSH_FIVE, Storage.FLUSH_FIVE_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"            } else {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"                LEVELS.put(handType, 1);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        // Populate predefined planet cards with their configurations","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.HIGH_CARD,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Pluto\", 10, 1, PokerHand.HandType.HIGH_CARD, \"planet_pluto.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.PAIR,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Mercury\", 15, 1, PokerHand.HandType.PAIR, \"planet_mercury.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.TWO_PAIR,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Uranus\", 20, 1, PokerHand.HandType.TWO_PAIR, \"planet_uranus.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.THREE_OF_A_KIND,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"                        \"Venus\", 20, 2, PokerHand.HandType.THREE_OF_A_KIND, \"planet_venus.txt\"));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.STRAIGHT,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Saturn\", 30, 3, PokerHand.HandType.STRAIGHT, \"planet_saturn.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.FLUSH,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Jupiter\", 15, 2, PokerHand.HandType.FLUSH, \"planet_jupiter.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.FULL_HOUSE,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Earth\", 25, 2, PokerHand.HandType.FULL_HOUSE, \"planet_earth.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.FOUR_OF_A_KIND,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"                        \"Mars\", 30, 3, PokerHand.HandType.FOUR_OF_A_KIND, \"planet_mars.txt\"));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.STRAIGHT_FLUSH,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"                        \"Neptune\", 40, 4, PokerHand.HandType.STRAIGHT_FLUSH, \"planet_neptune.txt\"));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.ROYAL_FLUSH,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"                        \"Neptune\", 40, 4, PokerHand.HandType.ROYAL_FLUSH, \"planet_neptune.txt\"));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.FIVE_OF_A_KIND,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"                        \"Planet X\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"                        35,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                        3,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                        PokerHand.HandType.FIVE_OF_A_KIND,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                        \"planet_planet_x.txt\"));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.FLUSH_HOUSE,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Ceres\", 40, 4, PokerHand.HandType.FLUSH_HOUSE, \"planet_ceres.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        CARDS.put(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.FLUSH_FIVE,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"                new PlanetCard(\"Eris\", 50, 3, PokerHand.HandType.FLUSH_FIVE, \"planet_eris.txt\"));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"    private final String name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"    private final int chipIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"    private final int multiIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"    private final PokerHand.HandType handType;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"    private final String path;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a planet card with specified attributes. Private to enforce singleton instances","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"     * through predefined cards.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"     * @param name Display name of the planet","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"     * @param chipIncrement Base value added to chip count per level","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"     * @param multiIncrement Base value added to multiplier per level","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"     * @param handType Associated poker hand type","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"     * @param path Resource path for planet visualization","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"    private PlanetCard(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"            String name,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"            int chipIncrement,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"            int multiIncrement,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"            PokerHand.HandType handType,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"            String path) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"        this.name \u003d name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        this.chipIncrement \u003d chipIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"        this.multiIncrement \u003d multiIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"        this.handType \u003d handType;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"        this.path \u003d path;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"    // Region: Accessors --------------------------------------------------------","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"     * Retrieves the predefined planet card for a specific hand type.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"     * @param handType Poker hand type to look up","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"     * @return Associated planet card instance","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"     * @throws AssertionError if no card exists for the specified hand type","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"    public static PlanetCard getForHand(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard card \u003d CARDS.get(handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        assert card !\u003d null : \"Missing planet card configuration for: \" + handType;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        return card;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"     * Gets current enhancement level for a hand type.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"     * @param handType Poker hand type to check","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"     * @return Current level (minimum 1)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"    public static int getLevel(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"        return LEVELS.get(handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"     * @return Base chip increment without level scaling","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"    public int getChipIncrement() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"        return chipIncrement;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"     * Calculates total chip increment for a hand type at its current level.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"     * @param handType Poker hand type to check","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"     * @return Total chip value including level scaling","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"    public static int getChipIncrement(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard card \u003d CARDS.get(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"        assert card !\u003d null : \"Missing chip configuration for: \" + handType;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"        return card !\u003d null ? card.chipIncrement : 0;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"     * @return Base multiplier increment without level scaling","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"    public int getMultiIncrement() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"        return multiIncrement;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"     * Calculates total multiplier increment for a hand type at its current level.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"     * @param handType Poker hand type to check","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"     * @return Total multiplier value including level scaling","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"    public static int getMultiIncrement(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard card \u003d CARDS.get(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"        assert card !\u003d null : \"Missing multiplier configuration for: \" + handType;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"        return card !\u003d null ? card.multiIncrement : 0;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"     * Enhances this card\u0027s associated hand type by one level. Affects all instances using this hand","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"     * type.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"    public void apply() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"        LEVELS.put(handType, LEVELS.get(handType) + 1);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"        if (Storage.saveActive) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"            Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"            // Update Planet Cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"                    Storage.HIGH_CARD_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.HIGH_CARD)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"                    Storage.PAIR_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.PAIR)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"                    Storage.TWO_PAIR_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.TWO_PAIR)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"                    Storage.THREE_OF_A_KIND_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.THREE_OF_A_KIND)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"                    Storage.STRAIGHT_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.STRAIGHT)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"                    Storage.FLUSH_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.FLUSH)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"                    Storage.FULL_HOUSE_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.FULL_HOUSE)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"                    Storage.FOUR_OF_A_KIND_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.FOUR_OF_A_KIND)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"                    Storage.STRAIGHT_FLUSH_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.STRAIGHT_FLUSH)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"                    Storage.ROYAL_FLUSH_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.ROYAL_FLUSH)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"                    Storage.FIVE_OF_A_KIND_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.FIVE_OF_A_KIND)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"Markneoneo"},"content":"                    Storage.FLUSH_HOUSE_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.FLUSH_HOUSE)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"Markneoneo"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"Markneoneo"},"content":"                    Storage.FLUSH_FIVE_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"Markneoneo"},"content":"                    String.valueOf(PlanetCard.getLevel(PokerHand.HandType.FLUSH_FIVE)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"Markneoneo"},"content":"            try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"Markneoneo"},"content":"                storage.updateSaveFile();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(\"Failed To Save\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"     * @return Planetary display name","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"Markneoneo"},"content":"    public String getName() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"Markneoneo"},"content":"        return name;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"Markneoneo"},"content":"     * @return Associated poker hand type","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"Markneoneo"},"content":"    public PokerHand.HandType getHandType() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"        return handType;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"Markneoneo"},"content":"     * @return Resource path for planetary visualization","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"    public String getPath() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"        return path;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":291}},{"path":"src/main/java/javatro/core/PokerHand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * Represents the evaluated result of a poker hand with tracking for progression levels and usage","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * counts. The hand\u0027s value is determined by its type, which includes base chips and multipliers","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" * adjusted by level. Play counts are managed externally by {@link JavatroCore}.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * @param handType The classification of the poker hand determining base values and increments","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"public record PokerHand(HandType handType) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"     * Calculates the total chip value adjusted by the hand\u0027s current progression level. Formula:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"     * base_chips + (current_level - 1) * level_increment","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     * @return Total chips adjusted for current level","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    public int getChips() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"        int base \u003d handType.getChips();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        int level \u003d PlanetCard.getLevel(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        assert level \u003e\u003d 1 : \"Level must be ≥ 1\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        int chipIncrement \u003d PlanetCard.getChipIncrement(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        return base + (level - 1) * chipIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     * Calculates the multiplier value adjusted by the hand\u0027s current progression level. Formula:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     * base_multiplier + (current_level - 1) * multiplier_increment","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"     * @return Total multiplier adjusted for current level","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    public int getMultiplier() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        int base \u003d handType.getMultiplier();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        int level \u003d PlanetCard.getLevel(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        assert level \u003e\u003d 1 : \"Level must be ≥ 1\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        int multiIncrement \u003d PlanetCard.getMultiIncrement(handType);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        return base + (level - 1) * multiIncrement;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"     * Gets the display name of the poker hand type.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     * @return Formal name of the hand type","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    public String getHandName() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        return handType.getHandName();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"     * Retrieves the number of times this hand type has been played.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     * @return Current play count from external tracking system","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    public int getPlayCount() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        return JavatroCore.getPlayCount(handType);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"     * Increments the play counter for this hand type in the external tracker. Returns the same","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"     * instance since state is managed externally.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"     * @return Current instance after updating play count","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    public PokerHand incrementPlayed() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        JavatroCore.incrementPlayCount(handType);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        return this;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    public String toString() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        // Includes level-adjusted chips but base multiplier (original design choice)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        return String.format(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"                \"%s (Level: %d, Chips: %d, Multiplier: %d, Played: %d)\",","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"                handType.getHandName(),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getLevel(handType),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                getChips(),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                handType.getMultiplier(), // Base multiplier per original implementation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                getPlayCount());","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"     * Enumeration of poker hand types with associated base values and progression parameters. Each","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"     * hand type has: - Display name - Base chip value - Base multiplier value Level increments are","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"     * managed externally by {@link PlanetCard}.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"    public enum HandType {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        // Standard poker hands","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        FLUSH_FIVE(\"Flush Five\", 160, 16),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        FLUSH_HOUSE(\"Flush House\", 140, 14),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"        FIVE_OF_A_KIND(\"Five of a Kind\", 120, 12),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"        ROYAL_FLUSH(\"Royal Flush\", 100, 8),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        STRAIGHT_FLUSH(\"Straight Flush\", 100, 8),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        FOUR_OF_A_KIND(\"Four of a Kind\", 60, 7),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        FULL_HOUSE(\"Full House\", 40, 4),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"        FLUSH(\"Flush\", 35, 4),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        STRAIGHT(\"Straight\", 30, 4),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        THREE_OF_A_KIND(\"Three of a Kind\", 30, 3),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        TWO_PAIR(\"Two Pair\", 20, 2),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        PAIR(\"Pair\", 10, 2),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        HIGH_CARD(\"High Card\", 5, 1);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"        private final String handName;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        private final int chips;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        private final int multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"         * Creates a hand type specification.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"         * @param handName Display name","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"         * @param chips Base chip value","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"         * @param multiplier Base multiplier value","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"        HandType(String handName, int chips, int multiplier) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"            this.handName \u003d handName;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"            this.chips \u003d chips;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"            this.multiplier \u003d multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"         * Gets the display name of the hand type.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"         * @return Formal hand name","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        public String getHandName() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"            return handName;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"         * Gets the base chip value before level adjustments.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"         * @return Base chips for this hand type","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"        public int getChips() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"            return chips;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"         * Gets the base multiplier value before level adjustments.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"         *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"         * @return Base multiplier for this hand type","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"         */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"        public int getMultiplier() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"            return multiplier;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":149}},{"path":"src/main/java/javatro/core/Score.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"/** Contains the algorithm for calculating the final score and played hand. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"public class Score {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"    public double totalChips \u003d 0;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    public double totalMultiplier \u003d 0;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    public static List\u003cCard\u003e playedCardsList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    public ArrayList\u003cJoker\u003e jokerList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"    private final BossType bossType;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Default constructor */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    public Score() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"        this(BossType.NONE);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"     * Creates a new score calculator with the given boss type.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"     * @param bossType The boss type for this round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    public Score(BossType bossType) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"        this.bossType \u003d bossType;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"     * Returns the final score from total chips * total multiplier, after rounding.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"     * @param totalChips The chip total of the played hand","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"     * @param totalMultiplier The multiplier total of the played hand","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    private static long calculateFinalScore(double totalChips, double totalMultiplier) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"        return (long) Math.ceil(Math.round(totalChips) * Math.round(totalMultiplier));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /** Returns the score of the played hand by calculating the value of the hand. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public long getScore(PokerHand pokerHand, List\u003cCard\u003e playedCardList, HeldJokers heldJokers)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        // Highlight any boss blind effects that apply here","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"        // Cannot play suits, cannot play Face Cards, Must play 5 cards","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"        jokerList \u003d heldJokers.getJokers();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        playedCardsList \u003d playedCardList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"        // First add pokerHand\u0027s chip and mult base to the scores.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"        totalChips \u003d pokerHand.getChips();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"        totalMultiplier \u003d pokerHand.getMultiplier();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"        // Score the cards and apply any Jokers that have effects on play here.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"        for (Card currentCard : playedCardList) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"            if (isValidCard(currentCard)) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"                scoreCard(currentCard);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // From here, check each joker in heldJokers applies post round effects, in the order they","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // are placed.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c jokerList.size(); i++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"            Joker currentJoker \u003d jokerList.get(i);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"            if (currentJoker.scoreType \u003d\u003d Joker.ScoreType.AFTERHANDPLAY) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"                currentJoker.interact(this, null);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"        // Round the score and return the correct score value.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"        return calculateFinalScore(totalChips, totalMultiplier);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns whether the card should be considered for scoring. This boolean will return false if","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * the card falls under boss blind conditions.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"     * @param card The card to be checked for validity","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"    private boolean isValidCard(Card card) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Apply boss blind logic to return this as true or false based on the card\u0027s","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // characteristics","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"        switch (bossType) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"            case THE_CLUB:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"                // The Club: All Club Cards cannot score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"                if (card.suit() \u003d\u003d Card.Suit.CLUBS) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"                    return false;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"                }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"            case THE_WINDOW:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"                // The Window: All Diamond Cards cannot score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"                if (card.suit() \u003d\u003d Card.Suit.DIAMONDS) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"                    return false;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"                }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"            case THE_HEAD:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"                // The Head: All Heart Cards cannot score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"                if (card.suit() \u003d\u003d Card.Suit.HEARTS) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"                    return false;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"                }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"            case THE_GOAD:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"                // The Goad: All Spade Cards cannot score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"                if (card.suit() \u003d\u003d Card.Suit.SPADES) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"                    return false;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"                }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"            case THE_PLANT:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"                // The Plant: All face(K,Q,J) cards cannot score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"                Card.Rank rank \u003d card.rank();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"                if (rank \u003d\u003d Card.Rank.KING || rank \u003d\u003d Card.Rank.QUEEN || rank \u003d\u003d Card.Rank.JACK) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"                    return false;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"                }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"            default:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"                // No restrictions for other boss types","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jwyk"},"content":"        return true;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"     * Adds the card\u0027s value to the score, and check for any joker interactions with the card.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jwyk"},"content":"     * @param card The card to be scored","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jwyk"},"content":"    private void scoreCard(Card card) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jwyk"},"content":"        totalChips +\u003d card.getChips();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jwyk"},"content":"        // From here, check each joker in heldJokers can apply effects on card play, in the","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jwyk"},"content":"        // order they are placed.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c jokerList.size(); i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jwyk"},"content":"            Joker currentJoker \u003d jokerList.get(i);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jwyk"},"content":"            if (currentJoker.scoreType \u003d\u003d Joker.ScoreType.ONCARDPLAY) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jwyk"},"content":"                currentJoker.interact(this, card);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"K-J-Q":50,"-":15,"jwyk":73}},{"path":"src/main/java/javatro/core/jokers/HeldJokers.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.core.JavatroCore.heldJokers;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"/** Holds all the Jokers the player has in an ArrayList of type Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"public class HeldJokers {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    // By Default, HOLDING_LIMIT is 5.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    public static final int HOLDING_LIMIT \u003d 5;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    public ArrayList\u003cJoker\u003e heldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    /** Constructor for the HeldJokers Class. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    public HeldJokers() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new ArrayList\u003cJoker\u003e(5);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    /** Adds 1 Joker to the HeldJokers Class. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    public void add(Joker joker) throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"        if (heldJokers.size() \u003e 5) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"            throw JavatroException.exceedsMaxJokers();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(joker);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"        if (Storage.saveActive) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"            Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"            // Update Joker Cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"            for (int j \u003d 0; j \u003c HeldJokers.HOLDING_LIMIT; j++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"                if (heldJokers.isEmpty() || j \u003e\u003d heldJokers.size()) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"                            storage.getRunChosen() - 1, Storage.JOKER_HAND_START_INDEX + j, \"-\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"                } else {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"                            Storage.JOKER_HAND_START_INDEX + j,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"                            Storage.jokerToString(heldJokers.get(j)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"                }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"            storage.updateSaveFile();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"    /** Removes the Joker from the specified index. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"    public void remove(int index) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"        if (index \u003c 0 || index \u003e\u003d heldJokers.size()) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"            throw JavatroException.indexOutOfBounds(index);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"        heldJokers.remove(index);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"    /** Returns a soft copy of the ArrayList of HeldJokers. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"    public ArrayList\u003cJoker\u003e getJokers() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        return heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"flyingapricot":1,"-":3,"jwyk":57}},{"path":"src/main/java/javatro/core/jokers/Joker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":" * Represents a Joker card. Each Joker card has a description and a string representation of the","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":" * Joker Object.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"public abstract class Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"    protected static String name;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"    protected static String identifierName;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"    protected static String description;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"    protected static String path;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"    public ScoreType scoreType;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    /** Enum representing the type of Joker Card. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    public enum ScoreType {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        AFTERHANDPLAY,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        ONCARDPLAY,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"     * Abstract method of Joker for scoring purposes. The playedCard parameter should be null if not","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"     * required. Overridden by Joker subclasses.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"     * @param playedCard Card Class containing the card played and to be interacted with (if at","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"     *     all).","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"     * @param scoreClass Score Class containing relevant information such as totalChips,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"     *     totalMultiplier.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    public abstract void interact(Score scoreClass, Card playedCard);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    public String getName() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"        return name;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    public String getIdentifierName() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        return identifierName;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        return description;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"    public String getPath() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        return path;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"jwyk":50}},{"path":"src/main/java/javatro/core/jokers/JokerFactory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addchip.OddToddJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addchip.ScaryFaceJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.AbstractJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.GluttonousJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.GreedyJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.HalfJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.LustyJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.WrathfulJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import java.util.Random;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import java.util.function.Supplier;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"/** Factory for creating and distributing Jokers. */","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"public class JokerFactory {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"    private static final List\u003cSupplier\u003cJoker\u003e\u003e jokerSuppliers \u003d","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"            List.of(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"                    OddToddJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"                    ScaryFaceJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"                    AbstractJoker::new,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"                    GluttonousJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"                    GreedyJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"                    HalfJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"                    LustyJoker::new,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"                    WrathfulJoker::new);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    private static final Random random \u003d new Random();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"     * Returns a random Joker from the above list.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"     * @return A Joker from the List of Jokers above.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    public static Joker createRandomJoker() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        return jokerSuppliers.get(random.nextInt(jokerSuppliers.size())).get();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"jwyk":41}},{"path":"src/main/java/javatro/core/jokers/addchip/OddToddJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addchip;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"/** Represents a OddToddJoker Joker */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"public class OddToddJoker extends Joker {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    public OddToddJoker() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Odd Todd\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        identifierName \u003d \"ODDTODDJOKER\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"                        \"Played cards with %s%sOdd%s%s rank gives %s%s+31 Chips%s%s when scored (A,\"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"                                + \" 9, 7, 5, 3)\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"                        YELLOW, BOLD, END, BLACK_B, BLUE, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"        path \u003d \"joker_odd_todd.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"        if ((playedCard.getChips()) % 2 !\u003d 0) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalChips +\u003d 31;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        return \"+31 Chips for Odd\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"jwyk":42}},{"path":"src/main/java/javatro/core/jokers/addchip/ScaryFaceJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addchip;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"/** Represents a AbstractJoker Joker, based off the Abstract Joker of Balatro. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"public class ScaryFaceJoker extends Joker {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    public ScaryFaceJoker() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Scary Face\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        identifierName \u003d \"SCARYFACEJOKER\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"                        \"Played %s%sFace%s%s (K, Q, J) Cards give %s%s+30 Chips%s%s\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"                        YELLOW, BOLD, END, BLACK_B, BLUE, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"        path \u003d \"joker_scary_face.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        if (playedCard.rank() \u003d\u003d Card.Rank.KING","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"                || playedCard.rank() \u003d\u003d Card.Rank.QUEEN","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"                || playedCard.rank() \u003d\u003d Card.Rank.JACK) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalChips +\u003d 30;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"        return \"+30 Chips for Face\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"jwyk":43}},{"path":"src/main/java/javatro/core/jokers/addmult/AbstractJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"/** Represents a AbstractJoker Joker, based off the Abstract Joker of Balatro. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"public class AbstractJoker extends Joker {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    private int numberOfJokers;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"    public AbstractJoker() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Abstract\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        identifierName \u003d \"ABSTRACTJOKER\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"        this.numberOfJokers \u003d 1;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"                        \"%s%s+3 Mult%s%s for each %s%sJoker%s%s card held (Currently %s%s+%d%s%s\"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"                                + \" Mult)\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"                        RED,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"                        BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"                        YELLOW,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"                        BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"                        RED,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"                        numberOfJokers * 3,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"                        BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"        path \u003d \"joker_abstract.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.AFTERHANDPLAY;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"        this.numberOfJokers \u003d scoreClass.jokerList.size();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"                        \"%s%s+3 Mult%s%s for each %s%sJoker%s%s card held (Currently %s%s+%d\"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"                                + \" Mult%s%s)\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"                        RED,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"                        BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"                        YELLOW,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"                        BLACK_B,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"                        RED,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"                        BOLD,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"                        numberOfJokers * 3,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"                        END,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"                        BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"        scoreClass.totalMultiplier +\u003d numberOfJokers * 3;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"        return \"+3 Mult per Joker\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"jwyk":70}},{"path":"src/main/java/javatro/core/jokers/addmult/GluttonousJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"/** Represents a GluttonousJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"public class GluttonousJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    public GluttonousJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Gluttonous\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        identifierName \u003d \"GLUTTONOUSJOKER\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"                        \"Played cards with %s%sClub%s%s suit give %s%s+3 Mult%s%s when scored\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"                        BLUE, BOLD, END, BLACK_B, RED, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"        path \u003d \"joker_gluttonous.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        if (playedCard.suit() \u003d\u003d Card.Suit.CLUBS) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        return \"+3 Mult for Clubs\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"jwyk":41}},{"path":"src/main/java/javatro/core/jokers/addmult/GreedyJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.ORANGE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"/** Represents a GreedyJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"public class GreedyJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    public GreedyJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Greedy\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        identifierName \u003d \"GREEDYJOKER\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"                        \"Played cards with %s%sDiamond%s%s suit give %s%s+3 Mult%s%s when scored\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"                        ORANGE, BOLD, END, BLACK_B, RED, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"        path \u003d \"joker_greedy.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        if (playedCard.suit() \u003d\u003d Card.Suit.DIAMONDS) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        return \"+3 Mult for Diamond\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"jwyk":41}},{"path":"src/main/java/javatro/core/jokers/addmult/HalfJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"/** Represents a HalfJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"public class HalfJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    public HalfJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Half\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        identifierName \u003d \"HALFJOKER\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"                        \"%s%s+20 Mult%s%s if played hand has %s%s3 or fewer%s%s cards\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"                        RED, BOLD, END, BLACK_B, YELLOW, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"        path \u003d \"joker_half.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.AFTERHANDPLAY;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        if (scoreClass.playedCardsList.size() \u003c\u003d 3) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 20;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"        return \"+20 Mult for \u003c\u003d 3 Cards\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"jwyk":40}},{"path":"src/main/java/javatro/core/jokers/addmult/LustyJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"/** Represents a LustyJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"public class LustyJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"    public LustyJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Lusty\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        identifierName \u003d \"LUSTYJOKER\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"                        \"Played cards with %s%sHeart%s%s suit give %s%s+3 Mult%s%s when scored\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"                        RED, BOLD, END, BLACK_B, RED, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"        path \u003d \"joker_lusty.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"        if (playedCard.suit() \u003d\u003d Card.Suit.HEARTS) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"        return \"+3 Mult for Hearts\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"jwyk":40}},{"path":"src/main/java/javatro/core/jokers/addmult/WrathfulJoker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"// @@author jwyk","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.PURPLE;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"/** Represents a WrathfulJoker Joker. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"public class WrathfulJoker extends Joker {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"    public WrathfulJoker() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"        super();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"        name \u003d \"Wrathful\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"        identifierName \u003d \"WRATHFULJOKER\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        description \u003d","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"                String.format(","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"                        \"Played cards with %s%sSpade%s%s suit give %s%s+3 Mult%s%s when scored\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"                        PURPLE, BOLD, END, BLACK_B, RED, BOLD, END, BLACK_B);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"        path \u003d \"joker_wrathful.txt\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"        this.scoreType \u003d ScoreType.ONCARDPLAY;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    public void interact(Score scoreClass, Card playedCard) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"        if (playedCard.suit() \u003d\u003d Card.Suit.SPADES) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"            scoreClass.totalMultiplier +\u003d 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    @Override","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    public String toString() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        return \"+3 Mult for Spade\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"jwyk":41}},{"path":"src/main/java/javatro/core/jokers/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":" * The {@code jokers} package contains the joker logic and data structures necessary for","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * instantiating and creating Jokers.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":" *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":" * \u003cp\u003eThis package is responsible for handling the distribution and logic of Jokers.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":" *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":" * \u003ch2\u003eClasses in this package:\u003c/h2\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":" *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.jokers.Joker} - Represents a {@code Joker} abstract class.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.jokers.JokerFactory} - Manages the creation of Jokers.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.jokers.HeldJokers} - Represents the player\u0027s current Jokers.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers;","lastModifiedDate":"2025-04-06","isFullCredit":false}],"authorContributionMap":{"-":2,"jwyk":13}},{"path":"src/main/java/javatro/core/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":" * The {@code core} package contains the core game logic and data structures necessary for managing","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * the game state, rounds, cards, and hands.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis package is responsible for handling the deck, player hands, and round mechanics while","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * interacting with the game manager and view components.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eClasses in this package:\u003c/h2\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.Card} - Represents an individual playing card.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.Deck} - Manages the deck of cards used in the game.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" *   \u003cli\u003e{@link javatro.core.HandResult} - Stores and evaluates the result of a player\u0027s hand.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.HoldingHand} - Represents the player\u0027s current hand.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   \u003cli\u003e{@link javatro.core.JavatroCore} - The main game model responsible for game state and round","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":" *       management.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":" *   \u003cli\u003e{@link javatro.core.PokerHand} - Defines and evaluates different types of poker hands.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":" *   \u003cli\u003e{@link javatro.core.Round} - Represents an individual game round.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":12,"-":5,"jwyk":4}},{"path":"src/main/java/javatro/core/round/Round.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core.round;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.*;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.Deck.DeckType;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.round.RoundActions.ActionResult;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"/** Represents a round in the Javatro game. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"public class Round {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"    /** The state of the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"    private final RoundState state;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    /** The configuration of the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"    private final RoundConfig config;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    /** The observer pattern implementation. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"    private final RoundObservable observable;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"     * Constructs a new round with detailed configuration.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param ante The ante configuration containing the target score for this round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param remainingPlays The initial number of plays allowed in this round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param deck The deck of cards to be used for this round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param heldJokers The player\u0027s collection of jokers available for this round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param roundName The display name for this round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param roundDescription A detailed description of the round\u0027s rules or theme","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws JavatroException If any of the provided parameters are invalid","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Round(","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"            Ante ante,","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"            Deck deck,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"            HeldJokers heldJokers,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"            String roundName,","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"            String roundDescription)","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"        validateParameters(ante, remainingPlays, deck);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        // Create config with round name and description","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        this.config \u003d new RoundConfig(roundName, roundDescription, ante.getRoundScore());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"        // Create state with initial values","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.state \u003d","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new RoundState(","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"                        0, RoundConfig.MAX_DISCARDS_PER_ROUND, remainingPlays, heldJokers, deck);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        // Apply special deck modifications","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"        applyDeckVariants(deck);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"        // Apply special rules based on ante configuration","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"        applyAnteInvariants(ante);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"        // Apply boss type","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        applyBossVariants();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"        // Create observable for notifications","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"        this.observable \u003d new RoundObservable(this);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"        validatePostConstruction();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"     * Constructs a new round with specified boss type","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @warning This constructor is not intended for use in normal gameplay. It is only for testing","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *     purposes.","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"     * @param ante The ante configuration to use","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"     * @param remainingPlays The number of plays allowed in this round","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"     * @param deck The deck of cards to be used for this round","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"     * @param heldJokers The player\u0027s collection of jokers available for this round","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If any of the provided parameters are invalid","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public Round(Ante ante, int remainingPlays, Deck deck, HeldJokers heldJokers, BossType bossType)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"        this(ante, remainingPlays, deck, heldJokers, \"Default Round\", \"Default Description\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"        resetVarients();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"        applyDeckVariants(deck);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"        applyAnteInvariants(ante);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"        setBossType(bossType);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /** Resets the boss type and deck variants to their default values. */","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"    private void resetVarients() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"        this.config.setBossType(BossType.NONE);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"        this.state.setRemainingDiscards(RoundConfig.MAX_DISCARDS_PER_ROUND);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"        this.state.setRemainingPlays(3);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"        this.config.setMinHandSize(RoundConfig.DEFAULT_MIN_HAND_SIZE);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"        this.config.setMaxHandSize(RoundConfig.DEFAULT_MAX_HAND_SIZE);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"     * Validates the input parameters for round creation.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param ante The ante configuration to validate","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @param remainingPlays The number of plays to validate","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @param deck The deck to validate","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws JavatroException If validation fails for any parameter","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void validateParameters(Ante ante, int remainingPlays, Deck deck)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"        if (ante.getRoundScore() \u003c 0) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidBlindScore();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"        if (remainingPlays \u003c\u003d 0) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidPlaysPerRound();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"        if (deck \u003d\u003d null) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidDeck();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"     * Applies special rules based on the deck variant.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @param deck The deck to check for special variants","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"K-J-Q"},"content":"    private void applyDeckVariants(Deck deck) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"        DeckType deckName \u003d deck.getDeckName();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"        if (deckName \u003d\u003d DeckType.RED) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"            this.state.increaseRemainingDiscards(1);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"        } else if (deckName \u003d\u003d DeckType.BLUE) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"            this.state.setRemainingPlays(this.state.getRemainingPlays() + 1);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"     * Applies special rules based on the ante configuration.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @param ante The ante configuration to check for special rules","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"    private void applyAnteInvariants(Ante ante) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"        if (ante.getBlind() \u003d\u003d Ante.Blind.BOSS_BLIND) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"            BossType randomBoss \u003d BossType.getRandomBossType();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"            this.config.setBossType(randomBoss);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /** Applies special rules based on the selected boss type. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"    private void applyBossVariants() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"        BossType bossType \u003d this.config.getBossType();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"        switch (bossType) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"            case THE_NEEDLE:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"                this.state.setRemainingPlays(1);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"            case THE_WATER:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"                this.state.setRemainingDiscards(0);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"            case THE_PSYCHIC:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"                this.config.setMaxHandSize(5);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"K-J-Q"},"content":"                this.config.setMinHandSize(5);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"K-J-Q"},"content":"            case NONE:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"K-J-Q"},"content":"            default:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /** Validates the post-construction state of the round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"K-J-Q"},"content":"    private void validatePostConstruction() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"        assert this.state.getCurrentScore() \u003d\u003d 0 : \"Initial score must be zero\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"K-J-Q"},"content":"        assert this.state.getPlayerHand().getHand().size() \u003d\u003d RoundConfig.INITIAL_HAND_SIZE","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"                : \"Player should have exactly \"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"                        + RoundConfig.INITIAL_HAND_SIZE","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"                        + \" cards initially\";","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Constructs a new round with the specified ante and blind settings without specifying round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * name and description.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public Round(Ante ante, int remainingPlays, Deck deck, HeldJokers heldJokers)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"        this(ante, remainingPlays, deck, heldJokers, \"Default Round\", \"Default Description\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"K-J-Q"},"content":"     * Registers a listener for round state changes.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * @param pcl The property change listener to register","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"flyingapricot"},"content":"    public void addPropertyChangeListener(PropertyChangeListener pcl) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"K-J-Q"},"content":"        observable.addPropertyChangeListener(pcl);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /** Notifies all registered observers of changes in the round state. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"flyingapricot"},"content":"    public void updateRoundVariables() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"K-J-Q"},"content":"        observable.updateRoundVariables(state, config);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"K-J-Q"},"content":"     * Plays a selection of cards from the player\u0027s hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * @param cardIndices Indices of cards to play from the holding hand","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * @throws JavatroException If the play is invalid or no plays remain","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"K-J-Q"},"content":"    public void playCards(List\u003cInteger\u003e cardIndices) throws JavatroException {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"K-J-Q"},"content":"        ActionResult result \u003d RoundActions.playCards(state, config, cardIndices);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"K-J-Q"},"content":"        state.setChosenCards(result.getCards());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"K-J-Q"},"content":"        state.addScore(result.getPointsEarned());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"K-J-Q"},"content":"        state.decrementPlays();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"K-J-Q"},"content":"        observable.updateRoundVariables(state, config);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"K-J-Q"},"content":"     * Discards a selection of cards from the player\u0027s hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * @param cardIndices Indices of cards to discard from the holding hand","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * @throws JavatroException If the discard is invalid or no discards remain","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"jwyk"},"content":"    public void discardCards(List\u003cInteger\u003e cardIndices) throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"K-J-Q"},"content":"        ActionResult result \u003d RoundActions.discardCards(state, config, cardIndices);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"K-J-Q"},"content":"        state.setChosenCards(result.getCards());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"K-J-Q"},"content":"        state.decrementDiscards();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"K-J-Q"},"content":"        observable.updateRoundVariables(state, config);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"K-J-Q"},"content":"     * Gets the current score accumulated in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"K-J-Q"},"content":"     * @return The current score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"jwyk"},"content":"    public long getCurrentScore() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"K-J-Q"},"content":"        return state.getCurrentScore();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"flyingapricot"},"content":"    public void setCurrentScore(int score) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"flyingapricot"},"content":"        state.addScore(-1 * state.getCurrentScore());","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"flyingapricot"},"content":"        state.addScore(score);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"K-J-Q"},"content":"     * Gets the target score needed to win this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"K-J-Q"},"content":"     * @return The blind score target","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"K-J-Q"},"content":"    public int getBlindScore() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"K-J-Q"},"content":"        return config.getBlindScore();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"K-J-Q"},"content":"     * Gets the number of remaining discards available to the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"K-J-Q"},"content":"     * @return The number of remaining discards","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingDiscards() {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"K-J-Q"},"content":"        return state.getRemainingDiscards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"K-J-Q"},"content":"     * Gets the number of remaining plays available to the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"K-J-Q"},"content":"     * @return The number of remaining plays","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingPlays() {","lastModifiedDate":"2025-03-02","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"K-J-Q"},"content":"        return state.getRemainingPlays();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"K-J-Q"},"content":"     * Gets the player\u0027s current hand of cards.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"K-J-Q"},"content":"     * @return The player\u0027s hand","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"K-J-Q"},"content":"    public HoldingHand getPlayerHand() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"K-J-Q"},"content":"        return state.getPlayerHand();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"K-J-Q"},"content":"     * Gets the player\u0027s current hand of cards as a list.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"K-J-Q"},"content":"     * @return The player\u0027s hand as a list of cards","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"K-J-Q"},"content":"    public List\u003cCard\u003e getPlayerHandCards() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"K-J-Q"},"content":"        return state.getPlayerHandCards();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"K-J-Q"},"content":"     * Gets the player\u0027s current held jokers.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"K-J-Q"},"content":"     * @return The player\u0027s jokers","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"K-J-Q"},"content":"    public HeldJokers getPlayerJokers() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"K-J-Q"},"content":"        return state.getPlayerJokers();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"Markneoneo"},"content":"     * Checks if the game is lost based on game rules.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"Markneoneo"},"content":"     * @return true if the game is lost, false otherwise","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"Markneoneo"},"content":"    public boolean isLost() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"flyingapricot"},"content":"        if (state.getRemainingPlays() \u003c\u003d 0 \u0026\u0026 !isWon()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"flyingapricot"},"content":"            return true;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"Markneoneo"},"content":"        // Game ends if no plays are remaining","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"flyingapricot"},"content":"        return false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"K-J-Q"},"content":"     * Checks if the round was won by the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"K-J-Q"},"content":"     * @return true if the player won the round, false otherwise","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"K-J-Q"},"content":"    public boolean isWon() {","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"flyingapricot"},"content":"        return state.getCurrentScore() \u003e\u003d config.getBlindScore();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"K-J-Q"},"content":"     * Checks if the round is over based on game rules.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"K-J-Q"},"content":"     * @return true if the game is lost, false otherwise","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"K-J-Q"},"content":"    public boolean isRoundOver() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"K-J-Q"},"content":"        // Round ends if no plays are remaining","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"K-J-Q"},"content":"        return state.getRemainingPlays() \u003c\u003d 0 | isWon();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"K-J-Q"},"content":"     * Gets the display name of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"K-J-Q"},"content":"     * @return The round name","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"flyingapricot"},"content":"    public String getRoundName() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"K-J-Q"},"content":"        return config.getRoundName();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"K-J-Q"},"content":"     * Sets the display name of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"-"},"content":"     * @param roundName The new round name","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"flyingapricot"},"content":"    public void setRoundName(String roundName) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"K-J-Q"},"content":"        config.setRoundName(roundName);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"K-J-Q"},"content":"     * Gets the description of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"K-J-Q"},"content":"     * @return The round description","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"flyingapricot"},"content":"    public String getRoundDescription() {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"K-J-Q"},"content":"        return config.getRoundDescription();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"K-J-Q"},"content":"     * Sets the description of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"-"},"content":"     * @param roundDescription The new round description","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"flyingapricot"},"content":"    public void setRoundDescription(String roundDescription) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"K-J-Q"},"content":"        config.setRoundDescription(roundDescription);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"K-J-Q"},"content":"     * Gets the state object for this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"K-J-Q"},"content":"     * @return The round state object","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"K-J-Q"},"content":"    public RoundState getState() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"K-J-Q"},"content":"        return state;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"flyingapricot"},"content":"    public void updatePlays(int plays) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"flyingapricot"},"content":"        state.setRemainingPlays(plays);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"flyingapricot"},"content":"    public void updateDiscards(int discards) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"flyingapricot"},"content":"        state.setRemainingDiscards(discards);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"K-J-Q"},"content":"     * Gets the configuration object for this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"K-J-Q"},"content":"     * @return The round configuration object","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"K-J-Q"},"content":"    public RoundConfig getConfig() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"K-J-Q"},"content":"        return config;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"K-J-Q"},"content":"     * Gets the observable object for this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"K-J-Q"},"content":"     * @return The round observable object","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"K-J-Q"},"content":"    public RoundObservable getObservable() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"K-J-Q"},"content":"        return observable;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"K-J-Q"},"content":"     * Gets the boss type for this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"K-J-Q"},"content":"     * @return The boss type","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"K-J-Q"},"content":"    public BossType getBossType() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"K-J-Q"},"content":"        return config.getBossType();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"K-J-Q"},"content":"     * Sets the boss type for this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"-"},"content":"     * @param bossType The new boss type","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"K-J-Q"},"content":"    private void setBossType(BossType bossType) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"K-J-Q"},"content":"        config.setBossType(bossType);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"K-J-Q"},"content":"        applyBossVariants();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"K-J-Q"},"content":"     * Gets the deck used in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"K-J-Q"},"content":"     * @return The deck object","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"K-J-Q"},"content":"    public Deck getDeck() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"K-J-Q"},"content":"        return state.getDeck();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"K-J-Q"},"content":"     * Gets the played cards in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"K-J-Q"},"content":"     * @return The list of played cards","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"K-J-Q"},"content":"    public List\u003cCard\u003e getPlayedCards() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"K-J-Q"},"content":"        return state.getChosenCards();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"K-J-Q"},"content":"     * Gets the played hand of cards in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"K-J-Q"},"content":"     * @return The poker hand evaluated from the played cards","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"-"},"content":"     * @throws JavatroException If the played cards are invalid or empty","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"K-J-Q"},"content":"    public PokerHand getPlayedHand() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"K-J-Q"},"content":"        return HandResult.evaluateHand(state.getChosenCards());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"-"},"content":"     * {@code @warn} This method will be deprecated in future versions. Reordering of player hands","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"-"},"content":"     * should be done in UI and not in Round class. Updates the player hand.","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"-"},"content":"     * @param playerHandCards The new holding hand to set","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if the player hand is null","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"K-J-Q"},"content":"    public void setPlayerHandCards(List\u003cCard\u003e playerHandCards) throws IllegalArgumentException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"K-J-Q"},"content":"        state.setPlayerHandCards(playerHandCards);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-01","isFullCredit":false}],"authorContributionMap":{"Markneoneo":4,"flyingapricot":43,"K-J-Q":342,"-":57,"jwyk":8}},{"path":"src/main/java/javatro/core/round/RoundActions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core.round;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.HandResult;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"/** Implements the game actions available in a round without direct Round dependencies. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"class RoundActions {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"     * Plays a set of cards as a poker hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"     * @param state The current state of the round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"     * @param config The round configuration","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"     * @param cardIndices Indices of cards to play from the holding hand","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"     * @return ActionResult containing played cards, points earned, and state changes","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If the play is invalid","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"    public static ActionResult playCards(","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"            RoundState state, RoundConfig config, List\u003cInteger\u003e cardIndices)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"        // Explicitly validate required components are available","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"        if (state \u003d\u003d null || config \u003d\u003d null || cardIndices \u003d\u003d null) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"            throw new IllegalArgumentException(\"Required parameters cannot be null\");","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"        // Validate parameters","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        validatePlayCards(","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                cardIndices,","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"                config.getMinHandSize(),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"                config.getMaxHandSize(),","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"                state.getRemainingPlays());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"        // Execute play (without modifying state)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"        List\u003cCard\u003e playedCards \u003d state.getPlayerHand().play(cardIndices);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        PokerHand result \u003d HandResult.evaluateHand(playedCards);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        Score handScore \u003d new Score(config.getBossType());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"        long pointsEarned \u003d handScore.getScore(result, playedCards, state.getPlayerJokers());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"        // Draw new cards to replace played ones","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"        state.getPlayerHand().draw(cardIndices.size(), state.getDeck());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"        // Return results rather than modifying round directly","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        return ActionResult.forPlay(playedCards, pointsEarned);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"     * Validates that a set of cards can be played.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"     * @param cardIndices Indices of cards to validate","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"     * @param minHandSize Minimum hand size allowed","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"     * @param maxHandSize Maximum hand size allowed","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"     * @param remainingPlays The number of plays remaining","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If the play is invalid","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"    private static void validatePlayCards(","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"            List\u003cInteger\u003e cardIndices, int minHandSize, int maxHandSize, int remainingPlays)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"        boolean isAcceptableHandSize \u003d","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"                cardIndices.size() \u003c\u003d maxHandSize \u0026\u0026 cardIndices.size() \u003e\u003d minHandSize;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"        if (!isAcceptableHandSize) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.invalidPlayedHand(minHandSize, maxHandSize);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"        if (remainingPlays \u003c\u003d 0) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.noPlaysRemaining();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"        assert !cardIndices.isEmpty() : \"Card indices cannot be empty\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assert cardIndices.size() \u003c\u003d maxHandSize","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"                : \"Cannot play more than \" + maxHandSize + \" cards\";","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"        assert remainingPlays \u003e 0 : \"No plays remaining to execute this action\";","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"     * Discards cards from the player\u0027s hand.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"     * @param state The current state of the round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"     * @param config The configuration of the round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"     * @param cardIndices Indices of cards to discard from the holding hand","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"     * @return ActionResult containing discarded cards and state changes","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If the discard is invalid","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"    public static ActionResult discardCards(","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"            RoundState state, RoundConfig config, List\u003cInteger\u003e cardIndices)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"        assert cardIndices !\u003d null : \"Card indices cannot be null\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"        validateDiscardCards(cardIndices, state.getRemainingDiscards());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"        // Handle duplicates by using a Set","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"        Set\u003cInteger\u003e indicesToDiscard \u003d new HashSet\u003c\u003e(cardIndices);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"        // Execute discard","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"        List\u003cCard\u003e discardedCards \u003d state.getPlayerHand().discard(cardIndices);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"        state.getPlayerHand().draw(indicesToDiscard.size(), state.getDeck());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"        // Return results rather than modifying round directly","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"        return ActionResult.forDiscard(discardedCards);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"     * Validates that a set of cards can be discarded.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"     * @param cardIndices Indices of cards to validate","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"     * @param remainingDiscards The number of discards remaining","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException If the discard is invalid","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private static void validateDiscardCards(List\u003cInteger\u003e cardIndices, int remainingDiscards)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"        int numberOfDiscards \u003d cardIndices.size();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"        if (remainingDiscards \u003c\u003d 0) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.noRemainingDiscards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"        if (numberOfDiscards \u003e RoundConfig.DEFAULT_MAX_HAND_SIZE) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.tooManyDiscards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"        if (cardIndices.size() \u003c 1) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"            throw JavatroException.cannotDiscardZeroCards();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"        assert !cardIndices.isEmpty() : \"Cannot discard zero cards\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"        assert remainingDiscards \u003e 0 : \"No discards remaining to execute this action\";","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /** Holds the result of a card action (play or discard). */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"    public static class ActionResult {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"        private final List\u003cCard\u003e cards;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"K-J-Q"},"content":"        private final long pointsEarned;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"        public ActionResult(List\u003cCard\u003e cards, long pointsEarned) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"            this.cards \u003d cards;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"            this.pointsEarned \u003d pointsEarned;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"        public List\u003cCard\u003e getCards() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"            return cards;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"        public long getPointsEarned() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"K-J-Q"},"content":"            return pointsEarned;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"K-J-Q"},"content":"        /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"K-J-Q"},"content":"         * Creates a result for a play action.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"K-J-Q"},"content":"         *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"K-J-Q"},"content":"         * @param cards The cards that were played","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"K-J-Q"},"content":"         * @param pointsEarned The points earned from the play","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"K-J-Q"},"content":"         * @return An ActionResult representing a play action","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"K-J-Q"},"content":"         */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"        public static ActionResult forPlay(List\u003cCard\u003e cards, long pointsEarned) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"K-J-Q"},"content":"            return new ActionResult(cards, pointsEarned);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"K-J-Q"},"content":"        /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"K-J-Q"},"content":"         * Creates a result for a discard action.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"K-J-Q"},"content":"         *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"K-J-Q"},"content":"         * @param cards The cards that were discarded","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"K-J-Q"},"content":"         * @return An ActionResult representing a discard action","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"K-J-Q"},"content":"         */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"K-J-Q"},"content":"        public static ActionResult forDiscard(List\u003cCard\u003e cards) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"K-J-Q"},"content":"            return new ActionResult(cards, 0);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":1,"K-J-Q":160,"-":18}},{"path":"src/main/java/javatro/core/round/RoundConfig.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core.round;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.BossType;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"/** Stores configuration details for a game round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"class RoundConfig {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"    /** The initial number of cards dealt to the player. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"    public static final int INITIAL_HAND_SIZE \u003d 8;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"    /** The maximum number of discards allowed per round. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"    public static final int MAX_DISCARDS_PER_ROUND \u003d 3;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"    /** The maximum number of cards in a hand. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    public static final int DEFAULT_MAX_HAND_SIZE \u003d 5;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"    /** The minimum number of cards in a hand. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"    public static final int DEFAULT_MIN_HAND_SIZE \u003d 1;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"    /** The minimum score required to win the round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"    private final int blindScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    /** The name of the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"    private String roundName;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"    /** The description of the current round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"    private String roundDescription;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"    /** The maximum number of cards that can be played in this round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"    private int maxHandSize \u003d DEFAULT_MAX_HAND_SIZE;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"    /** The minimum number of cards that can be played in this round. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"    private int minHandSize \u003d DEFAULT_MIN_HAND_SIZE;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    /** The type of boss for this round. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    private BossType bossType \u003d BossType.NONE;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"     * Creates a new round configuration.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"     * @param roundName The display name of the round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"     * @param roundDescription The description of the round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"     * @param blindScore The target score required to win","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"    public RoundConfig(String roundName, String roundDescription, int blindScore) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"        this.roundName \u003d roundName;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"        this.roundDescription \u003d roundDescription;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"        this.blindScore \u003d blindScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /** Creates a new round configuration with default values. */","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"    public RoundConfig(int blindScore) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        this(\"Default Round\", \"Default Description\", blindScore);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"     * Gets the target score needed to win this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"     * @return The blind score target","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"    public int getBlindScore() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"        return blindScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"     * Gets the display name of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"     * @return The round name","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"    public String getRoundName() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"        return roundName;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"     * Sets the display name of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"     * @param roundName The new round name","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"    public void setRoundName(String roundName) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"        this.roundName \u003d roundName;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"     * Gets the description of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"     * @return The round description","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"    public String getRoundDescription() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"        return roundDescription;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"     * Sets the description of this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"     * @param roundDescription The new round description","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"    public void setRoundDescription(String roundDescription) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"        this.roundDescription \u003d roundDescription;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"     * Gets the maximum number of cards that can be played in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"     * @return The maximum hand size","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"    public int getMaxHandSize() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"        return maxHandSize;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"     * Sets the maximum number of cards that can be played in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"     * @param maxHandSize The new maximum hand size","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"    public void setMaxHandSize(int maxHandSize) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"        this.maxHandSize \u003d maxHandSize;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"     * Gets the minimum number of cards that can be played in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"     * @return The minimum hand size","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"    public int getMinHandSize() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"        return minHandSize;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"K-J-Q"},"content":"     * Sets the minimum number of cards that can be played in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"K-J-Q"},"content":"     * @param minHandSize The new minimum hand size","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"    public void setMinHandSize(int minHandSize) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"        this.minHandSize \u003d minHandSize;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"     * Gets the boss type for this round.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"     * @return The boss type","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"    public BossType getBossType() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"        return bossType;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"     * Sets the boss type for this round.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"K-J-Q"},"content":"     * @param bossType The new boss type","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"    public void setBossType(BossType bossType) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"K-J-Q"},"content":"        this.bossType \u003d bossType;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"        // Update round name and description to match boss type if it\u0027s not NONE","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"        if (bossType !\u003d BossType.NONE) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"            this.roundName \u003d bossType.getName();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"            this.roundDescription \u003d bossType.getDescription();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"K-J-Q":149,"-":2}},{"path":"src/main/java/javatro/core/round/RoundObservable.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core.round;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.*;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"import java.beans.PropertyChangeSupport;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"/** Handles observer notifications for round state changes without direct Round dependencies. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"class RoundObservable {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"    /** The property change support for the observer pattern. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"    private final PropertyChangeSupport support;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"    private final Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"     * Creates a new observable with the given source object.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"     * @param source The source object for property change events","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"    public RoundObservable(Object source) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"        this.support \u003d new PropertyChangeSupport(source);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"     * Registers an observer to listen for property changes.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"     * @param pcl The property change listener to register.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"    public void addPropertyChangeListener(PropertyChangeListener pcl) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"        support.addPropertyChangeListener(pcl);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"     * Fires property change events to notify observers of updated round variables.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"     * @param state The current state of the round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"     * @param config The configuration of the round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"    public void updateRoundVariables(RoundState state, RoundConfig config) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"blindScore\", null, config.getBlindScore());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"remainingPlays\", null, state.getRemainingPlays());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"remainingDiscards\", null, state.getRemainingDiscards());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"roundName\", null, config.getRoundName());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"roundDescription\", null, config.getRoundDescription());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"holdingHand\", null, state.getPlayerHandCards());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"        support.firePropertyChange(\"currentScore\", null, state.getCurrentScore());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"        if (Storage.saveActive) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"                    Storage.HAND_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"                    Integer.toString(state.getRemainingPlays()));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"                    Storage.DISCARD_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"                    Integer.toString(state.getRemainingDiscards()));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"            storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"                    storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                    Storage.ROUND_SCORE_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"                    Long.toString(state.getCurrentScore()));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"            int i \u003d Storage.HOLDING_HAND_START_INDEX;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"            for (Card c : state.getPlayerHandCards()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"                storage.setValue(storage.getRunChosen() - 1, i, Storage.cardToString(c));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"                i \u003d i + 1;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"            ArrayList\u003cCard\u003e restOfTheCards \u003d JavatroCore.currentRound.getDeck().getWholeDeck();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"            Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"            for (int j \u003d Storage.START_OF_REST_OF_DECK;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                    j \u003c Storage.START_OF_REST_OF_DECK + 44;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"                    j++) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"                int idx \u003d j - Storage.START_OF_REST_OF_DECK;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"                if (idx \u003e\u003d restOfTheCards.size()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"                    storage.setValue(storage.getRunChosen() - 1, j, \"-\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"                } else {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"                            j,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"                            Storage.cardToString(restOfTheCards.get(idx)));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"            // Check whether player has won or lost","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"            if (JavatroCore.currentRound.isRoundOver()","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"                    || JavatroCore.currentRound.getRemainingPlays() \u003d\u003d 0) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"                if (JavatroCore.currentRound.isWon()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"                    Ante.Blind nextBlind \u003d JavatroCore.getAnte().getNextBlind();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"                    int anteCount \u003d JavatroCore.getAnte().getAnteCount();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    if (nextBlind \u003d\u003d Ante.Blind.SMALL_BLIND","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"                            \u0026\u0026 JavatroCore.getAnte().getBlind() \u003d\u003d Ante.Blind.BOSS_BLIND) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"                        anteCount \u003d anteCount + 1;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"                    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1, Storage.HAND_INDEX, Integer.toString(-1));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"                            Storage.DISCARD_INDEX,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"                            Integer.toString(-1));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"                            Storage.ROUND_SCORE_INDEX,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"                            Long.toString(0));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"                            Storage.ROUND_NUMBER_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"                            Long.toString(JavatroCore.getRoundCount() + 1));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"                            Storage.ANTE_NUMBER_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"                            String.valueOf(anteCount)); // Update Ante Count","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"                            Storage.BLIND_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"                            nextBlind.getName()); // Update Blind","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"                    i \u003d Storage.HOLDING_HAND_START_INDEX;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"                    for (Card c : state.getPlayerHandCards()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"                        storage.setValue(storage.getRunChosen() - 1, i, \"-\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"                        i \u003d i + 1;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"                    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"                    int currentWin \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"                            Integer.parseInt(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"                                    Storage.getStorageInstance()","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"                                            .getValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"                                                    Storage.getStorageInstance().getNumberOfRuns()","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"                                                            - 1,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"                                                    Storage.WINS_INDEX));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"                    Storage.getStorageInstance()","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"                            .setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"                                    Storage.getStorageInstance().getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"                                    Storage.WINS_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"                                    String.valueOf(currentWin + 1));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"                } else if (JavatroCore.currentRound.isLost()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"                    Ante.Blind currentBlind \u003d JavatroCore.getAnte().getBlind();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"                    int anteCount \u003d JavatroCore.getAnte().getAnteCount();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1, Storage.HAND_INDEX, Integer.toString(-1));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"                            Storage.DISCARD_INDEX,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"                            Integer.toString(-1));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"                            Storage.ROUND_SCORE_INDEX,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"                            Long.toString(0));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"                            Storage.ROUND_NUMBER_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"                            Long.toString(JavatroCore.getRoundCount()));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"                            Storage.ANTE_NUMBER_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"                            String.valueOf(anteCount)); // Update Ante Count","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"                    storage.setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"                            storage.getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"                            Storage.BLIND_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"                            currentBlind.getName()); // Update Blind","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"flyingapricot"},"content":"                    i \u003d Storage.HOLDING_HAND_START_INDEX;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"flyingapricot"},"content":"                    for (Card c : state.getPlayerHandCards()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"flyingapricot"},"content":"                        storage.setValue(storage.getRunChosen() - 1, i, \"-\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"flyingapricot"},"content":"                        i \u003d i + 1;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"flyingapricot"},"content":"                    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"                    int currentLose \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"                            Integer.parseInt(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"                                    Storage.getStorageInstance()","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"                                            .getValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"                                                    Storage.getStorageInstance().getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"                                                    Storage.LOSSES_INDEX));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"                    Storage.getStorageInstance()","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"                            .setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"                                    Storage.getStorageInstance().getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"                                    Storage.LOSSES_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"                                    String.valueOf(currentLose + 1));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"                storage.updateSaveFile(); // Update save file at each run with the updated hands,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"                // discards and round score","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"flyingapricot"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(\"Failed to Save To System\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"flyingapricot":61,"K-J-Q":44,"-":93}},{"path":"src/main/java/javatro/core/round/RoundState.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core.round;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.HoldingHand;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"import java.util.List;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"/**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Encapsulates the state of a round in the game, including score, play limits, and player","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" * resources.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":" *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":" * @see Round The main game round class that uses this state","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":" */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"class RoundState {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"    /** The player\u0027s current score in the round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"    private long currentScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"    /** The number of remaining discards allowed. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"    private int remainingDiscards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"    /** The number of remaining plays in the round. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"    private int remainingPlays;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"    /** The player\u0027s current held jokers. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"    private final HeldJokers playerJokers;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    /** The deck of cards used in the round. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    private final Deck deck;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"    /** The player\u0027s current hand. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    private final HoldingHand playerHand;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"    /** The cards previously played/discarded in the current round. */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"    private List\u003cCard\u003e chosenCards;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"     * Creates a new round state with initial values.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"     * @param currentScore The starting score for the round","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"     * @param remainingDiscards The initial number of discards available","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"     * @param remainingPlays The initial number of plays available","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"     * @param playerJokers The player\u0027s jokers for this round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"     * @param deck The deck of cards to be used for this round","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public RoundState(","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"            long currentScore,","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"            int remainingDiscards,","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"            HeldJokers playerJokers,","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"            Deck deck)","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"        this.currentScore \u003d currentScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"        this.remainingDiscards \u003d remainingDiscards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        this.remainingPlays \u003d remainingPlays;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"        this.playerJokers \u003d playerJokers;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"        this.playerHand \u003d new HoldingHand();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"        drawInitialCards(RoundConfig.INITIAL_HAND_SIZE);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"     * Gets the current score accumulated in this round.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"     * @return The current score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"K-J-Q"},"content":"    public long getCurrentScore() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"        return currentScore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"     * Adds points to the current score.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"     * @param points The number of points to add to the score","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"    public void addScore(long points) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"        currentScore +\u003d points;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"     * Gets the number of remaining discards available to the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"     * @return The number of remaining discards","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingDiscards() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"        return remainingDiscards;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"     * Sets the number of remaining discards to a specified amount.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"     * @param amount The number of discards to set","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"     * @throws IllegalArgumentException if the amount is negative","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"    public void setRemainingDiscards(int amount) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"        if (amount \u003c 0) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"            throw new IllegalArgumentException(\"Amount cannot be negative\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"        remainingDiscards \u003d amount;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /** Reduces the number of remaining discards by one. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"    public void decrementDiscards() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"        remainingDiscards--;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"     * Increases the number of remaining discards by a specified amount.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"     * @param amount The number of additional discards to add","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"    public void increaseRemainingDiscards(int amount) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"        remainingDiscards +\u003d amount;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"     * Gets the number of remaining plays available to the player.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"     * @return The number of remaining plays","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"    public int getRemainingPlays() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"        return remainingPlays;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /** Reduces the number of remaining plays by one. */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"K-J-Q"},"content":"    public void decrementPlays() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"        remainingPlays--;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"     * Set the number of remaining plays by a specified amount.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"     * @param amount The number of additional plays to set","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"     * @throws IllegalArgumentException if the amount is negative","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"    public void setRemainingPlays(int amount) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"        if (amount \u003c 0) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"            throw new IllegalArgumentException(\"Amount cannot be negative\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"        remainingPlays \u003d amount;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"     * Gets the player\u0027s current held jokers.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"K-J-Q"},"content":"     * @return The player\u0027s jokers","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"    public HeldJokers getPlayerJokers() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"        return playerJokers;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"     * Gets the deck used in this round.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"     * @return The deck object","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"    public Deck getDeck() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"K-J-Q"},"content":"        return deck;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"K-J-Q"},"content":"     * Gets the player\u0027s current hand of cards.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"K-J-Q"},"content":"     * @return The player\u0027s hand","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"K-J-Q"},"content":"    public HoldingHand getPlayerHand() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"K-J-Q"},"content":"        return playerHand;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"K-J-Q"},"content":"     * Gets the player\u0027s current hand of cards as a list.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"K-J-Q"},"content":"     * @return The player\u0027s hand as a list of cards","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"K-J-Q"},"content":"    public List\u003cCard\u003e getPlayerHandCards() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"K-J-Q"},"content":"        return playerHand.getHand();","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"K-J-Q"},"content":"     * Sets the player hand cards.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"     * @param playerHandCards The new holding hand to set","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"K-J-Q"},"content":"     * @throws IllegalArgumentException if the player hand is null","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"K-J-Q"},"content":"    public void setPlayerHandCards(List\u003cCard\u003e playerHandCards) throws IllegalArgumentException {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"K-J-Q"},"content":"        if (playerHandCards \u003d\u003d null) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"K-J-Q"},"content":"            throw new IllegalArgumentException(\"playerHandCards cannot be null\");","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"K-J-Q"},"content":"        this.playerHand.setHand(playerHandCards);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"K-J-Q"},"content":"     * Gets the cards that were last played or discarded.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"K-J-Q"},"content":"     * @return The list of chosen cards","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"K-J-Q"},"content":"    public List\u003cCard\u003e getChosenCards() {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"K-J-Q"},"content":"        return chosenCards;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"K-J-Q"},"content":"     * Sets the chosen cards.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"K-J-Q"},"content":"     * @param chosenCards The cards that were chosen","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"K-J-Q"},"content":"    public void setChosenCards(List\u003cCard\u003e chosenCards) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"K-J-Q"},"content":"        this.chosenCards \u003d chosenCards;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"K-J-Q"},"content":"    /**","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"K-J-Q"},"content":"     * Draws the initial cards for the player\u0027s hand.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"K-J-Q"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"K-J-Q"},"content":"     * @param count The number of cards to draw","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"K-J-Q"},"content":"     * @throws JavatroException if the draw fails","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"K-J-Q"},"content":"     */","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"K-J-Q"},"content":"    public void drawInitialCards(int count) throws JavatroException {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"K-J-Q"},"content":"        playerHand.draw(count, deck);","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"K-J-Q":203,"-":13}},{"path":"src/main/java/javatro/display/CardRenderer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@ Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.ORANGE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.PURPLE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.WHITE_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" * Renders playing cards as ASCII art with colored symbols.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eEach card is rendered as a multi-line string array with:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":" *   \u003cli\u003eColored suit symbols","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":" *   \u003cli\u003eProper rank display","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":" *   \u003cli\u003eWhite card background","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":" *   \u003cli\u003eConsistent 5-line height formatting","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"public final class CardRenderer {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    /** Number of lines in the rendered card art. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    private static final int CARD_HEIGHT \u003d 5;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"     * Renders a card as an array of strings representing ASCII art lines.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThe rendered card has:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eRank in top-left and bottom-right corners","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eSuit symbol centered","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eWhite background with colored symbols","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"     * @param card the card to render (cannot be null)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     * @return String array of length 5 containing the rendered card lines","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     * @throws NullPointerException if card parameter is null","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    public static String[] renderCard(Card card) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        assert card !\u003d null : \"Card cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        assert card.rank() !\u003d null : \"Card rank cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        assert card.suit() !\u003d null : \"Card suit cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        String rank \u003d card.rank().getSymbol();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        String suitSymbol \u003d getSuitSymbol(card.suit());","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        String colour \u003d getColour(card.suit());","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        String[] cardArt \u003d new String[CARD_HEIGHT];","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        cardArt[0] \u003d WHITE_B + String.format(\" %s%s%-2s      \", colour, BOLD, rank) + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        cardArt[1] \u003d WHITE_B + \"         \" + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        cardArt[2] \u003d WHITE_B + String.format(\"    %s%s    \", colour, suitSymbol) + END;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        cardArt[3] \u003d WHITE_B + \"         \" + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        cardArt[4] \u003d WHITE_B + String.format(\"      %s%s%2s \", colour, BOLD, rank) + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assert cardArt.length \u003d\u003d CARD_HEIGHT","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"                : \"Card art must have exactly \" + CARD_HEIGHT + \" lines\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assert Arrays.stream(cardArt).noneMatch(s -\u003e s \u003d\u003d null || s.isEmpty())","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"                : \"All card art lines must be non-empty\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        return cardArt;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"     * Maps card suit to its corresponding single-character symbol.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"     * @param suit the card suit to map","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     * @return single-character symbol representing the suit","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"     * @throws NullPointerException if suit parameter is null","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"    private static String getSuitSymbol(Card.Suit suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        assert suit !\u003d null : \"Suit cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        return switch (suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"            case HEARTS -\u003e \"H\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"            case DIAMONDS -\u003e \"D\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"            case CLUBS -\u003e \"C\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"            case SPADES -\u003e \"S\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"     * Determines the display color for a given card suit.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"     * @param suit the card suit to determine color for","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"     * @return ANSI color code string for the suit","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"     * @throws NullPointerException if suit parameter is null","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"    private static String getColour(Card.Suit suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"        assert suit !\u003d null : \"Suit cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        return switch (suit) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"            case HEARTS -\u003e RED;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"            case DIAMONDS -\u003e ORANGE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"            case CLUBS -\u003e BLUE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"            case SPADES -\u003e PURPLE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-25","isFullCredit":false}],"authorContributionMap":{"Markneoneo":91,"-":16}},{"path":"src/main/java/javatro/display/DeckArt.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"public enum DeckArt {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    RED_DECK(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"            new String[] {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;255;48;5;15m▄\\u001B[38;5;203;48;5;255m▄\\u001B[38;5;210;48;5;255m▄\\u001B[38;5;216;48;5;15m▄\\u001B[38;5;210;48;5;255m▄▄\\u001B[38;5;217;48;5;15m▄▄▄\\u001B[38;5;210;48;5;255m▄▄\\u001B[38;5;216;48;5;15m▄\\u001B[38;5;210;48;5;255m▄\\u001B[38;5;203;48;5;255m▄\\u001B[38;5;255;48;5;15m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;255;48;5;255m▄\\u001B[38;5;216;48;5;210m▄\\u001B[38;5;224;48;5;217m▄\\u001B[38;5;217;48;5;224m▄\\u001B[38;5;209;48;5;217m▄\\u001B[38;5;217;48;5;217m▄\\u001B[38;5;217;48;5;15m▄\\u001B[38;5;15;48;5;224m▄\\u001B[38;5;217;48;5;15m▄\\u001B[38;5;217;48;5;217m▄\\u001B[38;5;209;48;5;217m▄\\u001B[38;5;217;48;5;224m▄\\u001B[38;5;224;48;5;217m▄\\u001B[38;5;216;48;5;210m▄\\u001B[38;5;255;48;5;255m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;255m \\u001B[48;5;210m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;216;48;5;224m▄\\u001B[38;5;224;48;5;255m▄\\u001B[38;5;210;48;5;203m▄\\u001B[38;5;203;48;5;255m▄\\u001B[38;5;210;48;5;203m▄\\u001B[38;5;255;48;5;203m▄\\u001B[38;5;210;48;5;203m▄\\u001B[38;5;203;48;5;255m▄\\u001B[38;5;210;48;5;203m▄\\u001B[38;5;224;48;5;255m▄\\u001B[38;5;216;48;5;224m▄\\u001B[48;5;210m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"                    + \" \\u001B[48;5;255m \\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;255;48;5;255m▄\\u001B[38;5;203;48;5;216m▄\\u001B[38;5;210;48;5;217m▄\\u001B[38;5;210;48;5;224m▄\\u001B[38;5;217;48;5;15m▄\\u001B[38;5;15;48;5;210m▄\\u001B[38;5;224;48;5;210m▄\\u001B[38;5;217;48;5;210m▄\\u001B[38;5;224;48;5;210m▄\\u001B[38;5;15;48;5;210m▄\\u001B[38;5;217;48;5;15m▄\\u001B[38;5;210;48;5;224m▄\\u001B[38;5;210;48;5;217m▄\\u001B[38;5;203;48;5;216m▄\\u001B[38;5;255;48;5;255m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;255;48;5;255m▄\\u001B[38;5;210;48;5;210m▄\\u001B[38;5;224;48;5;217m▄\\u001B[38;5;255;48;5;210m▄\\u001B[38;5;15;48;5;223m▄\\u001B[38;5;224;48;5;210m▄\\u001B[38;5;210;48;5;255m▄\\u001B[38;5;15;48;5;224m▄\\u001B[38;5;210;48;5;255m▄\\u001B[38;5;224;48;5;210m▄\\u001B[38;5;15;48;5;223m▄\\u001B[38;5;255;48;5;210m▄\\u001B[38;5;224;48;5;217m▄\\u001B[38;5;210;48;5;210m▄\\u001B[38;5;255;48;5;255m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;255;48;5;255m▄\\u001B[38;5;210;48;5;210m▄\\u001B[38;5;217;48;5;224m▄\\u001B[38;5;210;48;5;255m▄\\u001B[38;5;223;48;5;15m▄\\u001B[38;5;210;48;5;224m▄\\u001B[38;5;255;48;5;210m▄\\u001B[38;5;224;48;5;15m▄\\u001B[38;5;255;48;5;210m▄\\u001B[38;5;210;48;5;224m▄\\u001B[38;5;223;48;5;15m▄\\u001B[38;5;210;48;5;255m▄\\u001B[38;5;217;48;5;224m▄\\u001B[38;5;210;48;5;210m▄\\u001B[38;5;255;48;5;255m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;255;48;5;255m▄\\u001B[38;5;216;48;5;203m▄\\u001B[38;5;217;48;5;210m▄\\u001B[38;5;224;48;5;210m▄\\u001B[38;5;15;48;5;217m▄\\u001B[38;5;210;48;5;15m▄\\u001B[38;5;210;48;5;224m▄\\u001B[38;5;210;48;5;217m▄\\u001B[38;5;210;48;5;224m▄\\u001B[38;5;210;48;5;15m▄\\u001B[38;5;15;48;5;217m▄\\u001B[38;5;224;48;5;210m▄\\u001B[38;5;217;48;5;210m▄\\u001B[38;5;216;48;5;203m▄\\u001B[38;5;255;48;5;255m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;255m \\u001B[48;5;210m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;224;48;5;216m▄\\u001B[38;5;255;48;5;224m▄\\u001B[38;5;203;48;5;210m▄\\u001B[38;5;255;48;5;203m▄\\u001B[38;5;203;48;5;210m▄\\u001B[38;5;203;48;5;255m▄\\u001B[38;5;203;48;5;210m▄\\u001B[38;5;255;48;5;203m▄\\u001B[38;5;203;48;5;210m▄\\u001B[38;5;255;48;5;224m▄\\u001B[38;5;224;48;5;216m▄\\u001B[48;5;210m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"                    + \" \\u001B[48;5;255m \\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;255;48;5;255m▄\\u001B[38;5;210;48;5;216m▄\\u001B[38;5;217;48;5;224m▄\\u001B[38;5;224;48;5;217m▄\\u001B[38;5;217;48;5;209m▄\\u001B[38;5;217;48;5;217m▄\\u001B[38;5;15;48;5;217m▄\\u001B[38;5;224;48;5;15m▄\\u001B[38;5;15;48;5;217m▄\\u001B[38;5;217;48;5;217m▄\\u001B[38;5;217;48;5;209m▄\\u001B[38;5;224;48;5;217m▄\\u001B[38;5;217;48;5;224m▄\\u001B[38;5;210;48;5;216m▄\\u001B[38;5;255;48;5;255m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;15;48;5;255m▄\\u001B[38;5;255;48;5;203m▄\\u001B[38;5;255;48;5;210m▄\\u001B[38;5;15;48;5;216m▄\\u001B[38;5;255;48;5;210m▄▄\\u001B[38;5;15;48;5;217m▄▄▄\\u001B[38;5;255;48;5;210m▄▄\\u001B[38;5;15;48;5;216m▄\\u001B[38;5;255;48;5;210m▄\\u001B[38;5;255;48;5;203m▄\\u001B[38;5;15;48;5;255m▄\\u001B[m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"            }),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    BLUE_DECK(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new String[] {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;195;48;5;15m▄\\u001B[38;5;39;48;5;195m▄\\u001B[38;5;75;48;5;195m▄▄▄▄▄\\u001B[38;5;117;48;5;195m▄\\u001B[38;5;75;48;5;195m▄▄▄▄▄\\u001B[38;5;39;48;5;195m▄\\u001B[38;5;153;48;5;15m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;195m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;75;48;5;75m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;81;48;5;117m▄▄\\u001B[38;5;153;48;5;153m▄\\u001B[38;5;117;48;5;153m▄\\u001B[38;5;153;48;5;117m▄\\u001B[38;5;117;48;5;153m▄\\u001B[48;5;153m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;117;48;5;117m▄\\u001B[38;5;81;48;5;117m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;75;48;5;75m▄\\u001B[48;5;153m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"                    + \" \\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;195m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;75;48;5;75m▄\\u001B[38;5;81;48;5;117m▄▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;75;48;5;117m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;153;48;5;75m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;75;48;5;117m▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;81;48;5;117m▄▄\\u001B[38;5;75;48;5;75m▄\\u001B[48;5;153m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"                    + \" \\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;195m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;75;48;5;75m▄\\u001B[38;5;81;48;5;81m▄▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;153;48;5;117m▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;153;48;5;117m▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;81;48;5;81m▄▄\\u001B[38;5;75;48;5;75m▄\\u001B[48;5;153m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    + \" \\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;195m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;75;48;5;75m▄\\u001B[38;5;117;48;5;117m▄▄▄\\u001B[38;5;153;48;5;117m▄\\u001B[38;5;81;48;5;117m▄\\u001B[38;5;153;48;5;81m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;153;48;5;117m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;117;48;5;81m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;75;48;5;75m▄\\u001B[38;5;153;48;5;153m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;195m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;75;48;5;75m▄\\u001B[38;5;117;48;5;117m▄▄▄\\u001B[38;5;117;48;5;189m▄\\u001B[38;5;117;48;5;81m▄\\u001B[38;5;81;48;5;153m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;117;48;5;153m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;81;48;5;117m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;75;48;5;75m▄\\u001B[38;5;153;48;5;153m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;195m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;75;48;5;75m▄\\u001B[38;5;81;48;5;81m▄▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;117;48;5;153m▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;117;48;5;153m▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;81;48;5;81m▄▄\\u001B[38;5;75;48;5;75m▄\\u001B[48;5;153m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    + \" \\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;195m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;75;48;5;75m▄\\u001B[38;5;117;48;5;81m▄▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;81;48;5;75m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;75;48;5;153m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;117;48;5;75m▄\\u001B[38;5;81;48;5;81m▄\\u001B[38;5;117;48;5;81m▄▄\\u001B[38;5;75;48;5;75m▄\\u001B[48;5;153m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"                    + \" \\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \"\\u001B[48;5;195m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"                    + \" \\u001B[38;5;75;48;5;75m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;117;48;5;81m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;153;48;5;153m▄\\u001B[38;5;153;48;5;117m▄\\u001B[38;5;117;48;5;189m▄\\u001B[38;5;153;48;5;117m▄\\u001B[38;5;153;48;5;153m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;117;48;5;81m▄\\u001B[38;5;117;48;5;117m▄\\u001B[38;5;75;48;5;75m▄\\u001B[38;5;153;48;5;153m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;15;48;5;195m▄\\u001B[38;5;153;48;5;39m▄\\u001B[38;5;153;48;5;75m▄▄▄▄\\u001B[38;5;189;48;5;75m▄\\u001B[38;5;195;48;5;117m▄\\u001B[38;5;189;48;5;81m▄\\u001B[38;5;153;48;5;75m▄▄▄▄\\u001B[38;5;153;48;5;39m▄\\u001B[38;5;15;48;5;153m▄\\u001B[m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"            }),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    CHECKERED_DECK(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"            new String[] {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;254;48;5;15m▄\\u001B[38;5;243;48;5;254m▄▄▄\\u001B[38;5;131;48;5;254m▄\\u001B[38;5;242;48;5;254m▄\\u001B[38;5;131;48;5;254m▄\\u001B[38;5;243;48;5;254m▄\\u001B[38;5;131;48;5;254m▄\\u001B[38;5;243;48;5;254m▄\\u001B[38;5;131;48;5;254m▄\\u001B[38;5;243;48;5;254m▄▄▄\\u001B[38;5;253;48;5;15m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;254;48;5;254m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;138m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;242;48;5;95m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;253;48;5;253m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;254;48;5;254m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;243;48;5;167m▄▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;242;48;5;167m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;167m▄▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;253;48;5;224m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;254;48;5;254m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;138m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;138m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;242;48;5;95m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;138m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;253;48;5;253m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;254;48;5;254m▄\\u001B[38;5;243;48;5;131m▄▄\\u001B[38;5;243;48;5;167m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;242;48;5;167m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;243;48;5;167m▄\\u001B[38;5;243;48;5;131m▄▄\\u001B[38;5;253;48;5;253m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;254;48;5;254m▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;138m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;167;48;5;167m▄\\u001B[38;5;243;48;5;138m▄\\u001B[38;5;131;48;5;167m▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;167;48;5;167m▄\\u001B[38;5;138;48;5;138m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;253;48;5;253m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;254;48;5;254m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;131m▄▄▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;131;48;5;131m▄▄▄\\u001B[38;5;243;48;5;131m▄\\u001B[38;5;253;48;5;253m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;254;48;5;254m▄\\u001B[38;5;131;48;5;243m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;131;48;5;243m▄\\u001B[38;5;167;48;5;131m▄\\u001B[38;5;95;48;5;242m▄\\u001B[38;5;167;48;5;131m▄\\u001B[38;5;137;48;5;8m▄\\u001B[38;5;167;48;5;131m▄\\u001B[38;5;95;48;5;242m▄\\u001B[38;5;167;48;5;167m▄\\u001B[38;5;131;48;5;243m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;131;48;5;243m▄\\u001B[38;5;253;48;5;253m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;254;48;5;254m▄\\u001B[38;5;131;48;5;243m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;131;48;5;243m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;131;48;5;243m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;167;48;5;131m▄\\u001B[38;5;131;48;5;243m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;131;48;5;243m▄\\u001B[38;5;253;48;5;253m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;15;48;5;254m▄\\u001B[38;5;253;48;5;243m▄\\u001B[38;5;253;48;5;131m▄\\u001B[38;5;253;48;5;243m▄\\u001B[38;5;253;48;5;131m▄\\u001B[38;5;253;48;5;242m▄\\u001B[38;5;253;48;5;131m▄\\u001B[38;5;253;48;5;243m▄\\u001B[38;5;253;48;5;131m▄\\u001B[38;5;253;48;5;242m▄\\u001B[38;5;253;48;5;131m▄\\u001B[38;5;253;48;5;243m▄\\u001B[38;5;253;48;5;131m▄\\u001B[38;5;253;48;5;243m▄\\u001B[38;5;255;48;5;253m▄\\u001B[m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"            }),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"    ABANDONED_DECK(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"            new String[] {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;224;48;5;224m▄\\u001B[38;5;180;48;5;224m▄▄\\u001B[38;5;181;48;5;224m▄\\u001B[38;5;180;48;5;224m▄▄\\u001B[38;5;181;48;5;224m▄\\u001B[38;5;181;48;5;223m▄\\u001B[38;5;180;48;5;223m▄▄▄\\u001B[38;5;180;48;5;224m▄\\u001B[38;5;174;48;5;223m▄▄\\u001B[38;5;223;48;5;224m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;224;48;5;224m▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;180;48;5;181m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;223;48;5;187m▄\\u001B[38;5;187;48;5;223m▄\\u001B[38;5;223;48;5;181m▄\\u001B[38;5;187;48;5;187m▄▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;180;48;5;181m▄\\u001B[38;5;181;48;5;180m▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;223;48;5;223m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;224;48;5;224m▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;181;48;5;181m▄▄▄\\u001B[38;5;181;48;5;187m▄\\u001B[38;5;187;48;5;181m▄\\u001B[38;5;223;48;5;180m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;180;48;5;180m▄▄▄\\u001B[38;5;181;48;5;187m▄\\u001B[38;5;180;48;5;181m▄\\u001B[38;5;223;48;5;223m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;224;48;5;224m▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;181;48;5;181m▄▄\\u001B[38;5;223;48;5;223m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;187;48;5;181m▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;181;48;5;180m▄▄\\u001B[38;5;181;48;5;181m▄▄▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;224;48;5;224m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;224;48;5;224m▄\\u001B[38;5;187;48;5;180m▄\\u001B[38;5;223;48;5;187m▄\\u001B[38;5;187;48;5;181m▄\\u001B[38;5;181;48;5;187m▄\\u001B[38;5;187;48;5;180m▄\\u001B[38;5;180;48;5;181m▄\\u001B[38;5;223;48;5;180m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;223;48;5;181m▄▄▄\\u001B[38;5;223;48;5;223m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;223;48;5;223m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;223;48;5;224m▄\\u001B[38;5;181;48;5;180m▄\\u001B[38;5;187;48;5;223m▄\\u001B[38;5;180;48;5;181m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;181;48;5;223m▄\\u001B[38;5;187;48;5;180m▄\\u001B[38;5;181;48;5;223m▄\\u001B[38;5;181;48;5;180m▄\\u001B[38;5;181;48;5;223m▄\\u001B[38;5;187;48;5;223m▄\\u001B[38;5;181;48;5;223m▄\\u001B[38;5;187;48;5;223m▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;224;48;5;223m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;223;48;5;224m▄\\u001B[38;5;180;48;5;180m▄▄▄\\u001B[38;5;187;48;5;187m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;181;48;5;187m▄\\u001B[38;5;181;48;5;180m▄\\u001B[38;5;181;48;5;187m▄\\u001B[38;5;180;48;5;181m▄\\u001B[38;5;181;48;5;187m▄\\u001B[38;5;180;48;5;180m▄▄▄\\u001B[38;5;224;48;5;224m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;223;48;5;223m▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;187;48;5;181m▄\\u001B[38;5;181;48;5;180m▄\\u001B[38;5;181;48;5;181m▄▄\\u001B[38;5;181;48;5;187m▄\\u001B[38;5;180;48;5;223m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;180;48;5;180m▄▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;187;48;5;181m▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;224;48;5;224m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;223;48;5;223m▄\\u001B[38;5;180;48;5;180m▄\\u001B[38;5;181;48;5;187m▄\\u001B[38;5;187;48;5;181m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;187;48;5;223m▄\\u001B[38;5;223;48;5;187m▄\\u001B[38;5;181;48;5;223m▄\\u001B[38;5;187;48;5;181m▄\\u001B[38;5;187;48;5;187m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;223;48;5;181m▄\\u001B[38;5;181;48;5;223m▄\\u001B[38;5;181;48;5;181m▄\\u001B[38;5;224;48;5;224m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"                \"\\u001B[38;5;224;48;5;223m▄\\u001B[38;5;223;48;5;180m▄▄▄▄▄\\u001B[38;5;223;48;5;181m▄▄▄\\u001B[38;5;223;48;5;180m▄\\u001B[38;5;224;48;5;180m▄\\u001B[38;5;224;48;5;181m▄\\u001B[38;5;224;48;5;180m▄▄\\u001B[38;5;224;48;5;224m▄\\u001B[m\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"            });","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"    private final String[] artLines;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"    DeckArt(String[] artLines) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"        this.artLines \u003d artLines;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    public String[] getArtLines() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"        return artLines;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"    public int getHeight() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"        return artLines.length;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"    public String getLine(int i) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"        return (i \u003c artLines.length) ? artLines[i] : \"\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"    public String getDeckName() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"        String[] parts \u003d name().split(\"_\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"        for (String part : parts) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"            sb.append(part.charAt(0)).append(part.substring(1).toLowerCase()).append(\" \");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"        return sb.toString().trim();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-05","isFullCredit":false}],"authorContributionMap":{"flyingapricot":68,"-":36}},{"path":"src/main/java/javatro/display/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@ Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.getCurrentScreen;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeSupport;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":" * Handles parsing and validation of user input for the Javatro application.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis class is responsible for:","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":" *   \u003cli\u003eProcessing user input for card selections and menu navigation","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":" *   \u003cli\u003eValidating input ranges, formats, and constraints","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":" *   \u003cli\u003eNotifying registered observers of valid user input changes","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"public class Parser {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String MENU_PROMPT \u003d BLUE + BOLD + \"Enter Option Index (1-%d)\\n\u003e\u003e\u003e \" + END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String CARD_PROMPT \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"            BLUE","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"                    + BOLD","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"                    + \"Enter Card Indices between 1-%d. Up to %d cards only. (e.g. 1,2,3,4,5)\\n\u003e\u003e\u003e \"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"                    + END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    /** Property change support for notifying observers of user input changes. */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"    private final PropertyChangeSupport support \u003d new PropertyChangeSupport(this);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     * Registers an observer to listen for user input changes.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"     * @param pcl the property change listener to register","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the provided listener is {@code null}","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    public void addPropertyChangeListener(PropertyChangeListener pcl) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        assert pcl !\u003d null : \"PropertyChangeListener cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        if (pcl \u003d\u003d null) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidScreen();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"        support.addPropertyChangeListener(pcl);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"     * Handles user input for menu navigation and notifies observers.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eThis method:","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *   \u003cli\u003eDisplays current screen options","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eValidates input is within allowed range","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eNotifies listeners of valid input","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eHandles input errors with appropriate error messages","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if no options are available in current screen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    public void getOptionInput() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        int maxRange \u003d getCurrentScreen().getOptionsSize();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        assert maxRange \u003e 0 : \"Screen options size must be positive\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        if (maxRange \u003c\u003d 0) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidOptionsSize();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        getCurrentScreen().displayOptions();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"        while (!JavatroManager.runningTests) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"                System.out.printf(MENU_PROMPT, maxRange);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"                String line \u003d scanner.nextLine().trim();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"                // Handle empty input","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"                if (line.isEmpty()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.invalidInputType();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"                // Try to parse the input as integer","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"                try {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                    int input \u003d Integer.parseInt(line);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                    assert input !\u003d 0 : \"Menu input should never be 0 (options start at 1)\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"                    if (input \u003e\u003d 1 \u0026\u0026 input \u003c\u003d maxRange) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"                        support.firePropertyChange(\"userInput\", null, input);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                        return;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"                    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.invalidMenuInput(maxRange);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.invalidInputType();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"            } catch (NoSuchElementException e) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"                // This handles cases where input stream is closed (like with ^Z)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(JavatroException.invalidInputType().getMessage());","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"                scanner \u003d new Scanner(System.in); // Reset scanner if needed","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"     * Collects and validates card selection input from the user.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsAvailable maximum number of available cards (1-based)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsToSelect maximum number of cards allowed for selection","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"     * @return unmodifiable list of 0-based card indices","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"    public static List\u003cInteger\u003e getCardInput(int maxCardsAvailable, int maxCardsToSelect) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        assert maxCardsAvailable \u003e 0 : \"Must have at least one card available\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        assert maxCardsToSelect \u003e 0 : \"Must be able to select at least one card\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        assert maxCardsToSelect \u003c\u003d maxCardsAvailable : \"Cannot select more cards than available\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"        while (true) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"            try {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"                System.out.printf(CARD_PROMPT, maxCardsAvailable, maxCardsToSelect);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"                String input \u003d scanner.nextLine().trim();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"                if (input.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.invalidCardInput();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"                List\u003cInteger\u003e userInput \u003d parseCardInput(input, maxCardsAvailable);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"                assert !userInput.isEmpty() : \"Parsed card input should never be empty\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"                if (userInput.size() \u003e maxCardsToSelect) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"                    throw JavatroException.exceedsMaxCardSelection(maxCardsToSelect);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"                return List.copyOf(userInput);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"            } catch (NoSuchElementException e) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"                // This handles cases where input stream is closed (like with ^Z)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(JavatroException.invalidCardInput().getMessage());","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"                scanner \u003d new Scanner(System.in); // Reset scanner if needed","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"     * Parses and validates raw card input string.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"     * @param input comma-separated input string","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"     * @param maxCardsAvailable maximum allowed card number (1-based)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"     * @return validated list of 0-based card indices","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if no valid card numbers are found","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"    private static List\u003cInteger\u003e parseCardInput(String input, int maxCardsAvailable)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        assert input !\u003d null : \"Input string cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"        assert !input.trim().isEmpty() : \"Input string cannot be empty\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"        assert maxCardsAvailable \u003e 0 : \"Must have at least one card available\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"        List\u003cString\u003e parts \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"                Arrays.stream(input.split(\",\"))","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"                        .map(String::trim)","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"                        .filter(s -\u003e !s.isEmpty())","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"                        .toList();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e numbers \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"        for (String part : parts) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"            int num;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"            try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"                num \u003d Integer.parseInt(part);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"                throw JavatroException.invalidCardInput();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"            if (num \u003c 1 || num \u003e maxCardsAvailable) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"                throw JavatroException.invalidCardInput();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"            numbers.add(num);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e userInput \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"                numbers.stream()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"                        .map(num -\u003e num - 1) // Convert to 0-based index","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"                        .distinct()","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"        if (userInput.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidCardInput();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"        assert userInput.stream().allMatch(i -\u003e i \u003e\u003d 0 \u0026\u0026 i \u003c maxCardsAvailable)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"                : \"All card indices should be within valid range\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"        return userInput;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-22","isFullCredit":false}],"authorContributionMap":{"Markneoneo":154,"flyingapricot":42,"-":17}},{"path":"src/main/java/javatro/display/UI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.*;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import java.io.IOException;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import java.io.InputStream;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" * The {@code UI} class is responsible for managing and displaying different screens in the","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" * application. It handles user input, manages screen transitions, and notifies observers of user","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" * actions. This class follows the Singleton pattern to ensure a single instance manages all","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" * display-related operations.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"public class UI {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /** Fixed width for the bordered message display. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    public static final int BORDER_WIDTH \u003d 100;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    // region ANSI FORMATTING CODES","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    /** ANSI escape code to reset all formatting. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    public static final String END \u003d \"\\033[0m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    /** ANSI escape code for bold text. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    public static final String BOLD \u003d \"\\033[1m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    /** ANSI escape code for italic text. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    public static final String ITALICS \u003d \"\\033[3m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    /** ANSI escape code for underlined text. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    public static final String UNDERLINE \u003d \"\\033[4m\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    // Text colors","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    public static final String WHITE \u003d \"\\033[97m\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    public static final String RED \u003d \"\\033[91m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    public static final String GREEN \u003d \"\\033[92m\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    public static final String YELLOW \u003d \"\\033[93m\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    public static final String BLUE \u003d \"\\033[94m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    public static final String PURPLE \u003d \"\\033[38;2;115;14;147m\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    public static final String CYAN \u003d \"\\033[96m\";","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    public static final String ORANGE \u003d \"\\033[38;2;255;165;0m\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    // Background colors","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    public static final String WHITE_B \u003d \"\\033[107m\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    public static final String BLACK_B \u003d \"\\033[40m\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    public static final String BLUE_B \u003d \"\\033[104m\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    public static final String RED_B \u003d \"\\033[41m\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    public static final String PURPLE_B \u003d \"\\033[48;2;115;14;147m\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    public static final String ORANGE_B \u003d \"\\033[48;2;255;165;0m\";","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    /** Custom border characters for UI elements */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    public static final char TOP_LEFT \u003d \u0027╔\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    public static final char TOP_RIGHT \u003d \u0027╗\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    public static final char BOTTOM_LEFT \u003d \u0027╚\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    public static final char BOTTOM_RIGHT \u003d \u0027╝\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"    public static final char HORIZONTAL \u003d \u0027═\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    public static final char VERTICAL \u003d \u0027║\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"    public static final char CROSS \u003d \u0027╬\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_UP \u003d \u0027╩\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_DOWN \u003d \u0027╦\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_LEFT \u003d \u0027╣\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    public static final char T_RIGHT \u003d \u0027╠\u0027;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    // endregion","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    /** Parser instance for handling user input. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    private static final Parser PARSER \u003d new Parser();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    // region SCREEN INSTANCES","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    /** Predefined game-related screens. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"    private static final GameScreen GAME_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"    private static final DiscardCardScreen DISCARD_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"    private static final PlayCardScreen PLAY_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"    private static final HelpScreen HELP_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"    private static final StartScreen START_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    private static final DeckSelectScreen DECK_SELECT_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"    private static final DeckViewScreen DECK_VIEW_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"    private static final PokerHandScreen POKER_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"    private static final BlindSelectScreen BLIND_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"    private static final WinRoundScreen WIN_ROUND_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"    private static final WinGameScreen WIN_GAME_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"    private static final LoseScreen LOSE_SCREEN;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"    private static RunSelectScreen RUN_SELECT_SCREEN;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"    private static RunListScreen JUMP_TO_RUN_SCREEN;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"    static {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"            // Initialize all screen components","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"            GAME_SCREEN \u003d new GameScreen();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"            DISCARD_SCREEN \u003d new DiscardCardScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"            PLAY_SCREEN \u003d new PlayCardScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            HELP_SCREEN \u003d new HelpScreen();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"            START_SCREEN \u003d new StartScreen();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"            DECK_VIEW_SCREEN \u003d new DeckViewScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"            DECK_SELECT_SCREEN \u003d new DeckSelectScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"            POKER_SCREEN \u003d new PokerHandScreen();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"            BLIND_SCREEN \u003d new BlindSelectScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"            WIN_ROUND_SCREEN \u003d new WinRoundScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"            WIN_GAME_SCREEN \u003d new WinGameScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"            LOSE_SCREEN \u003d new LoseScreen();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"            RUN_SELECT_SCREEN \u003d new RunSelectScreen();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"            JUMP_TO_RUN_SCREEN \u003d new RunListScreen();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"            System.err.println(\"Failed to initialize screens: \" + e.getMessage());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"            throw new RuntimeException(\"Failed to initialize screens\", e);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"    // endregion","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"    /** The current screen being displayed to the user. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"    private static Screen currentScreen;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"    /** The screen displayed before current screen. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"    private static Screen previousScreen;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"    // region OUTPUT METHODS","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"     * Prints text with a black background using ANSI escape codes.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"     * @param input The text to be printed with black background","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"    public static void printBlackB(String input) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        assert input !\u003d null : \"Input string cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(BLACK_B + input + END);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"     * Prints a bordered message or menu with a title and dynamically generated content.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"     * @param title The title of the message or menu","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"     * @param content A list of content lines","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"    public static void printBorderedContent(String title, List\u003cString\u003e content) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"        assert title !\u003d null : \"Title cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        assert content !\u003d null : \"Content list cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"        printBorderedContent(title, content, BORDER_WIDTH, BORDER_WIDTH);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"     * Prints a bordered message or menu with customizable widths for title and content.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"     * @param title The title of the message or menu","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"     * @param content A list of content lines","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"     * @param titleWidth The width of the title section","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"     * @param contentWidth The width of the content section","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"    public static void printBorderedContent(","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"            String title, List\u003cString\u003e content, int titleWidth, int contentWidth) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        assert title !\u003d null : \"Title cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        assert content !\u003d null : \"Content list cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"        assert titleWidth \u003e 0 : \"Title width must be positive\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"        assert contentWidth \u003e 0 : \"Content width must be positive\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"        // Build all border components first for efficiency","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        String topBorder \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"                TOP_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + TOP_RIGHT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"        String middleBorder \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"                T_RIGHT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + T_LEFT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        String bottomBorder \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"                BOTTOM_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + BOTTOM_RIGHT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"        // Use StringBuilder to minimize IO operations","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        // Top border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        output.append(BLACK_B).append(topBorder).append(END).append(\"\\n\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"        // Centered title","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"        output.append(centerText(title, titleWidth)).append(\"\\n\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"        // Middle border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"        output.append(BLACK_B).append(middleBorder).append(END).append(\"\\n\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"        // Content lines","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"        for (String line : content) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"            output.append(centerText(line, contentWidth)).append(\"\\n\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"        // Bottom border","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"        output.append(BLACK_B).append(bottomBorder).append(END).append(\"\\n\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(output);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"     * Centers text within a specified width, accounting for ANSI codes and Unicode characters.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"     * @param text The text to center","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"     * @param width The total available width","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"     * @return The centered text surrounded by border characters","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"    public static String centerText(String text, int width) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"        assert text !\u003d null : \"Text cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"        assert width \u003e 0 : \"Width must be positive\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        int displayLength \u003d getDisplayLength(text);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"        // Handle case where text is longer than available space","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"        if (width \u003c\u003d displayLength + 2) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"            return BLACK_B + VERTICAL + \" \" + text + \" \" + VERTICAL + END;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"        int paddingSize \u003d (width - displayLength - 2) / 2;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"        int extraPadding \u003d (width - displayLength - 2) % 2;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"        return String.format(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"                \"%s%s%s%s%s%s%s%s\",","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"                BLACK_B,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"                VERTICAL,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"                \" \".repeat(paddingSize),","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"                text,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"                BLACK_B,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"                \" \".repeat(paddingSize + extraPadding),","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"                VERTICAL,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"                END);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"     * Truncates or pads a string to exactly the specified display width.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"     * @param text The input text","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"     * @param width The desired display width","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"     * @return The adjusted string","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"    public static String padToWidth(String text, int width) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"        assert text !\u003d null : \"Text cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"        assert width \u003e 0 : \"Width must be positive\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"        if (getDisplayLength(text) \u003e width) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"            return text.substring(0, width);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"        return String.format(\"%-\" + width + \"s\", text);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"     * Calculates the visible length of text, ignoring ANSI codes and special Unicode characters.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"     * @param text The text to measure","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"     * @return The effective display length","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"    public static int getDisplayLength(String text) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"        assert text !\u003d null : \"Text cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"        // Remove ANSI escape sequences","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"        String strippedText \u003d text.replaceAll(\"\\033\\\\[[;\\\\d]*m\", \"\");","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"        double length \u003d 0;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c strippedText.length(); i++) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"            char c \u003d strippedText.charAt(i);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"Markneoneo"},"content":"            // Handle special Unicode characters","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"Markneoneo"},"content":"            if (c \u003d\u003d \u0027\\u200A\u0027) { // Hair space","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 0.3;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"            } else if (c \u003d\u003d \u0027\\u2009\u0027) { // Thin space","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 0.5;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"Markneoneo"},"content":"            } else if (c \u003e\u003d \u0027\\uD800\u0027 \u0026\u0026 c \u003c\u003d \u0027\\uDFFF\u0027) { // Surrogate pair (emoji)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 2;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"Markneoneo"},"content":"                i++; // Skip next character in pair","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"Markneoneo"},"content":"            } else { // Regular character","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"                length +\u003d 1;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"        return (int) Math.round(length);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"     * Generates ASCII art lines for displaying cards.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"Markneoneo"},"content":"     * @param holdingHand The list of cards to render","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"Markneoneo"},"content":"     * @return List of strings representing card art lines","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"Markneoneo"},"content":"    public static List\u003cString\u003e getCardArtLines(List\u003cCard\u003e holdingHand) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"Markneoneo"},"content":"        assert holdingHand !\u003d null : \"Card list cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"Markneoneo"},"content":"        assert !holdingHand.isEmpty() : \"Card list cannot be empty\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e cardArtLines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"        final int CARD_LINE_COUNT \u003d 5; // Number of lines per card","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"        // Render all cards first","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"        String[][] renderedCards \u003d new String[holdingHand.size()][CARD_LINE_COUNT];","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c holdingHand.size(); i++) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"Markneoneo"},"content":"            renderedCards[i] \u003d CardRenderer.renderCard(holdingHand.get(i));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"Markneoneo"},"content":"        // Combine lines horizontally","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"Markneoneo"},"content":"        for (int line \u003d 0; line \u003c CARD_LINE_COUNT; line++) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"Markneoneo"},"content":"            StringBuilder combinedLine \u003d new StringBuilder();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"Markneoneo"},"content":"            for (int cardIdx \u003d 0; cardIdx \u003c renderedCards.length; cardIdx++) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"Markneoneo"},"content":"                combinedLine.append(renderedCards[cardIdx][line]);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"Markneoneo"},"content":"                if (cardIdx \u003c renderedCards.length - 1) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"Markneoneo"},"content":"                    combinedLine.append(BLACK_B).append(\"  \").append(END);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"Markneoneo"},"content":"                }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"Markneoneo"},"content":"            cardArtLines.add(combinedLine.toString());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"Markneoneo"},"content":"        return cardArtLines;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"Markneoneo"},"content":"     * Prints ANSI art from a resource file.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"Markneoneo"},"content":"     * @param fileName The name of the file in the ansi resources directory","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"Markneoneo"},"content":"    public static void printANSI(String fileName) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"Markneoneo"},"content":"        assert fileName !\u003d null \u0026\u0026 !fileName.isEmpty() : \"Filename cannot be null or empty\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"Markneoneo"},"content":"        try (InputStream inputStream \u003d UI.class.getResourceAsStream(\"/ansi/\" + fileName)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"Markneoneo"},"content":"            if (inputStream \u003d\u003d null) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"Markneoneo"},"content":"                throw JavatroException.errorLoadingLogo(fileName);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"Markneoneo"},"content":"            try (Scanner scanner \u003d new Scanner(inputStream, StandardCharsets.UTF_8)) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"Markneoneo"},"content":"                System.out.println(scanner.useDelimiter(\"\\\\A\").next());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"Markneoneo"},"content":"        } catch (IOException | JavatroException e) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"Markneoneo"},"content":"            System.err.println(\"Error loading ANSI art: \" + e.getMessage());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"Markneoneo"},"content":"            System.out.println(\"ANSI TEXT\"); // Fallback output","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"Markneoneo"},"content":"    // endregion","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"Markneoneo"},"content":"    // region SCREEN MANAGEMENT","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"Markneoneo"},"content":"     * Transitions to a new screen and updates display.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"Markneoneo"},"content":"     * @param screen The screen to display","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if the screen is null","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"Markneoneo"},"content":"    public void setCurrentScreen(Screen screen) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"Markneoneo"},"content":"        assert screen !\u003d null : \"Screen cannot be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"Markneoneo"},"content":"        if (screen \u003d\u003d null) {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"Markneoneo"},"content":"        // Update screen history","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"Markneoneo"},"content":"        if (currentScreen !\u003d null) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"Markneoneo"},"content":"            previousScreen \u003d currentScreen;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"Markneoneo"},"content":"        // For Logging and Testing","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"Markneoneo"},"content":"        //        System.out.printf(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"Markneoneo"},"content":"        //                \"%s%sTransitioning to: %s%s%n\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"Markneoneo"},"content":"        //                ORANGE, UNDERLINE, screen.getClass().getSimpleName(), END);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"Markneoneo"},"content":"        currentScreen \u003d screen;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"Markneoneo"},"content":"        currentScreen.displayScreen();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"Markneoneo"},"content":"        PARSER.getOptionInput();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"Markneoneo"},"content":"    /** Clears the console using ANSI escape codes. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"Markneoneo"},"content":"    public static void clearScreen() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"Markneoneo"},"content":"        System.out.print(\"\\033[H\\033[2J\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"Markneoneo"},"content":"        System.out.flush();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"Markneoneo"},"content":"    // endregion","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"Markneoneo"},"content":"    // region ACCESSORS","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"Markneoneo"},"content":"     * @return The current active screen","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"Markneoneo"},"content":"    public static Screen getCurrentScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"Markneoneo"},"content":"        return currentScreen;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"Markneoneo"},"content":"     * @return The previously active screen","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"Markneoneo"},"content":"    public static Screen getPreviousScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"Markneoneo"},"content":"        return previousScreen;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"Markneoneo"},"content":"     * @return The input parser instance","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"Markneoneo"},"content":"    public static Parser getParser() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"Markneoneo"},"content":"        return PARSER;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"Markneoneo"},"content":"    // Screen-specific accessors with corrected documentation","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"Markneoneo"},"content":"    public static DiscardCardScreen getDiscardScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"Markneoneo"},"content":"        return DISCARD_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"Markneoneo"},"content":"    public static PlayCardScreen getPlayScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"Markneoneo"},"content":"        return PLAY_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"Markneoneo"},"content":"    public static GameScreen getGameScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"Markneoneo"},"content":"        return GAME_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"Markneoneo"},"content":"    public static StartScreen getStartScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"Markneoneo"},"content":"        return START_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"Markneoneo"},"content":"    public static HelpScreen getHelpScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"Markneoneo"},"content":"        return HELP_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"Markneoneo"},"content":"    public static PokerHandScreen getPokerHandScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"Markneoneo"},"content":"        return POKER_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"Markneoneo"},"content":"    public static DeckViewScreen getDeckViewScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"Markneoneo"},"content":"        return DECK_VIEW_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"Markneoneo"},"content":"    public static DeckSelectScreen getDeckSelectScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"Markneoneo"},"content":"        return DECK_SELECT_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"Markneoneo"},"content":"    public static WinRoundScreen getWinRoundScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"Markneoneo"},"content":"        return WIN_ROUND_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"Markneoneo"},"content":"    public static WinGameScreen getWinGameScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"Markneoneo"},"content":"        return WIN_GAME_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"Markneoneo"},"content":"    public static LoseScreen getLoseScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"Markneoneo"},"content":"        return LOSE_SCREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"Markneoneo"},"content":"    public static RunSelectScreen getRunSelectScreen() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"Markneoneo"},"content":"        return RUN_SELECT_SCREEN;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"Markneoneo"},"content":"    public static void reloadRunSelectScreen() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"Markneoneo"},"content":"            RUN_SELECT_SCREEN \u003d new RunSelectScreen();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"Markneoneo"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"Markneoneo"},"content":"    public static void reloadJumpToRunScreen() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"Markneoneo"},"content":"            JUMP_TO_RUN_SCREEN \u003d new RunListScreen();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"Markneoneo"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"Markneoneo"},"content":"    public static RunListScreen getJumpToRunScreen() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"Markneoneo"},"content":"        return JUMP_TO_RUN_SCREEN;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"swethacool"},"content":"    // @@author swethacool","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"swethacool"},"content":"     * @return The blind selection screen instance","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"swethacool"},"content":"    public static BlindSelectScreen getBlindScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"swethacool"},"content":"        return BLIND_SCREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"swethacool"},"content":"    // @@author swethacool","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"swethacool"},"content":"    // endregion","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":453,"swethacool":10}},{"path":"src/main/java/javatro/display/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":" * Provides the user interface layer for the Javatro application, handling all presentation logic","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" * and user interaction components.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis package contains all classes responsible for:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eManaging screen transitions and UI state","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eRendering game elements using ANSI art and colored text","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eHandling user input and menu navigation","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eDisplaying game state information and statistics","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eImplementing complex visual layouts and formatting","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eKey Components\u003c/h2\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" * \u003ch3\u003eCore UI Management\u003c/h3\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":" * {@link javatro.display.UI} - Singleton controller managing screen stack, input handling, and","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" * observer notifications. Implements the main display loop and coordinates all visual components.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" * \u003ch3\u003eScreen Implementations\u003c/h3\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" * {@link javatro.display.screens.Screen} - Abstract base class for all display screens. Concrete","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" * implementations include:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.display.screens.GameScreen} - Main gameplay interface showing scores, hands,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" *       and jokers","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.display.screens.DeckViewScreen} - Detailed deck composition table view","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.display.screens.HelpScreen} - Help menu with game rules and instructions","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.display.screens.BlindSelectScreen} - Blind selection interface with","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":" *       risk/reward visualization","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.display.screens.StartScreen} - Initial menu with game startup options","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.display.screens.WinGameScreen}/{@link javatro.display.screens.LoseScreen} -","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":" *       Endgame state displays","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":" * \u003ch3\u003eRendering Utilities\u003c/h3\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":" * Contains specialized components for visual presentation:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.display.CardRenderer} - Renders individual cards as ASCII art","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.display.UI} formatting methods - Handle complex text layout and borders","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eANSI art loading and display functionality","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":" * \u003ch3\u003eASCII Art Resources\u003c/h3\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":" * {@link javatro.display.ansi} - Contains ASCII text files with ANSI colour formatting. Used for","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":" * visual elements, such as game logo, cards, and decorative text.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eDesign Patterns\u003c/h2\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eSingleton pattern ({@link javatro.display.UI}) for centralized display control","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eObserver pattern for screen state changes","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eTemplate method pattern in {@link javatro.display.screens.Screen} hierarchy","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eFactory methods for exception creation","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eException Handling\u003c/h2\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":" * Uses {@link javatro.core.JavatroException} for all display-layer errors with colored error","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":" * messages.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":" * @see javatro.core.JavatroException","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":" * @see javatro.manager.options","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":" * @see javatro.display.ansi","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"package javatro.display;","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":73}},{"path":"src/main/java/javatro/display/screens/BlindSelectScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.Ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.manager.options.AcceptBlindOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import javatro.manager.options.RejectBlindOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":" * Represents the screen for selecting the blind in the game. This screen provides options to accept","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":" * or reject the blind and visually displays the current blind settings.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"public class BlindSelectScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"     * Constructs a BlindSelectScreen and initializes the available options.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"     * @throws JavatroException if there is an error initializing the screen.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"    public BlindSelectScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"        super(\"BLIND MENU\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new AcceptBlindOption());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new RejectBlindOption());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"     * Displays the Blind Selection screen with highlighted sections based on the current blind","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"     * setting.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"        int activeSelection \u003d getCurrentBlindIndex();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"        int sectionWidth \u003d UI.BORDER_WIDTH / 3;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"        drawTopBorder(activeSelection, sectionWidth);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"        drawContentRows(activeSelection, sectionWidth);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"        drawBottomBorder(activeSelection, sectionWidth);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"     * Determines the index of the current active blind setting.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"     * @return the index of the current blind (0 for Small Blind, 1 for Large Blind, 2 for Boss","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"swethacool"},"content":"     *     Blind).","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"swethacool"},"content":"    // @@author swethacool","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"swethacool"},"content":"    private int getCurrentBlindIndex() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"swethacool"},"content":"        Ante.Blind currentBlind \u003d JavatroCore.getAnte().getBlind();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"swethacool"},"content":"        Storage.getStorageInstance()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"swethacool"},"content":"                .setValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"swethacool"},"content":"                        Storage.getStorageInstance().getRunChosen() - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"swethacool"},"content":"                        Storage.BLIND_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"swethacool"},"content":"                        currentBlind.getName());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"swethacool"},"content":"        return (currentBlind \u003d\u003d Ante.Blind.SMALL_BLIND)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"swethacool"},"content":"                ? 0","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"swethacool"},"content":"                : (currentBlind \u003d\u003d Ante.Blind.LARGE_BLIND) ? 1 : 2;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"swethacool"},"content":"     * Draws the top border of the screen with highlighted sections.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"swethacool"},"content":"     * @param activeSelection the index of the currently active blind.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"swethacool"},"content":"     * @param sectionWidth the width of each section.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"swethacool"},"content":"    private void drawTopBorder(int activeSelection, int sectionWidth) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"swethacool"},"content":"        System.out.print(getHighlightedChar(activeSelection \u003d\u003d 0, UI.TOP_LEFT));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"swethacool"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"swethacool"},"content":"            if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"swethacool"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003c\u003d 1, UI.T_DOWN));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"swethacool"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"swethacool"},"content":"            String horizontalLine \u003d String.valueOf(UI.HORIZONTAL).repeat(sectionWidth - 1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"swethacool"},"content":"            System.out.print(getHighlightedChar(activeSelection \u003d\u003d i, horizontalLine));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"swethacool"},"content":"            if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"swethacool"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003e\u003d 1, UI.T_DOWN));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"swethacool"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"swethacool"},"content":"        System.out.println(getHighlightedChar(activeSelection \u003d\u003d 2, UI.TOP_RIGHT));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"swethacool"},"content":"     * Draws the content rows of the screen, displaying blind options and their corresponding","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"swethacool"},"content":"     * values.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"swethacool"},"content":"     * @param activeSelection the index of the currently active blind.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"swethacool"},"content":"     * @param sectionWidth the width of each section.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"swethacool"},"content":"    private void drawContentRows(int activeSelection, int sectionWidth) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"swethacool"},"content":"        List\u003cString[]\u003e contentRows \u003d generateContentData();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"swethacool"},"content":"        for (String[] row : contentRows) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"swethacool"},"content":"            System.out.print(getHighlightedChar(activeSelection \u003d\u003d 0, UI.VERTICAL));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"swethacool"},"content":"            for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"swethacool"},"content":"                if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"swethacool"},"content":"                    System.out.print(getHighlightedChar(activeSelection \u003c\u003d 1, UI.VERTICAL));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"swethacool"},"content":"                }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"swethacool"},"content":"                String centeredText \u003d centerInSection(row[i], sectionWidth - 1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"swethacool"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003d\u003d i, centeredText));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"swethacool"},"content":"                if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"swethacool"},"content":"                    System.out.print(getHighlightedChar(activeSelection \u003e\u003d 1, UI.VERTICAL));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"swethacool"},"content":"                }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"swethacool"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"swethacool"},"content":"            System.out.println(getHighlightedChar(activeSelection \u003d\u003d 2, UI.VERTICAL));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"swethacool"},"content":"     * Generates the content data for the blind selection display.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"swethacool"},"content":"     * @return a list of string arrays representing different rows of the screen.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"swethacool"},"content":"    private List\u003cString[]\u003e generateContentData() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"swethacool"},"content":"        List\u003cString[]\u003e contentRows \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"swethacool"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"swethacool"},"content":"            contentRows.add(new String[] {\"\", \"\", \"\"});","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"swethacool"},"content":"        contentRows.add(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"swethacool"},"content":"                new String[] {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"swethacool"},"content":"                    Ante.Blind.SMALL_BLIND.getName(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"swethacool"},"content":"                    Ante.Blind.LARGE_BLIND.getName(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"swethacool"},"content":"                    Ante.Blind.BOSS_BLIND.getName()","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"swethacool"},"content":"                });","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"swethacool"},"content":"        contentRows.add(new String[] {\"\", \"\", \"\"});","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"swethacool"},"content":"        contentRows.add(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"swethacool"},"content":"                new String[] {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"swethacool"},"content":"                    String.valueOf(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"swethacool"},"content":"                            (int)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"swethacool"},"content":"                                    (JavatroCore.getAnte().getAnteScore()","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"swethacool"},"content":"                                            * Ante.Blind.SMALL_BLIND.getMultiplier())),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"swethacool"},"content":"                    String.valueOf(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"swethacool"},"content":"                            (int)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"swethacool"},"content":"                                    (JavatroCore.getAnte().getAnteScore()","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"swethacool"},"content":"                                            * Ante.Blind.LARGE_BLIND.getMultiplier())),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"swethacool"},"content":"                    String.valueOf(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"swethacool"},"content":"                            (int)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"swethacool"},"content":"                                    (JavatroCore.getAnte().getAnteScore()","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"swethacool"},"content":"                                            * Ante.Blind.BOSS_BLIND.getMultiplier()))","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"swethacool"},"content":"                });","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"swethacool"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"swethacool"},"content":"            contentRows.add(new String[] {\"\", \"\", \"\"});","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"swethacool"},"content":"        return contentRows;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"swethacool"},"content":"     * Draws the bottom border of the screen with highlighted sections.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"swethacool"},"content":"     * @param activeSelection the index of the currently active blind.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"swethacool"},"content":"     * @param sectionWidth the width of each section.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"swethacool"},"content":"    private void drawBottomBorder(int activeSelection, int sectionWidth) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"swethacool"},"content":"        System.out.print(getHighlightedChar(activeSelection \u003d\u003d 0, UI.BOTTOM_LEFT));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"swethacool"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"swethacool"},"content":"            if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"swethacool"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003c\u003d 1, UI.T_UP));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"swethacool"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"swethacool"},"content":"            String horizontalLine \u003d String.valueOf(UI.HORIZONTAL).repeat(sectionWidth - 1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"swethacool"},"content":"            System.out.print(getHighlightedChar(activeSelection \u003d\u003d i, horizontalLine));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"swethacool"},"content":"            if (i \u003d\u003d 1) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"swethacool"},"content":"                System.out.print(getHighlightedChar(activeSelection \u003e\u003d 1, UI.T_UP));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"swethacool"},"content":"            }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"swethacool"},"content":"        System.out.println(getHighlightedChar(activeSelection \u003d\u003d 2, UI.BOTTOM_RIGHT));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"swethacool"},"content":"     * Centers text within a given width.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"swethacool"},"content":"     * @param text the text to center.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"swethacool"},"content":"     * @param width the width of the section.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"swethacool"},"content":"     * @return the centered text.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"swethacool"},"content":"    private String centerInSection(String text, int width) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"swethacool"},"content":"        int textLength \u003d text.length();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"swethacool"},"content":"        int padding \u003d Math.max(0, width - textLength);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"swethacool"},"content":"        int leftPad \u003d padding / 2;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"swethacool"},"content":"        int rightPad \u003d padding - leftPad;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"swethacool"},"content":"        return \" \".repeat(leftPad) + text + \" \".repeat(rightPad);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"swethacool"},"content":"     * Highlights a character if it is part of the active selection.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"swethacool"},"content":"     * @param isActive whether the section is active.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"swethacool"},"content":"     * @param character the character to highlight.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"swethacool"},"content":"     * @return the highlighted character.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"swethacool"},"content":"    private String getHighlightedChar(boolean isActive, char character) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"swethacool"},"content":"        return getHighlightedChar(isActive, String.valueOf(character));","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"swethacool"},"content":"     * Highlights a string if it is part of the active selection.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"swethacool"},"content":"     * @param isActive whether the section is active.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"swethacool"},"content":"     * @param text the text to highlight.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"swethacool"},"content":"     * @return the highlighted text.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"swethacool"},"content":"    private String getHighlightedChar(boolean isActive, String text) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"swethacool"},"content":"        if (isActive) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"swethacool"},"content":"            return UI.YELLOW + text + UI.END;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"swethacool"},"content":"        } else {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"swethacool"},"content":"            return text;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"swethacool":219,"flyingapricot":1,"-":1,"jwyk":11}},{"path":"src/main/java/javatro/display/screens/CardSelectScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BORDER_WIDTH;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.HORIZONTAL;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.centerText;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.getCardArtLines;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printBlackB;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printBorderedContent;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.HoldingHand;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.CardSelectOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.DeckViewOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.PokerHandOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ResumeGameOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.SortByRankOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.SortBySuitOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":" * Abstract base class for card selection screens with sorting and display capabilities.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eProvides common functionality for:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eDisplaying formatted card hands","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eHandling card sorting operations","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eManaging selection options","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eMaintaining card display state","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"public abstract class CardSelectScreen extends Screen {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    /** Default spacing between card indices in the title display */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    private static final int CARD_INDEX_SPACING \u003d 8;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    /** Number of lines in the card art display */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    private static final int CARD_ART_LINES \u003d 5;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    /** Current player\u0027s hand of cards */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    private List\u003cCard\u003e holdingHand;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    /** Active sorting order for card display */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    private SortOrder currentSortOrder;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a card selection screen with core functionality.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"     * @param optionsTitle Title for the options section","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if optionsTitle is invalid","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    public CardSelectScreen(String optionsTitle) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        super(optionsTitle);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"        // Initialize selection commands","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new CardSelectOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new SortBySuitOption(this));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new SortByRankOption(this));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new PokerHandOption());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new DeckViewOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new ResumeGameOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        assert commandMap.size() \u003d\u003d 6 : \"Should have 6 initial commands\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"     * Updates and sorts the displayed hand according to specified order.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"     * @param sortOrder Desired sorting order (null preserves current order)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"    public void updateHoldingHand(SortOrder sortOrder) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        this.holdingHand \u003d new ArrayList\u003c\u003e(JavatroCore.currentRound.getPlayerHandCards());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        this.currentSortOrder \u003d sortOrder !\u003d null ? sortOrder : SortOrder.ORIGINAL;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        if (sortOrder !\u003d null \u0026\u0026 sortOrder !\u003d SortOrder.ORIGINAL) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"            HoldingHand tempHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"            tempHand.Hand \u003d new ArrayList\u003c\u003e(this.holdingHand);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"            switch (sortOrder) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"                case BY_SUIT:","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"                    tempHand.sortBySuit();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                    break;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                case BY_RANK:","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                    tempHand.sortByRank();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"                    break;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"                default:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                    // Maintain original order","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"                    break;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"            this.holdingHand \u003d tempHand.getHand();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"            assert this.holdingHand.size() \u003d\u003d tempHand.getHand().size()","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"                    : \"Sorting should not change card count\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"        JavatroCore.currentRound.setPlayerHandCards(this.holdingHand);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"     * Generates formatted card index header for display.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"     * @param cardCount Number of cards in hand","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"     * @return Formatted string with numbered card positions","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"    protected String getCardIndicesTitle(int cardCount) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"        assert cardCount \u003e\u003d 0 : \"Card count cannot be negative\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder title \u003d new StringBuilder();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 1; i \u003c\u003d cardCount; i++) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"            title.append(YELLOW).append(BOLD).append(\"\u003c\").append(i).append(\"\u003e\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"            if (i \u003c cardCount) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"                title.append(\" \".repeat(CARD_INDEX_SPACING));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"        title.append(END);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        return title.toString();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"    /** Displays formatted card hand with borders and styling. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"    public void displayHoldingHand() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"        updateHoldingHand(currentSortOrder);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"        if (holdingHand.isEmpty()) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"            printBorderedContent(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"                    \"CURRENT HOLDING HAND\", List.of(RED + \"YOU HAVE NO MORE CARDS!\" + END));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"            return;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"        final int cardCount \u003d holdingHand.size();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"        assert cardCount \u003e 0 : \"Card count should be positive when not empty\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        // Render top border","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(TOP_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + TOP_RIGHT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"        // Display card indices","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(centerText(getCardIndicesTitle(cardCount), 100));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"        // Middle divider","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(T_RIGHT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + T_LEFT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"        // Display card art","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e cardArtLines \u003d getCardArtLines(holdingHand);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"        assert cardArtLines.size() \u003d\u003d CARD_ART_LINES","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"                : \"Card art should have \" + CARD_ART_LINES + \" lines\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c cardArtLines.size(); i++) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"            String line \u003d cardArtLines.get(i);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"            int width \u003d (i \u003d\u003d 2) ? 100 : BORDER_WIDTH; // Special width for middle line","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"            printBlackB(centerText(line, width));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"            System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        // Render bottom border","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"                BOTTOM_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + BOTTOM_RIGHT);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"    /** Sorting options for card display */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"    public enum SortOrder {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"        /** Original deal order */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"        ORIGINAL,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        /** Grouped by card suit */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"        BY_SUIT,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"        /** Ordered by card rank */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"        BY_RANK","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"    /** Implemented by subclasses to define screen-specific display logic */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"    public abstract void displayScreen();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":190}},{"path":"src/main/java/javatro/display/screens/DeckSelectScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.DeckSelectOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * Screen for selecting player deck configuration at game start.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eProvides different deck types with unique gameplay modifiers:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eRed Deck: Enhanced discard capabilities","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eBlue Deck: Additional hand opportunities","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eCheckered Deck: Balanced suit distribution","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eAbandoned Deck: Simplified card composition","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"public class DeckSelectScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"     * Constructs deck selection screen with available deck options.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen initialization fails","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    public DeckSelectScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        super(\"Select Your Deck\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        // Initialize deck options with descriptions and effects","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new DeckSelectOption(\"Red Deck: +1 Discards per Round\", Deck.DeckType.RED));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new DeckSelectOption(\"Blue Deck: +1 Hands per Round\", Deck.DeckType.BLUE));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"                new DeckSelectOption(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"                        \"Checkered Deck: Start with 26 Hearts, 26 Spades\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"                        Deck.DeckType.CHECKERED));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"                new DeckSelectOption(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"                        \"Abandoned Deck: Start with no Face Cards (K, Q, J)\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"                        Deck.DeckType.ABANDONED));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        assert commandMap.size() \u003d\u003d 4 : \"Should have exactly 4 deck options\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    /** Displays deck selection interface (handled by superclass options rendering). */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        // Intentional no-op - screen content handled by option display","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":50}},{"path":"src/main/java/javatro/display/screens/DeckViewScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE_B;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.CROSS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.HORIZONTAL;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.ORANGE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.ORANGE_B;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.PURPLE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.PURPLE_B;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.RED_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_DOWN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_LEFT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_RIGHT;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_UP;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.VERTICAL;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.WHITE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.centerText;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.padToWidth;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ReturnOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":" * Displays the current deck composition in a formatted table view showing card distribution by suit","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":" * and rank.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThe table layout includes:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eRows for each suit (Spades, Hearts, Clubs, Diamonds)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eColumns for each rank (A, K, Q, J, 10 through 2)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eSuit totals in the rightmost column","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eRank totals in the bottom row","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eGrand total in the bottom-right cell","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"public class DeckViewScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    /** Width of the left section containing suit names */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    private static final int LEFT_WIDTH \u003d 17;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    /** Width of the right section containing rank counts */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    private static final int RIGHT_WIDTH \u003d 80;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"    /** Total table width accounting for borders */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    private static final int TOTAL_WIDTH \u003d LEFT_WIDTH + RIGHT_WIDTH + 3;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    /** Number of card suits in standard deck */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"    private static final int SUIT_COUNT \u003d 4;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    /** Number of card ranks in standard deck */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    private static final int RANK_COUNT \u003d 13;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    /** Order of ranks for display (Ace high) */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    private static final String[] RANK_ORDER \u003d {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"        \"A\", \"K\", \"Q\", \"J\", \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    };","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"    /** Order of suits for display */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    private static final String[] SUIT_ORDER \u003d {\"Spades\", \"Hearts\", \"Clubs\", \"Diamonds\"};","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"    /** Colors for each suit display */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"    private static final String[] SUIT_COLORS \u003d {PURPLE, RED, BLUE, ORANGE};","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    /** Background colors for each suit display */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"    private static final String[] SUIT_BACKGROUNDS \u003d {PURPLE_B, RED_B, BLUE_B, ORANGE_B};","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a deck view screen with return option.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen initialization fails","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"    public DeckViewScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"        super(\"Your Current Deck\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new ReturnOption());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"     * Displays the deck composition in a formatted table showing:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eCard counts by suit and rank","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eSuit totals","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eRank totals","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eGrand total count","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"        Deck deck \u003d JavatroCore.currentRound.getDeck();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        assert deck !\u003d null : \"Current deck should not be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"        ArrayList\u003cCard\u003e remainingCards \u003d deck.getWholeDeck();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"        assert remainingCards !\u003d null : \"Deck card list should not be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"        // Build count matrix and calculate totals","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"        DeckCountData countData \u003d buildCountMatrix(remainingCards);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"        // Generate and print the formatted table","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(buildDeckTable(deck.getDeckName().toString(), countData));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"     * Builds the count matrix and calculates totals from the deck cards.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"     * @param cards List of cards in the deck","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"     * @return DeckCountData containing counts and totals","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"    DeckCountData buildCountMatrix(ArrayList\u003cCard\u003e cards) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"        int[][] counts \u003d new int[SUIT_COUNT][RANK_COUNT];","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"        int[] suitTotals \u003d new int[SUIT_COUNT];","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        int[] rankTotals \u003d new int[RANK_COUNT];","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        int grandTotal \u003d 0;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"        // Populate counts matrix","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"            int suitIndex \u003d getSuitIndex(card.suit());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"            int rankIndex \u003d getRankIndex(card.rank());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"            if (suitIndex !\u003d -1 \u0026\u0026 rankIndex !\u003d -1) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"                counts[suitIndex][rankIndex]++;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"        // Calculate totals","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c SUIT_COUNT; i++) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"            for (int j \u003d 0; j \u003c RANK_COUNT; j++) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"                suitTotals[i] +\u003d counts[i][j];","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"                rankTotals[j] +\u003d counts[i][j];","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"                grandTotal +\u003d counts[i][j];","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        return new DeckCountData(counts, suitTotals, rankTotals, grandTotal);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"     * Builds the formatted deck display table.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"     * @param deckName Name of the current deck","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"     * @param countData Deck count statistics","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"     * @return Formatted table as StringBuilder","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"    StringBuilder buildDeckTable(String deckName, DeckCountData countData) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"        // Table header section","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"        buildTableHeader(sb, deckName);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        // Suit rows section","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"        buildSuitRows(sb, countData);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"        // Totals row section","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"        buildTotalsRow(sb, countData);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        // Table footer","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"        buildTableFooter(sb);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"        return sb;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"    /** Builds the table header with deck name and rank headers */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"    private void buildTableHeader(StringBuilder sb, String deckName) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"        // Top border","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"                .append(TOP_LEFT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(LEFT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"                .append(T_DOWN)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(RIGHT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"                .append(TOP_RIGHT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"        // Deck name and rank headers","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"        String deckHeader \u003d centerText(deckName, LEFT_WIDTH + 2);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"        String rankHeader \u003d buildRankHeader();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BOLD)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"                .append(deckHeader)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"                .append(BOLD)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"                .append(rankHeader)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        // Header separator","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"                .append(T_RIGHT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(LEFT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"                .append(CROSS)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(RIGHT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"                .append(T_LEFT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"    /** Builds the rank header line */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"    private String buildRankHeader() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder header \u003d new StringBuilder();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"        for (String rank : RANK_ORDER) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"            header.append(String.format(\"%5s\", rank));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"        header.append(String.format(\"%15s\", \"Total     \"));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"        return header.toString();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"    /** Builds the suit rows with counts */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"    private void buildSuitRows(StringBuilder sb, DeckCountData countData) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c SUIT_ORDER.length; i++) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"            String suitLabel \u003d String.format(\"%s%s%s\", SUIT_COLORS[i], SUIT_ORDER[i], END);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"            String leftContent \u003d centerText(suitLabel, LEFT_WIDTH + 2);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"            String rightContent \u003d buildSuitCounts(i, countData.counts[i], countData.suitTotals[i]);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"            String rightRow \u003d SUIT_BACKGROUNDS[i] + padToWidth(rightContent, RIGHT_WIDTH);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"            sb.append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"                    .append(BOLD)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"                    .append(leftContent)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"                    .append(WHITE)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"                    .append(rightRow)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"                    .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"                    .append(VERTICAL)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"                    .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"    /** Builds the counts string for a single suit */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"    private String buildSuitCounts(int suitIndex, int[] counts, int suitTotal) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder content \u003d new StringBuilder();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"        for (int j \u003d 0; j \u003c RANK_COUNT; j++) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"            content.append(String.format(\"%5d\", counts[j]));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"        content.append(String.format(\"%15s\", suitTotal + \"      \"));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"        return content.toString();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"    /** Builds the totals row */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"Markneoneo"},"content":"    private void buildTotalsRow(StringBuilder sb, DeckCountData countData) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"Markneoneo"},"content":"        String leftTotals \u003d centerText(\"Total\", LEFT_WIDTH + 2);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"Markneoneo"},"content":"        String rightTotals \u003d buildTotalsString(countData);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BOLD)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"Markneoneo"},"content":"                .append(leftTotals)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"Markneoneo"},"content":"                .append(rightTotals)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"    /** Builds the totals string for rank totals and grand total */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"    private String buildTotalsString(DeckCountData countData) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder totals \u003d new StringBuilder();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"        for (int j \u003d 0; j \u003c RANK_COUNT; j++) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"Markneoneo"},"content":"            totals.append(String.format(\"%5d\", countData.rankTotals[j]));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"Markneoneo"},"content":"        totals.append(String.format(\"%9d\", countData.grandTotal));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"Markneoneo"},"content":"        return padToWidth(totals.toString(), RIGHT_WIDTH);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"Markneoneo"},"content":"    /** Builds the table footer */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"Markneoneo"},"content":"    private void buildTableFooter(StringBuilder sb) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"                .append(BOTTOM_LEFT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(LEFT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"                .append(T_UP)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(RIGHT_WIDTH))","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"Markneoneo"},"content":"                .append(BOTTOM_RIGHT)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"Markneoneo"},"content":"                .append(END);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"Markneoneo"},"content":"     * Maps card suit to display row index.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"Markneoneo"},"content":"     * @param suit Card suit to map","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"Markneoneo"},"content":"     * @return Row index (0-3) or -1 if invalid","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"Markneoneo"},"content":"    int getSuitIndex(Card.Suit suit) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"Markneoneo"},"content":"        return switch (suit) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"Markneoneo"},"content":"            case SPADES -\u003e 0;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"Markneoneo"},"content":"            case HEARTS -\u003e 1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"Markneoneo"},"content":"            case CLUBS -\u003e 2;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"Markneoneo"},"content":"            case DIAMONDS -\u003e 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"Markneoneo"},"content":"            default -\u003e -1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"Markneoneo"},"content":"     * Maps card rank to display column index based on RANK_ORDER.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"Markneoneo"},"content":"     * @param rank Card rank to map","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"Markneoneo"},"content":"     * @return Column index (0-12) or -1 if invalid","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"Markneoneo"},"content":"    int getRankIndex(Card.Rank rank) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"Markneoneo"},"content":"        String symbol \u003d rank.getSymbol();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"Markneoneo"},"content":"        return switch (symbol) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"Markneoneo"},"content":"            case \"A\" -\u003e 0;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"Markneoneo"},"content":"            case \"K\" -\u003e 1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"Markneoneo"},"content":"            case \"Q\" -\u003e 2;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"Markneoneo"},"content":"            case \"J\" -\u003e 3;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"Markneoneo"},"content":"            case \"10\" -\u003e 4;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"Markneoneo"},"content":"            case \"9\" -\u003e 5;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"Markneoneo"},"content":"            case \"8\" -\u003e 6;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"Markneoneo"},"content":"            case \"7\" -\u003e 7;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"Markneoneo"},"content":"            case \"6\" -\u003e 8;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"Markneoneo"},"content":"            case \"5\" -\u003e 9;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"Markneoneo"},"content":"            case \"4\" -\u003e 10;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"Markneoneo"},"content":"            case \"3\" -\u003e 11;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"Markneoneo"},"content":"            case \"2\" -\u003e 12;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"Markneoneo"},"content":"            default -\u003e -1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"Markneoneo"},"content":"    /** Helper class to organize deck count data. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"Markneoneo"},"content":"    static class DeckCountData {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"Markneoneo"},"content":"        final int[][] counts;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"Markneoneo"},"content":"        final int[] suitTotals;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"Markneoneo"},"content":"        final int[] rankTotals;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"Markneoneo"},"content":"        final int grandTotal;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"Markneoneo"},"content":"        DeckCountData(int[][] counts, int[] suitTotals, int[] rankTotals, int grandTotal) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"Markneoneo"},"content":"            this.counts \u003d counts;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"Markneoneo"},"content":"            this.suitTotals \u003d suitTotals;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"Markneoneo"},"content":"            this.rankTotals \u003d rankTotals;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"Markneoneo"},"content":"            this.grandTotal \u003d grandTotal;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":346}},{"path":"src/main/java/javatro/display/screens/DiscardCardScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" * The {@code DiscardCardScreen} class represents a screen where the user selects cards to discard.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * It extends {@code CardSelectScreen} and includes commands for making a selection. The user can","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * select up to a predefined limit of cards (default is 5).","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * @see CardSelectScreen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class DiscardCardScreen extends CardSelectScreen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code DiscardCardScreen} and initializes the selection command. The selection","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     * limit is set to 5, meaning a maximum of 5 cards can be selected to discard.","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during initialization.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    public DiscardCardScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        super(\"Select Cards to Discard\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * Displays the current cards in the user\u0027s holding hand for selection. This method overrides","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * the parent class implementation to provide specific behavior for discarding cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        super.displayHoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":33}},{"path":"src/main/java/javatro/display/screens/GameScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BORDER_WIDTH;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_LEFT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_RIGHT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.CROSS;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.HORIZONTAL;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.ITALICS;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.ORANGE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.ORANGE_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.PURPLE_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_LEFT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_RIGHT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_DOWN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_LEFT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_RIGHT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.T_UP;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.VERTICAL;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.WHITE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.centerText;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.getCardArtLines;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.getDisplayLength;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.padToWidth;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.DeckViewOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.DiscardCardOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.PlayCardOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.PokerHandOption;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"import java.beans.PropertyChangeEvent;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"import java.util.HashMap;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"import java.util.Map;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"import java.util.Objects;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":" * GameScreen class represents the game menu screen in the Javatro application. It displays game","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":" * information such as round details, scores, deck view, and options, and listens to property","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":" * changes to update the display accordingly.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis class extends {@link Screen} and implements {@link java.beans.PropertyChangeListener} to","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":" * react to changes in game state.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"public class GameScreen extends Screen implements PropertyChangeListener {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"    // --- Static Fields ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    /** The blind score that needs to be beaten. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    static int blindScore \u003d 0;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    /** The current round score. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    static long roundScore \u003d 0;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    /** The number of hands left to play. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    static int handsLeft \u003d 0;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"    /** The number of discards left. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"    static int discardsLeft \u003d 0;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"    /** The list of cards currently held in the player\u0027s hand. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"    static List\u003cCard\u003e holdingHand;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"     * Width of each column in the game screen display. (For example, 100 \u003d 32 + 32 + 32 + 4","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"     * borders)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"    private static final int COLUMN_WIDTH \u003d 32;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"    // --- Instance Fields ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"    /** The name of the current round. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"    String roundName \u003d \"\";","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"    /** Description of the current round. */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    String roundDescription \u003d \"\";","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a new GameScreen with predefined command options.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there is an error initializing the screen.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"    public GameScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        super(\"GAME MENU\");","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        // Add command options to the game screen command map.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new PlayCardOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new DiscardCardOption());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new PokerHandOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new DeckViewOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"     * Displays the game screen with current game information such as scores, round details, deck","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"     * view, and card art.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"        // Use StringBuilder for efficient string concatenation.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"        // --- Top Border ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"                .append(TOP_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"                .append(TOP_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        // --- Round Name Color Determination ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        // Determine the background color based on the round name.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"        String colourb \u003d BLACK_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        if (Objects.equals(roundName, \"SMALL BLIND\")) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"            colourb \u003d BLUE_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"        } else if (Objects.equals(roundName, \"LARGE BLIND\")) {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"            colourb \u003d ORANGE_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"        } else if (Objects.equals(roundName, JavatroCore.currentRound.getRoundName())) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"            colourb \u003d PURPLE_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"        // Calculate display length accounting for ANSI codes and Unicode characters.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        int displayLength \u003d getDisplayLength(roundName);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"        // Calculate padding to center the text within the border.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"        int paddingSize \u003d (BORDER_WIDTH - displayLength - 2) / 2;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"        int extraPadding \u003d (BORDER_WIDTH - displayLength - 2) % 2; // Handles odd width cases","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"        // --- Round Name Line ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"                .append(colourb)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(paddingSize))","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"                .append(WHITE)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"                .append(BOLD)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"                .append(roundName)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(paddingSize + extraPadding))","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        // --- Round Description Centered ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"        sb.append(centerText(ITALICS + roundDescription + END, BORDER_WIDTH)).append(\"\\n\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"        // --- Separator Border (First) ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"                .append(T_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"                .append(T_DOWN)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"                .append(T_DOWN)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"                .append(T_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"        // --- Blind Score / Ante / Round Information ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"        String bs \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"                String.format(\"%s%sScore to beat: %d%s%s\", YELLOW, BOLD, blindScore, END, BLACK_B);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"        String bScore \u003d centerText(bs, COLUMN_WIDTH + 2);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"        String anteCount \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"                String.format(\"          Ante: %d / 8\", JavatroCore.getAnte().getAnteCount());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        String roundCount \u003d String.format(\"            Round: %d\", JavatroCore.getRoundCount());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"        // Construct the row with vertical borders.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"        sb.append(bScore)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"                .append(BOLD)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"                .append(ORANGE)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"                .append(padToWidth(anteCount, COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"                .append(BOLD)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"                .append(ORANGE)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"                .append(padToWidth(roundCount, COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"        // --- Separator Border (Second) ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"                .append(T_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"                .append(CROSS)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"                .append(CROSS)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"                .append(T_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"        // --- Round Score / Hands / Discards Information ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"        String rs \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"                String.format(\"%s%sRound Score: %d%s%s\", YELLOW, BOLD, roundScore, END, BLACK_B);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"        String rScore \u003d centerText(rs, COLUMN_WIDTH + 2);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"        String handCount \u003d String.format(\"            Hands: %d\", handsLeft);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"        String discardCount \u003d String.format(\"          Discards: %d\", discardsLeft);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"        // Construct the row with vertical borders.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"        sb.append(rScore)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"                .append(BOLD)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"                .append(BLUE)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"                .append(padToWidth(handCount, COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"                .append(BOLD)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"                .append(RED)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"                .append(padToWidth(discardCount, COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"                .append(BLACK_B)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"        // --- Separator Border (Third) ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"                .append(T_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"                .append(CROSS)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"                .append(T_UP)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"                .append(T_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"        // --- Empty Row for Spacing ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH * 2 + 1))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"Markneoneo"},"content":"        // --- Deck Name, Jokers\u0027 Effects, and Holding Hand ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"        // Build extra content lines for deck name and joker effects.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e extraContent \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"Markneoneo"},"content":"        extraContent.add(BOLD + \"Current Deck:\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"Markneoneo"},"content":"        extraContent.add(ITALICS + JavatroCore.deck.getDeckName().getName());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"Markneoneo"},"content":"        extraContent.add(\"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"Markneoneo"},"content":"        extraContent.add(\"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"        extraContent.add(BOLD + \"Jokers\u0027 Effects:\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"        // Iterate through held jokers and add their effect description or \"Empty Joker Slot\" if","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"        // null.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"        List\u003cJoker\u003e jokers \u003d JavatroCore.heldJokers.getJokers();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"            if (i \u003c jokers.size() \u0026\u0026 jokers.get(i) !\u003d null) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"                extraContent.add(ITALICS + jokers.get(i).toString());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"Markneoneo"},"content":"            } else {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"Markneoneo"},"content":"                extraContent.add(ITALICS + \"Empty Joker Slot\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"Markneoneo"},"content":"        // --- Card Art for Holding Hand ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"Markneoneo"},"content":"        // Ensure that holdingHand is initialized and has at least 8 cards.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"Markneoneo"},"content":"        assert holdingHand !\u003d null : \"Holding hand should not be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"Markneoneo"},"content":"        assert holdingHand.size() \u003e\u003d 8 : \"Holding hand must contain at least 8 cards\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"Markneoneo"},"content":"        // Split the holding hand into two groups for side-by-side display.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e firstHalf \u003d holdingHand.subList(0, 4);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e secondHalf \u003d holdingHand.subList(4, 8);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"Markneoneo"},"content":"        // Get card art for both halves.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e firstCardArt \u003d getCardArtLines(firstHalf);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e secondCardArt \u003d getCardArtLines(secondHalf);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"Markneoneo"},"content":"        // --- Display First Half of Card Art with Extra Content ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c firstCardArt.size(); i++) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"Markneoneo"},"content":"            // Get the corresponding line of extra content.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"Markneoneo"},"content":"            String extraLine \u003d extraContent.get(i);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"Markneoneo"},"content":"            // Get the corresponding card art line.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"Markneoneo"},"content":"            String cardLine \u003d firstCardArt.get(i);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"Markneoneo"},"content":"            sb.append(centerText(extraLine, COLUMN_WIDTH + 2))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"Markneoneo"},"content":"                    .append(\" \".repeat(11))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"Markneoneo"},"content":"                    .append(cardLine)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"Markneoneo"},"content":"                    .append(\" \".repeat(12))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"Markneoneo"},"content":"                    .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"Markneoneo"},"content":"                    .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"Markneoneo"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"Markneoneo"},"content":"        // --- Spacer Row ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH * 2 + 1))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"Markneoneo"},"content":"        // --- Display Second Half of Card Art with Extra Content ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c secondCardArt.size(); i++) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"Markneoneo"},"content":"            // Get the corresponding line of extra content (offset by first half size).","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"Markneoneo"},"content":"            String extraLine \u003d extraContent.get(i + firstCardArt.size());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"Markneoneo"},"content":"            // Get the corresponding card art line.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"Markneoneo"},"content":"            String cardLine \u003d secondCardArt.get(i);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"Markneoneo"},"content":"            sb.append(centerText(extraLine, COLUMN_WIDTH + 2))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"Markneoneo"},"content":"                    .append(\" \".repeat(12))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"Markneoneo"},"content":"                    .append(cardLine)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"Markneoneo"},"content":"                    .append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"Markneoneo"},"content":"                    .append(\" \".repeat(11))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"Markneoneo"},"content":"                    .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"Markneoneo"},"content":"                    .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"Markneoneo"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"Markneoneo"},"content":"        // --- Spacer Row ---","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"Markneoneo"},"content":"                .append(\" \".repeat(COLUMN_WIDTH * 2 + 1))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"Markneoneo"},"content":"                .append(VERTICAL)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"Markneoneo"},"content":"                .append(END)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"Markneoneo"},"content":"                .append(\"\\n\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"Markneoneo"},"content":"        // --- Bottom Border ---","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"Markneoneo"},"content":"        sb.append(BLACK_B)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"Markneoneo"},"content":"                .append(BOTTOM_LEFT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"Markneoneo"},"content":"                .append(T_UP)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"Markneoneo"},"content":"                .append(String.valueOf(HORIZONTAL).repeat(COLUMN_WIDTH * 2 + 1))","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"Markneoneo"},"content":"                .append(BOTTOM_RIGHT)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"Markneoneo"},"content":"                .append(END);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"Markneoneo"},"content":"        // Finally, print the complete screen.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(sb);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"Markneoneo"},"content":"     * Handles property change events to update game screen information.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"Markneoneo"},"content":"     * @param evt the property change event containing the updated property name and value.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"Markneoneo"},"content":"    public void propertyChange(PropertyChangeEvent evt) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"Markneoneo"},"content":"        String propertyName \u003d evt.getPropertyName();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"Markneoneo"},"content":"        Object newValue \u003d evt.getNewValue();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"Markneoneo"},"content":"        // Map property names to their respective update actions.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"Markneoneo"},"content":"        Map\u003cString, Consumer\u003cObject\u003e\u003e handlers \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"roundName\", v -\u003e roundName \u003d v.toString());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"roundDescription\", v -\u003e roundDescription \u003d v.toString());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"remainingPlays\", v -\u003e handsLeft \u003d (Integer) v);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"remainingDiscards\", v -\u003e discardsLeft \u003d (Integer) v);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"blindScore\", v -\u003e blindScore \u003d (Integer) v);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(\"currentScore\", v -\u003e roundScore \u003d (Long) v);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"Markneoneo"},"content":"        // Handle the \u0027holdingHand\u0027 property change by filtering and casting the list.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"Markneoneo"},"content":"        handlers.put(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"Markneoneo"},"content":"                \"holdingHand\",","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"Markneoneo"},"content":"                v -\u003e {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"Markneoneo"},"content":"                    @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"Markneoneo"},"content":"                    List\u003c?\u003e rawList \u003d (List\u003c?\u003e) v;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"Markneoneo"},"content":"                    // Assert that the raw list is not null.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"Markneoneo"},"content":"                    assert rawList !\u003d null : \"Raw list for holdingHand should not be null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"Markneoneo"},"content":"                    holdingHand \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"Markneoneo"},"content":"                            rawList.stream()","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"Markneoneo"},"content":"                                    .filter(Card.class::isInstance)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"Markneoneo"},"content":"                                    .map(Card.class::cast)","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"Markneoneo"},"content":"                                    .collect(Collectors.toList());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"Markneoneo"},"content":"                });","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"Markneoneo"},"content":"        // Execute the corresponding handler if one exists.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"Markneoneo"},"content":"        handlers.getOrDefault(propertyName, val -\u003e {}).accept(newValue);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":397}},{"path":"src/main/java/javatro/display/screens/HelpScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.HelpHowOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.HelpIntroOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.HelpRulesOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.HelpTipsOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"import javatro.manager.options.PokerHandOption;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" * The {@code HelpScreen} class represents a screen displaying the help menu in the javatro","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":" * application. It provides various help options, including an introduction, rules, how-to-play","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":" * guide, and tips. Users can also return to the main menu from this screen.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"public class HelpScreen extends Screen {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     * Constructs a {@code HelpScreen} instance and initializes the available help options.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"     * @throws JavatroException if an error occurs while setting up the screen","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    public HelpScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"        super(\"HELP MENU\");","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new HelpIntroOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new HelpRulesOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new HelpHowOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new HelpTipsOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new PokerHandOption());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"     * Displays the help screen. This method should be overridden to define how the help menu is","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"     * presented.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"    public void displayScreen() {}","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-18","isFullCredit":false}],"authorContributionMap":{"swethacool":40}},{"path":"src/main/java/javatro/display/screens/LoseScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.Javatro.*;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BORDER_WIDTH;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_LEFT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_RIGHT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.HORIZONTAL;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.ITALICS;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_LEFT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_RIGHT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.centerText;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printANSI;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printBlackB;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import javatro.audioplayer.AudioPlayer;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import java.util.concurrent.ThreadLocalRandom;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" * Screen displayed upon game loss, featuring humorous defeat messages.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eContains:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eRandomized loss quotes","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eDecorative border elements","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003ePost-game navigation options","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"public class LoseScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    /** Collection of self-deprecating loss messages */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    private static final List\u003cString\u003e QUOTES \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"            List.of(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"                    \"Maybe Go Fish is more our speed...\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"                    \"We folded like a cheap suit!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"                    \"Time for us to shuffle off and try again!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"                    \"You know what they say, the house always wins!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"                    \"Looks like we found out who the real Joker is!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"                    \"Oh no, were you bluffing too?\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"                    \"Looks like the joke\u0027s on us!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"                    \"If I had hands I would have covered my eyes!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"                    \"I\u0027m literally a fool, what\u0027s your excuse?\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"                    \"What a flop!\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    /** Number of \u0027HA\u0027 repetitions in defeat banner */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    private static final int HA_REPETITIONS \u003d 47;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     * Constructs game over screen with post-loss options.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen initialization fails","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    public LoseScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        super(\"\\\\\" + RED + \" GAME OVER! \" + END + BLACK_B + \"/\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"     * Displays loss screen components:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eDefeat ASCII art","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eDecorative borders","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eRandomized loss message","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eRepeated \"HA\" defeat banner","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        // Cat laugh sound","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        AudioPlayer.getInstance().stopAudio();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        AudioPlayer.getInstance().playAudio(\"audioplayer/cat-laugh-meme-1.wav\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        printANSI(\"jimbo.txt\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        int quoteIndex \u003d ThreadLocalRandom.current().nextInt(QUOTES.size());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        assert quoteIndex \u003e\u003d 0 \u0026\u0026 quoteIndex \u003c QUOTES.size() : \"Invalid quote index\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"        String randomQuote \u003d QUOTES.get(quoteIndex);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        // Render top border","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(TOP_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + TOP_RIGHT);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        // Display defeat message","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                centerText(RED + BOLD + \"HA\".repeat(HA_REPETITIONS) + END + BLACK_B, BORDER_WIDTH));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(centerText(ITALICS + randomQuote, BORDER_WIDTH));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        // Render bottom border","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                BOTTOM_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + BOTTOM_RIGHT);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":105}},{"path":"src/main/java/javatro/display/screens/PlayCardScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" * The {@code PlayCardScreen} class represents a screen where the user selects cards to play. It","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * extends {@code CardSelectScreen} and allows selecting up to a predefined limit of cards (default","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * is 5).","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * @see CardSelectScreen","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class PlayCardScreen extends CardSelectScreen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a {@code PlayCardScreen} and sets the selection limit. The user can select up to 5","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     * cards to play, and the selection command is initialized.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if an error occurs during initialization.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    public PlayCardScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        super(\"Select Cards to Play\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * Displays the current cards in the user\u0027s holding hand for selection. This method overrides","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * the parent class implementation to provide specific behavior for playing cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        super.displayHoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":33}},{"path":"src/main/java/javatro/display/screens/PokerHandScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BLUE_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.GREEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.ORANGE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.RED_B;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.WHITE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import static javatro.display.UI.printBorderedContent;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.PlanetCard;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ReturnOption;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"public class PokerHandScreen extends Screen {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    // %-X \u003d X characters width","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    private static final String TITLE \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"            String.format(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"                    \"%s%s%-5s     %s%-15s       %s%-5s%s x %s%-5s%s     %s%-6s%s\",","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"                    BOLD,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    GREEN,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"                    \"LEVEL\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    WHITE,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    \"POKER HAND\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    BLUE_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    \"CHIPS\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    BLACK_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"                    RED_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"                    \"MULTI\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    BLACK_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    ORANGE,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    \"PLAYS\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"                    END);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    private final List\u003cPokerHand\u003e pokerHands;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    public PokerHandScreen() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        super(\"Javatro Poker Hands\");","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new ReturnOption());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.pokerHands \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"                Stream.of(PokerHand.HandType.values())","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"                        .map(PokerHand::new)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"        List\u003cString\u003e handDisplays \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"                pokerHands.stream()","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"                        .map(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                                hand -\u003e {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"                                    PokerHand.HandType type \u003d hand.handType();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"                                    return String.format(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"                                            \"%s%4d       %s%-15s       %s%5d%s x %s%-5d%s      \"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"                                                    + \" %s%-5d%s\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                            GREEN,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                            PlanetCard.getLevel(type),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"                                            WHITE,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                                            type.getHandName(),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                                            BLUE_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                                            hand.getChips(),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                                            BLACK_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"                                            RED_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"                                            hand.getMultiplier(),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                                            BLACK_B,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"                                            ORANGE,","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"                                            JavatroCore.getPlayCount(hand.handType()),","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"                                            END);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                                })","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                        .collect(Collectors.toList());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        printBorderedContent(TITLE, handDisplays);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"     * Updates the played count for a specific hand type.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"     * @param handType The hand type to update","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"    public void incrementPlayed(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"        pokerHands.replaceAll(hand -\u003e hand.handType() \u003d\u003d handType ? hand.incrementPlayed() : hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"     * Gets a specific poker hand by type.","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"     * @param handType The hand type to retrieve","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"     * @return The PokerHand instance","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"    public PokerHand getHand(PokerHand.HandType handType) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        return pokerHands.stream()","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                .filter(hand -\u003e hand.handType() \u003d\u003d handType)","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"                .findFirst()","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"                .orElseThrow();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":57,"-":39,"jwyk":10}},{"path":"src/main/java/javatro/display/screens/RunListScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"// @@author flyingapricot","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":" * Initial application screen displaying main menu options and game logo.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":" *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" * \u003cp\u003eProvides functionality for:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":" *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":" *   \u003cli\u003eDisplaying the Javatro logo","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":" *   \u003cli\u003ePresenting core game startup options","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":" *   \u003cli\u003eHandling basic application navigation","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"public class RunListScreen extends Screen {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"     * Constructs the jump to run screen with default main menu options.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException if screen initialization fails","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    public RunListScreen() throws JavatroException {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        super(\"List of Saved Runs\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"        Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        int numberOfRuns \u003d storage.getNumberOfRuns();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        //        super.commandMap.add(new RunSelectOption());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 1; i \u003c\u003d numberOfRuns; i++) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"            ViewRunOption newRunOption \u003d new ViewRunOption();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"            newRunOption.setRunNumber(i);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"            super.commandMap.add(newRunOption);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"        // assert commandMap.size() \u003d\u003d 3 : \"StartScreen should have exactly 3 initial options\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"     * Displays the startup screen content including:","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"     *   \u003cli\u003eJavatro logo loaded from external file","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"     *   \u003cli\u003eFormatted menu options (handled by superclass)","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {}","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"flyingapricot":50}},{"path":"src/main/java/javatro/display/screens/RunSelectScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.core.Deck.DeckType;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import java.util.Collections;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"public class RunSelectScreen extends Screen {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private static int runNumber \u003d 1;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    private final Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     * Constructs a screen with specified options menu title.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException if optionsTitle is null or empty","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    public RunSelectScreen() throws JavatroException {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        super(\"RUN SELECT MENU\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        if (storage.getNumberOfRuns() \u003e 0) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"            super.commandMap.add(new StartRunOption());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"            super.commandMap.add(new ViewNextRunOption());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"            super.commandMap.add(new ViewPrevRunOption());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            super.commandMap.add(new ViewRunListOption());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        super.commandMap.add(new StartGameOption());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"        if (storage.getNumberOfRuns() \u003e 0) displayCurrentChosenRun();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        else {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"            List\u003cString\u003e contents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"            String[] noSavedRunsArt \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"                    new String[] {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"                        \"\\u001B[48;5;242m \"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;242;48;5;242m▄▄▄▄\\u001B[38;5;242;48;5;60m▄\\u001B[38;5;60;48;5;60m▄▄\\u001B[38;5;60;48;5;243m▄▄\\u001B[38;5;60;48;5;66m▄\\u001B[38;5;66;48;5;66m▄▄▄▄\\u001B[38;5;243;48;5;66m▄\\u001B[38;5;241;48;5;243m▄\\u001B[38;5;237;48;5;241m▄\\u001B[38;5;237;48;5;237m▄▄▄▄▄▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;235;48;5;235m▄▄\\u001B[38;5;234;48;5;235m▄▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;52;48;5;52m▄\\u001B[38;5;52;48;5;1m▄\\u001B[38;5;1;48;5;1m▄▄▄\\u001B[48;5;94m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;94;48;5;94m▄▄\\u001B[48;5;94m  \"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;94;48;5;94m▄\\u001B[48;5;94m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;94;48;5;94m▄▄\\u001B[38;5;94;48;5;131m▄\\u001B[38;5;130;48;5;173m▄\\u001B[38;5;130;48;5;130m▄▄▄▄▄▄▄\\u001B[38;5;94;48;5;94m▄\\u001B[38;5;130;48;5;94m▄\\u001B[38;5;94;48;5;131m▄\\u001B[38;5;95;48;5;243m▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;243;48;5;66m▄\\u001B[38;5;66;48;5;66m▄▄\\u001B[38;5;243;48;5;66m▄▄▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;60;48;5;66m▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"                        \"\\u001B[38;5;241;48;5;242m▄\\u001B[38;5;242;48;5;242m▄▄▄▄▄▄▄\\u001B[38;5;242;48;5;60m▄\\u001B[38;5;60;48;5;60m▄▄\\u001B[38;5;60;48;5;243m▄\\u001B[38;5;243;48;5;243m▄▄\\u001B[38;5;242;48;5;243m▄\\u001B[38;5;241;48;5;243m▄\\u001B[38;5;237;48;5;241m▄\\u001B[38;5;237;48;5;236m▄\\u001B[38;5;237;48;5;237m▄▄▄▄▄▄▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;235;48;5;235m▄▄\\u001B[38;5;234;48;5;234m▄▄▄\\u001B[38;5;52;48;5;52m▄▄\\u001B[38;5;1;48;5;1m▄▄▄\\u001B[38;5;94;48;5;94m▄▄▄▄▄▄\\u001B[48;5;94m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;94;48;5;94m▄▄▄▄\\u001B[38;5;94;48;5;130m▄\\u001B[38;5;130;48;5;130m▄▄▄▄▄▄▄▄▄▄▄\\u001B[38;5;95;48;5;95m▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;66;48;5;66m▄\\u001B[38;5;243;48;5;243m▄▄\\u001B[38;5;60;48;5;243m▄▄▄\\u001B[38;5;60;48;5;60m▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"                        \"\\u001B[38;5;241;48;5;241m▄▄\\u001B[38;5;241;48;5;242m▄\\u001B[38;5;242;48;5;242m▄▄▄▄▄▄▄▄▄\\u001B[38;5;242;48;5;243m▄▄\\u001B[38;5;239;48;5;241m▄\\u001B[38;5;237;48;5;237m▄▄▄▄▄▄▄▄▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;234;48;5;234m▄▄▄▄▄\\u001B[38;5;52;48;5;52m▄▄\\u001B[38;5;52;48;5;1m▄\\u001B[38;5;1;48;5;1m▄▄▄\\u001B[38;5;1;48;5;94m▄\\u001B[38;5;1;48;5;88m▄\\u001B[38;5;94;48;5;94m▄▄▄▄▄▄▄▄▄▄\\u001B[38;5;130;48;5;130m▄▄▄▄▄▄▄▄▄▄▄\\u001B[38;5;95;48;5;95m▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;60;48;5;60m▄\\u001B[38;5;243;48;5;60m▄\\u001B[38;5;60;48;5;60m▄▄▄▄\\u001B[38;5;242;48;5;60m▄\\u001B[38;5;242;48;5;242m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                        \"\\u001B[38;5;241;48;5;241m▄▄\\u001B[48;5;241m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;241;48;5;241m▄▄\\u001B[38;5;241;48;5;242m▄▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;241;48;5;242m▄▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;243;48;5;242m▄\\u001B[38;5;8;48;5;242m▄\\u001B[38;5;243;48;5;241m▄\\u001B[38;5;240;48;5;237m▄\\u001B[38;5;237;48;5;237m▄▄▄▄\\u001B[38;5;237;48;5;236m▄\\u001B[38;5;237;48;5;237m▄▄▄▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;234;48;5;234m▄▄▄▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;237;48;5;235m▄\\u001B[38;5;239;48;5;52m▄\\u001B[38;5;95;48;5;52m▄▄▄▄\\u001B[38;5;95;48;5;1m▄▄▄\\u001B[38;5;131;48;5;94m▄\\u001B[38;5;94;48;5;94m▄▄▄▄▄▄▄▄\\u001B[38;5;95;48;5;94m▄▄\\u001B[38;5;241;48;5;94m▄\\u001B[38;5;59;48;5;94m▄\\u001B[38;5;95;48;5;94m▄\\u001B[38;5;239;48;5;94m▄\\u001B[38;5;94;48;5;130m▄▄\\u001B[38;5;130;48;5;130m▄▄▄\\u001B[38;5;94;48;5;95m▄\\u001B[38;5;239;48;5;95m▄\\u001B[38;5;242;48;5;243m▄\\u001B[38;5;60;48;5;60m▄\\u001B[38;5;242;48;5;60m▄▄\\u001B[38;5;242;48;5;242m▄▄▄\\u001B[48;5;242m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"                            + \" \\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"                        \"\\u001B[38;5;241;48;5;241m▄\\u001B[48;5;241m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;241;48;5;241m▄▄▄▄\\u001B[38;5;59;48;5;242m▄\\u001B[38;5;131;48;5;95m▄▄▄▄\\u001B[38;5;95;48;5;95m▄\\u001B[38;5;131;48;5;95m▄\\u001B[38;5;131;48;5;131m▄▄\\u001B[38;5;95;48;5;239m▄\\u001B[38;5;236;48;5;236m▄▄▄▄▄\\u001B[38;5;237;48;5;237m▄▄▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;234;48;5;234m▄▄▄\\u001B[38;5;236;48;5;234m▄\\u001B[38;5;237;48;5;236m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;59;48;5;240m▄\\u001B[38;5;243;48;5;95m▄\\u001B[38;5;243;48;5;101m▄\\u001B[38;5;243;48;5;95m▄\\u001B[38;5;8;48;5;8m▄\\u001B[38;5;245;48;5;138m▄\\u001B[38;5;246;48;5;138m▄▄\\u001B[38;5;138;48;5;138m▄\\u001B[38;5;144;48;5;138m▄\\u001B[38;5;138;48;5;137m▄\\u001B[38;5;138;48;5;131m▄\\u001B[38;5;137;48;5;95m▄\\u001B[38;5;131;48;5;94m▄\\u001B[38;5;1;48;5;94m▄\\u001B[38;5;94;48;5;94m▄▄▄\\u001B[38;5;240;48;5;95m▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;60;48;5;242m▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;60;48;5;242m▄\\u001B[38;5;242;48;5;59m▄\\u001B[38;5;241;48;5;239m▄\\u001B[38;5;240;48;5;94m▄\\u001B[38;5;94;48;5;94m▄\\u001B[38;5;94;48;5;130m▄\\u001B[38;5;131;48;5;130m▄\\u001B[38;5;137;48;5;130m▄\\u001B[38;5;138;48;5;95m▄\\u001B[38;5;8;48;5;242m▄\\u001B[38;5;242;48;5;242m▄▄▄▄▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"                        \"\\u001B[38;5;59;48;5;59m▄▄▄\\u001B[38;5;59;48;5;241m▄▄▄\\u001B[38;5;59;48;5;59m▄\\u001B[38;5;95;48;5;95m▄\\u001B[38;5;95;48;5;131m▄\\u001B[38;5;95;48;5;137m▄\\u001B[38;5;237;48;5;137m▄\\u001B[38;5;95;48;5;131m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;131;48;5;137m▄\\u001B[38;5;137;48;5;131m▄\\u001B[38;5;95;48;5;95m▄\\u001B[38;5;236;48;5;236m▄▄\\u001B[38;5;237;48;5;236m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;240;48;5;237m▄\\u001B[38;5;59;48;5;237m▄\\u001B[38;5;241;48;5;237m▄\\u001B[38;5;241;48;5;238m▄\\u001B[38;5;237;48;5;236m▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;237;48;5;235m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;238;48;5;240m▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;8;48;5;243m▄\\u001B[38;5;102;48;5;8m▄\\u001B[38;5;245;48;5;102m▄\\u001B[38;5;246;48;5;245m▄\\u001B[38;5;246;48;5;246m▄▄\\u001B[38;5;247;48;5;247m▄\\u001B[38;5;137;48;5;144m▄\\u001B[38;5;130;48;5;138m▄\\u001B[38;5;130;48;5;136m▄\\u001B[38;5;130;48;5;130m▄\\u001B[38;5;130;48;5;137m▄\\u001B[38;5;137;48;5;131m▄\\u001B[38;5;95;48;5;94m▄\\u001B[38;5;94;48;5;94m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;59;48;5;59m▄\\u001B[38;5;242;48;5;242m▄▄▄▄▄\\u001B[38;5;242;48;5;241m▄\\u001B[38;5;60;48;5;241m▄\\u001B[38;5;242;48;5;59m▄\\u001B[38;5;243;48;5;239m▄\\u001B[38;5;102;48;5;101m▄\\u001B[38;5;246;48;5;246m▄\\u001B[38;5;248;48;5;247m▄\\u001B[38;5;249;48;5;145m▄\\u001B[38;5;247;48;5;245m▄\\u001B[38;5;243;48;5;242m▄\\u001B[38;5;242;48;5;242m▄▄▄\\u001B[38;5;241;48;5;242m▄\\u001B[38;5;241;48;5;241m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"                        \"\\u001B[38;5;59;48;5;59m▄▄▄▄▄▄\\u001B[38;5;240;48;5;240m▄\\u001B[38;5;238;48;5;239m▄\\u001B[38;5;237;48;5;239m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;236;48;5;240m▄\\u001B[38;5;95;48;5;131m▄▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;95;48;5;131m▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;241;48;5;239m▄\\u001B[38;5;241;48;5;59m▄\\u001B[38;5;241;48;5;241m▄\\u001B[38;5;241;48;5;242m▄▄\\u001B[38;5;241;48;5;241m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;236;48;5;52m▄\\u001B[38;5;58;48;5;58m▄\\u001B[38;5;58;48;5;239m▄\\u001B[38;5;95;48;5;8m▄\\u001B[38;5;102;48;5;245m▄\\u001B[38;5;246;48;5;245m▄▄\\u001B[38;5;8;48;5;246m▄\\u001B[38;5;95;48;5;246m▄\\u001B[38;5;94;48;5;137m▄\\u001B[38;5;94;48;5;130m▄▄\\u001B[38;5;130;48;5;130m▄▄▄\\u001B[38;5;137;48;5;137m▄\\u001B[38;5;101;48;5;95m▄\\u001B[38;5;238;48;5;236m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;59;48;5;240m▄\\u001B[38;5;242;48;5;242m▄▄▄▄▄▄▄▄\\u001B[38;5;246;48;5;102m▄\\u001B[38;5;245;48;5;8m▄\\u001B[38;5;247;48;5;247m▄\\u001B[38;5;145;48;5;248m▄\\u001B[38;5;145;48;5;249m▄\\u001B[38;5;246;48;5;250m▄\\u001B[38;5;60;48;5;245m▄\\u001B[38;5;241;48;5;241m▄▄▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"                        \"\\u001B[38;5;240;48;5;240m▄\\u001B[38;5;59;48;5;59m▄▄▄▄▄\\u001B[38;5;239;48;5;239m▄\\u001B[38;5;238;48;5;238m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;238;48;5;238m▄\\u001B[38;5;240;48;5;95m▄\\u001B[38;5;131;48;5;137m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;95;48;5;95m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;59;48;5;240m▄\\u001B[38;5;59;48;5;241m▄\\u001B[38;5;241;48;5;241m▄▄▄▄\\u001B[38;5;240;48;5;59m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;236;48;5;234m▄\\u001B[38;5;238;48;5;235m▄\\u001B[38;5;237;48;5;234m▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;234;48;5;238m▄\\u001B[38;5;237;48;5;242m▄\\u001B[38;5;243;48;5;102m▄\\u001B[38;5;102;48;5;102m▄\\u001B[38;5;95;48;5;242m▄\\u001B[38;5;94;48;5;239m▄\\u001B[38;5;58;48;5;94m▄▄\\u001B[38;5;95;48;5;94m▄▄\\u001B[38;5;94;48;5;94m▄\\u001B[38;5;130;48;5;94m▄\\u001B[38;5;95;48;5;131m▄\\u001B[38;5;102;48;5;8m▄\\u001B[38;5;101;48;5;95m▄\\u001B[38;5;8;48;5;101m▄\\u001B[38;5;242;48;5;8m▄\\u001B[38;5;241;48;5;242m▄▄\\u001B[38;5;241;48;5;241m▄▄▄▄\\u001B[38;5;241;48;5;242m▄\\u001B[38;5;241;48;5;243m▄\\u001B[38;5;241;48;5;245m▄\\u001B[38;5;60;48;5;66m▄\\u001B[38;5;66;48;5;246m▄\\u001B[38;5;66;48;5;247m▄\\u001B[38;5;242;48;5;103m▄\\u001B[38;5;241;48;5;66m▄\\u001B[38;5;241;48;5;241m▄▄▄▄\\u001B[48;5;241m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;241;48;5;241m▄\\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                        \"\\u001B[38;5;240;48;5;240m▄▄▄▄\\u001B[48;5;59m \"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;239;48;5;239m▄\\u001B[38;5;238;48;5;238m▄▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;237;48;5;238m▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;131;48;5;131m▄\\u001B[38;5;95;48;5;95m▄▄\\u001B[38;5;8;48;5;240m▄\\u001B[38;5;241;48;5;59m▄\\u001B[38;5;59;48;5;59m▄▄\\u001B[38;5;241;48;5;59m▄\\u001B[38;5;59;48;5;59m▄\\u001B[38;5;59;48;5;241m▄\\u001B[38;5;59;48;5;59m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;237;48;5;236m▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;235;48;5;236m▄▄\\u001B[38;5;236;48;5;234m▄\\u001B[38;5;237;48;5;235m▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;245;48;5;245m▄\\u001B[38;5;137;48;5;137m▄\\u001B[38;5;131;48;5;130m▄\\u001B[38;5;94;48;5;94m▄\\u001B[38;5;94;48;5;235m▄\\u001B[38;5;94;48;5;238m▄\\u001B[38;5;95;48;5;95m▄\\u001B[38;5;101;48;5;95m▄\\u001B[38;5;138;48;5;137m▄\\u001B[38;5;247;48;5;138m▄\\u001B[38;5;246;48;5;245m▄\\u001B[38;5;137;48;5;101m▄\\u001B[38;5;243;48;5;8m▄\\u001B[38;5;241;48;5;241m▄▄▄▄▄▄▄▄▄▄▄\\u001B[48;5;241m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;241;48;5;241m▄▄▄▄▄▄\\u001B[38;5;59;48;5;241m▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"                        \"\\u001B[38;5;240;48;5;240m▄▄▄▄▄▄\\u001B[38;5;240;48;5;239m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;238;48;5;239m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;95;48;5;95m▄\\u001B[38;5;239;48;5;95m▄\\u001B[38;5;238;48;5;95m▄\\u001B[38;5;235;48;5;8m▄\\u001B[38;5;235;48;5;238m▄▄\\u001B[38;5;236;48;5;238m▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;59;48;5;59m▄▄\\u001B[38;5;240;48;5;240m▄\\u001B[38;5;240;48;5;239m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;239;48;5;236m▄\\u001B[38;5;240;48;5;236m▄\\u001B[38;5;241;48;5;239m▄\\u001B[38;5;240;48;5;239m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;238;48;5;239m▄\\u001B[38;5;8;48;5;102m▄\\u001B[38;5;247;48;5;247m▄\\u001B[38;5;247;48;5;138m▄\\u001B[38;5;144;48;5;137m▄\\u001B[38;5;138;48;5;137m▄▄\\u001B[38;5;247;48;5;138m▄\\u001B[38;5;247;48;5;144m▄\\u001B[38;5;248;48;5;247m▄\\u001B[38;5;247;48;5;247m▄\\u001B[38;5;246;48;5;246m▄\\u001B[38;5;138;48;5;138m▄\\u001B[38;5;243;48;5;243m▄\\u001B[38;5;241;48;5;241m▄▄▄▄▄▄▄\\u001B[38;5;59;48;5;241m▄▄\\u001B[38;5;59;48;5;59m▄▄▄▄▄▄▄▄▄▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"                        \"\\u001B[38;5;240;48;5;240m▄▄▄▄▄▄▄\\u001B[38;5;239;48;5;238m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;234;48;5;235m▄▄\\u001B[38;5;235;48;5;235m▄▄\\u001B[38;5;235;48;5;237m▄\\u001B[38;5;235;48;5;235m▄▄▄▄\\u001B[38;5;236;48;5;235m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;59;48;5;240m▄\\u001B[38;5;240;48;5;59m▄\\u001B[38;5;240;48;5;240m▄▄▄\\u001B[38;5;237;48;5;236m▄\\u001B[38;5;236;48;5;235m▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;237;48;5;238m▄\\u001B[38;5;238;48;5;240m▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;240;48;5;240m▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;236;48;5;238m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;240;48;5;239m▄\\u001B[38;5;245;48;5;102m▄\\u001B[38;5;247;48;5;247m▄▄\\u001B[38;5;246;48;5;138m▄\\u001B[38;5;138;48;5;138m▄\\u001B[38;5;247;48;5;247m▄▄▄\\u001B[48;5;247m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;246;48;5;246m▄\\u001B[38;5;138;48;5;138m▄\\u001B[38;5;8;48;5;102m▄\\u001B[38;5;59;48;5;242m▄\\u001B[38;5;59;48;5;59m▄▄\\u001B[38;5;59;48;5;241m▄\\u001B[38;5;59;48;5;59m▄▄▄▄▄▄\\u001B[48;5;59m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"                            + \"  \\u001B[38;5;59;48;5;59m▄▄▄▄▄▄\\u001B[38;5;240;48;5;59m▄\\u001B[38;5;59;48;5;59m▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"                        \"\\u001B[38;5;240;48;5;240m▄▄▄▄▄▄▄▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;234;48;5;234m▄▄▄▄▄\\u001B[38;5;235;48;5;235m▄▄\\u001B[38;5;234;48;5;236m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;238;48;5;239m▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;240;48;5;240m▄▄▄\\u001B[38;5;239;48;5;238m▄\\u001B[38;5;238;48;5;236m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;235;48;5;237m▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;237;48;5;238m▄\\u001B[38;5;238;48;5;239m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;234;48;5;237m▄\\u001B[38;5;238;48;5;242m▄\\u001B[38;5;242;48;5;245m▄\\u001B[38;5;8;48;5;243m▄\\u001B[38;5;246;48;5;138m▄\\u001B[38;5;247;48;5;245m▄\\u001B[38;5;138;48;5;138m▄\\u001B[38;5;246;48;5;247m▄\\u001B[38;5;138;48;5;247m▄▄\\u001B[38;5;95;48;5;245m▄\\u001B[38;5;242;48;5;243m▄\\u001B[38;5;59;48;5;241m▄\\u001B[38;5;240;48;5;59m▄\\u001B[38;5;59;48;5;59m▄▄▄▄\\u001B[38;5;240;48;5;59m▄\\u001B[38;5;59;48;5;59m▄▄▄▄\\u001B[38;5;240;48;5;59m▄▄\\u001B[38;5;240;48;5;240m▄▄▄▄▄▄▄▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                        \"\\u001B[48;5;239m   \"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;239;48;5;240m▄\\u001B[38;5;239;48;5;239m▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;238;48;5;239m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;234;48;5;233m▄\\u001B[38;5;234;48;5;234m▄▄\\u001B[38;5;236;48;5;234m▄\\u001B[38;5;239;48;5;236m▄\\u001B[38;5;239;48;5;238m▄\\u001B[38;5;238;48;5;238m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;236;48;5;235m▄\\u001B[38;5;238;48;5;238m▄\\u001B[38;5;240;48;5;240m▄▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;239;48;5;239m▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;239;48;5;239m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;233;48;5;236m▄\\u001B[38;5;233;48;5;238m▄\\u001B[38;5;233;48;5;237m▄\\u001B[38;5;233;48;5;236m▄\\u001B[38;5;52;48;5;237m▄\\u001B[38;5;94;48;5;238m▄\\u001B[38;5;94;48;5;239m▄\\u001B[38;5;94;48;5;95m▄▄\\u001B[38;5;94;48;5;138m▄▄▄▄\\u001B[38;5;94;48;5;131m▄▄\\u001B[38;5;243;48;5;95m▄\\u001B[38;5;241;48;5;242m▄\\u001B[38;5;240;48;5;240m▄\\u001B[38;5;59;48;5;240m▄\\u001B[38;5;240;48;5;59m▄▄▄\\u001B[38;5;240;48;5;240m▄▄▄▄\\u001B[48;5;240m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                            + \"  \\u001B[38;5;240;48;5;240m▄▄▄▄▄▄▄▄▄▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                        \"\\u001B[38;5;239;48;5;239m▄▄\\u001B[48;5;239m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;239;48;5;239m▄▄▄▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;233;48;5;234m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;235;48;5;234m▄\\u001B[48;5;234m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;242;48;5;234m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;236;48;5;239m▄\\u001B[38;5;238;48;5;239m▄\\u001B[38;5;234;48;5;236m▄\\u001B[48;5;234m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;235;48;5;235m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;237;48;5;238m▄\\u001B[38;5;240;48;5;240m▄\\u001B[38;5;239;48;5;240m▄\\u001B[48;5;239m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"                            + \"   \\u001B[38;5;239;48;5;239m▄\\u001B[38;5;236;48;5;235m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;234;48;5;233m▄\\u001B[38;5;234;48;5;232m▄▄\\u001B[38;5;234;48;5;233m▄\\u001B[38;5;234;48;5;52m▄\\u001B[38;5;52;48;5;52m▄\\u001B[38;5;58;48;5;52m▄\\u001B[38;5;236;48;5;1m▄\\u001B[38;5;94;48;5;94m▄\\u001B[38;5;1;48;5;94m▄\\u001B[38;5;94;48;5;94m▄\\u001B[38;5;1;48;5;1m▄\\u001B[38;5;58;48;5;94m▄\\u001B[38;5;95;48;5;94m▄\\u001B[38;5;8;48;5;101m▄\\u001B[38;5;242;48;5;243m▄\\u001B[38;5;59;48;5;59m▄\\u001B[38;5;240;48;5;240m▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;240;48;5;240m▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"                        \"\\u001B[38;5;239;48;5;239m▄▄▄▄▄▄\\u001B[38;5;238;48;5;239m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;233;48;5;233m▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;238;48;5;236m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;235;48;5;235m▄▄▄\\u001B[38;5;234;48;5;237m▄\\u001B[38;5;234;48;5;234m▄\\u001B[48;5;234m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"                            + \" \\u001B[38;5;235;48;5;235m▄\\u001B[38;5;237;48;5;235m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;239;48;5;239m▄▄▄▄▄▄\\u001B[38;5;239;48;5;240m▄\\u001B[38;5;234;48;5;234m▄▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;233;48;5;234m▄▄\\u001B[38;5;52;48;5;52m▄\\u001B[38;5;52;48;5;94m▄\\u001B[38;5;1;48;5;94m▄\\u001B[38;5;94;48;5;94m▄▄\\u001B[38;5;94;48;5;130m▄\\u001B[38;5;94;48;5;94m▄\\u001B[38;5;95;48;5;237m▄\\u001B[38;5;243;48;5;95m▄\\u001B[38;5;242;48;5;242m▄\\u001B[38;5;242;48;5;243m▄\\u001B[38;5;245;48;5;243m▄\\u001B[38;5;109;48;5;66m▄\\u001B[38;5;109;48;5;242m▄\\u001B[38;5;73;48;5;241m▄\\u001B[38;5;66;48;5;59m▄\\u001B[38;5;241;48;5;240m▄▄\\u001B[38;5;60;48;5;240m▄\\u001B[38;5;67;48;5;59m▄\\u001B[38;5;24;48;5;240m▄\\u001B[38;5;23;48;5;240m▄\\u001B[38;5;24;48;5;240m▄▄▄▄▄\\u001B[38;5;60;48;5;240m▄\\u001B[38;5;60;48;5;239m▄\\u001B[38;5;240;48;5;239m▄\\u001B[38;5;239;48;5;239m▄▄▄▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"                        \"\\u001B[38;5;239;48;5;239m▄▄▄▄▄\\u001B[38;5;238;48;5;239m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;233;48;5;234m▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;237;48;5;236m▄\\u001B[38;5;237;48;5;235m▄\\u001B[38;5;235;48;5;235m▄▄▄▄\\u001B[38;5;235;48;5;234m▄▄\\u001B[38;5;236;48;5;235m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;239;48;5;239m▄▄▄▄▄\\u001B[38;5;60;48;5;241m▄\\u001B[38;5;152;48;5;66m▄\\u001B[38;5;23;48;5;238m▄\\u001B[38;5;236;48;5;235m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;233;48;5;233m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;236;48;5;234m▄\\u001B[38;5;237;48;5;234m▄\\u001B[38;5;238;48;5;233m▄\\u001B[38;5;238;48;5;234m▄\\u001B[38;5;238;48;5;52m▄▄\\u001B[38;5;95;48;5;1m▄\\u001B[38;5;101;48;5;94m▄\\u001B[38;5;8;48;5;95m▄\\u001B[38;5;242;48;5;243m▄\\u001B[38;5;241;48;5;242m▄\\u001B[38;5;242;48;5;241m▄\\u001B[38;5;243;48;5;242m▄\\u001B[38;5;66;48;5;66m▄\\u001B[38;5;73;48;5;73m▄\\u001B[38;5;73;48;5;74m▄\\u001B[38;5;67;48;5;110m▄\\u001B[38;5;73;48;5;109m▄\\u001B[38;5;73;48;5;73m▄\\u001B[38;5;73;48;5;6m▄\\u001B[38;5;31;48;5;6m▄\\u001B[38;5;6;48;5;31m▄\\u001B[38;5;31;48;5;6m▄▄\\u001B[38;5;6;48;5;6m▄\\u001B[38;5;6;48;5;31m▄\\u001B[38;5;6;48;5;37m▄\\u001B[38;5;6;48;5;38m▄\\u001B[38;5;24;48;5;38m▄\\u001B[38;5;23;48;5;74m▄\\u001B[38;5;23;48;5;31m▄\\u001B[38;5;23;48;5;24m▄\\u001B[38;5;59;48;5;60m▄\\u001B[38;5;240;48;5;59m▄\\u001B[38;5;238;48;5;240m▄\\u001B[38;5;239;48;5;239m▄▄▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"                        \"\\u001B[38;5;239;48;5;239m▄▄▄▄▄▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;233;48;5;233m▄▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;237;48;5;238m▄\\u001B[38;5;59;48;5;240m▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;237;48;5;236m▄\\u001B[38;5;239;48;5;237m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;240;48;5;238m▄\\u001B[38;5;73;48;5;60m▄\\u001B[38;5;73;48;5;24m▄\\u001B[38;5;73;48;5;6m▄\\u001B[38;5;73;48;5;60m▄\\u001B[38;5;67;48;5;67m▄\\u001B[38;5;74;48;5;67m▄\\u001B[38;5;73;48;5;73m▄\\u001B[38;5;23;48;5;23m▄▄\\u001B[38;5;236;48;5;235m▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;233;48;5;233m▄\\u001B[38;5;233;48;5;235m▄\\u001B[38;5;235;48;5;237m▄\\u001B[38;5;237;48;5;239m▄\\u001B[38;5;240;48;5;241m▄\\u001B[38;5;241;48;5;242m▄\\u001B[38;5;242;48;5;243m▄\\u001B[38;5;243;48;5;8m▄\\u001B[38;5;242;48;5;8m▄\\u001B[38;5;59;48;5;243m▄\\u001B[38;5;241;48;5;241m▄\\u001B[38;5;60;48;5;241m▄\\u001B[38;5;66;48;5;66m▄\\u001B[38;5;67;48;5;66m▄\\u001B[38;5;67;48;5;67m▄▄\\u001B[38;5;73;48;5;67m▄\\u001B[38;5;73;48;5;73m▄▄▄▄\\u001B[38;5;109;48;5;67m▄\\u001B[38;5;152;48;5;73m▄\\u001B[38;5;7;48;5;74m▄\\u001B[38;5;109;48;5;74m▄\\u001B[38;5;240;48;5;60m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;234;48;5;235m▄▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;235;48;5;235m▄▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;237;48;5;237m▄\\u001B[38;5;238;48;5;236m▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;236;48;5;238m▄\\u001B[38;5;239;48;5;239m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"                        \"\\u001B[38;5;238;48;5;238m▄▄▄▄▄\\u001B[38;5;236;48;5;238m▄\\u001B[38;5;233;48;5;235m▄\\u001B[38;5;232;48;5;233m▄\\u001B[38;5;233;48;5;233m▄\\u001B[38;5;233;48;5;234m▄\\u001B[38;5;236;48;5;237m▄\\u001B[38;5;59;48;5;240m▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;234;48;5;234m▄▄▄\\u001B[38;5;234;48;5;236m▄\\u001B[38;5;236;48;5;239m▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;234;48;5;236m▄\\u001B[38;5;234;48;5;240m▄\\u001B[38;5;235;48;5;66m▄\\u001B[38;5;238;48;5;109m▄\\u001B[38;5;239;48;5;152m▄\\u001B[38;5;238;48;5;66m▄\\u001B[38;5;237;48;5;66m▄\\u001B[38;5;235;48;5;60m▄\\u001B[38;5;238;48;5;23m▄\\u001B[38;5;23;48;5;23m▄▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;234;48;5;233m▄\\u001B[38;5;235;48;5;233m▄\\u001B[38;5;236;48;5;234m▄\\u001B[38;5;238;48;5;236m▄\\u001B[38;5;239;48;5;237m▄\\u001B[38;5;59;48;5;238m▄\\u001B[38;5;60;48;5;239m▄\\u001B[38;5;66;48;5;239m▄\\u001B[38;5;66;48;5;59m▄\\u001B[38;5;6;48;5;66m▄\\u001B[38;5;31;48;5;66m▄\\u001B[38;5;31;48;5;31m▄\\u001B[38;5;67;48;5;31m▄\\u001B[38;5;73;48;5;67m▄\\u001B[38;5;73;48;5;73m▄\\u001B[38;5;67;48;5;109m▄\\u001B[38;5;60;48;5;109m▄\\u001B[38;5;66;48;5;109m▄\\u001B[38;5;6;48;5;109m▄\\u001B[38;5;24;48;5;247m▄\\u001B[38;5;23;48;5;66m▄▄\\u001B[38;5;235;48;5;240m▄\\u001B[38;5;235;48;5;238m▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;235;48;5;235m▄▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;234;48;5;234m▄▄▄\\u001B[38;5;234;48;5;235m▄▄\\u001B[38;5;235;48;5;236m▄\\u001B[38;5;238;48;5;238m▄▄\\u001B[38;5;238;48;5;237m▄\\u001B[38;5;237;48;5;237m▄\\u001B[m\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"                        \"\\u001B[38;5;238;48;5;238m▄▄▄▄▄\\u001B[38;5;236;48;5;236m▄\\u001B[38;5;233;48;5;232m▄\\u001B[38;5;232;48;5;232m▄\\u001B[38;5;232;48;5;233m▄\\u001B[38;5;233;48;5;233m▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;240;48;5;239m▄\\u001B[38;5;240;48;5;238m▄\\u001B[38;5;235;48;5;234m▄\\u001B[38;5;234;48;5;234m▄\\u001B[48;5;234m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"                            + \"  \\u001B[38;5;234;48;5;234m▄▄▄\\u001B[38;5;233;48;5;233m▄▄▄▄\\u001B[38;5;232;48;5;233m▄\\u001B[38;5;233;48;5;234m▄\\u001B[38;5;237;48;5;234m▄\\u001B[38;5;241;48;5;240m▄\\u001B[38;5;23;48;5;23m▄▄\\u001B[38;5;23;48;5;236m▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;238;48;5;235m▄\\u001B[38;5;239;48;5;236m▄\\u001B[38;5;23;48;5;237m▄\\u001B[38;5;23;48;5;23m▄▄\\u001B[38;5;24;48;5;23m▄\\u001B[38;5;24;48;5;6m▄\\u001B[38;5;6;48;5;6m▄\\u001B[38;5;66;48;5;31m▄\\u001B[38;5;73;48;5;30m▄\\u001B[38;5;73;48;5;31m▄\\u001B[38;5;67;48;5;67m▄\\u001B[38;5;67;48;5;73m▄\\u001B[38;5;31;48;5;67m▄\\u001B[38;5;67;48;5;73m▄\\u001B[38;5;73;48;5;67m▄\\u001B[38;5;66;48;5;24m▄\\u001B[38;5;23;48;5;23m▄▄▄▄▄▄\\u001B[38;5;23;48;5;236m▄\\u001B[38;5;236;48;5;235m▄\\u001B[38;5;234;48;5;235m▄\\u001B[38;5;235;48;5;235m▄▄\\u001B[38;5;235;48;5;234m▄▄\\u001B[38;5;234;48;5;234m▄\\u001B[38;5;235;48;5;234m▄▄\\u001B[38;5;235;48;5;235m▄\\u001B[38;5;235;48;5;237m▄\\u001B[38;5;238;48;5;238m▄\\u001B[38;5;239;48;5;238m▄\\u001B[38;5;238;48;5;238m▄\\u001B[m\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"                    };","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"            Collections.addAll(contents, noSavedRunsArt);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"            contents.add(\"\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"            contents.add(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"                    \"\\u001B[1;38;5;117mHmm... It looks lonely here. No saved runs found.\\u001B[0m\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"            contents.add(\"\\u001B[38;5;81mMaybe your journey is just waiting to begin.\\u001B[0m\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"            contents.add(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"                    \"\\u001B[38;5;178mStart a new run and I\u0027ll disappear, leaving only your progress\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"                            + \" behind...\\u001B[0m\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"            contents.add(\"\\u001B[0m\"); // Reset to avoid color bleeding","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"            printBorderedContent(\"NO SAVED RUNS FOUND!\", contents);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"    public int getRunNumber() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"        return runNumber;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"    public void setRunNumber(int runNumber) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"        RunSelectScreen.runNumber \u003d runNumber;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"    public void displayCurrentChosenRun() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"        List\u003cString\u003e optionLines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"        // Replace this with the actual split ANSI card art","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"        String[] cardArt;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"        String cardDesc \u003d \"\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"        if (storage.getValue(runNumber - 1, Storage.DECK_INDEX)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"                        .charAt(storage.getValue(runNumber - 1, Storage.DECK_INDEX).length() - 1)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"                \u003d\u003d \u0027]\u0027) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"            cardArt \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"                    Storage.fromStorageKey(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"                                    storage.getValue(runNumber - 1, 8)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"                                            .substring(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"                                                    0,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"                                                    storage.getValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"                                                                            runNumber - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"                                                                            Storage.DECK_INDEX)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"                                                                    .length()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"                                                            - 1))","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"                            .getArtLines();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"            cardDesc \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"                    Storage.fromStorageKey(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"                                    storage.getValue(runNumber - 1, Storage.DECK_INDEX)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"                                            .substring(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"                                                    0,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"                                                    storage.getValue(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"                                                                            runNumber - 1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"                                                                            Storage.DECK_INDEX)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"                                                                    .length()","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"                                                            - 1))","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"                            .getDeckName();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"        } else {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"            cardArt \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"                    Storage.fromStorageKey(storage.getValue(runNumber - 1, Storage.DECK_INDEX))","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"                            .getArtLines();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"            cardDesc \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"                    Storage.fromStorageKey(storage.getValue(runNumber - 1, Storage.DECK_INDEX))","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"                            .getDeckName();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"flyingapricot"},"content":"        int screenSize \u003d 11;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"flyingapricot"},"content":"        String deckLabel \u003d \"\\u001B[1;4mDECK\\u001B[0m\"; // Bold + Underlined","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"flyingapricot"},"content":"        String visibleCardLine \u003d stripAnsi(cardArt[0]);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"flyingapricot"},"content":"        int labelPadding \u003d 78 + (visibleCardLine.length() - \"DECK\".length()) / 2;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"flyingapricot"},"content":"        String paddedDeckLabel \u003d String.format(\"%\" + labelPadding + \"s\", deckLabel);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"flyingapricot"},"content":"        optionLines.add(paddedDeckLabel);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"flyingapricot"},"content":"        optionLines.add(\"\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"flyingapricot"},"content":"        // Italicized deck name","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"flyingapricot"},"content":"        int padding \u003d 81;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"        if (Storage.DeckFromKey(storage.getValue(runNumber - 1, Storage.DECK_INDEX))","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"                        \u003d\u003d DeckType.ABANDONED","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"                || Storage.DeckFromKey(storage.getValue(runNumber - 1, Storage.DECK_INDEX))","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"                        \u003d\u003d DeckType.CHECKERED) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"flyingapricot"},"content":"            padding \u003d 90;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"flyingapricot"},"content":"        String italicDeckName \u003d \"\\u001B[3m\" + cardDesc + \"\\u001B[0m\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"flyingapricot"},"content":"        visibleCardLine \u003d stripAnsi(cardArt[0]);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"flyingapricot"},"content":"        int deckNamePadding \u003d padding + (visibleCardLine.length() - cardDesc.length()) / 2;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"flyingapricot"},"content":"        String paddedDeckName \u003d String.format(\"%\" + deckNamePadding + \"s\", italicDeckName);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"flyingapricot"},"content":"        String handValue \u003d storage.getValue(runNumber - 1, Storage.HAND_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"flyingapricot"},"content":"        String discardValue \u003d storage.getValue(runNumber - 1, Storage.DISCARD_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"flyingapricot"},"content":"        String handsOutput \u003d handValue.equals(\"-1\") ? \"NA\" : handValue;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"flyingapricot"},"content":"        String discardsOutput \u003d discardValue.equals(\"-1\") ? \"NA\" : discardValue;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c screenSize - 1; i++) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"flyingapricot"},"content":"            String leftText \u003d \"\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"flyingapricot"},"content":"            if (i \u003d\u003d 0)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"flyingapricot"},"content":"                leftText \u003d \"Round: \" + storage.getValue(runNumber - 1, Storage.ROUND_NUMBER_INDEX);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"flyingapricot"},"content":"            if (i \u003d\u003d 1)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"                leftText \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"                        \"Round Score: \"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"                                + storage.getValue(runNumber - 1, Storage.ROUND_SCORE_INDEX);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"            else if (i \u003d\u003d 2)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"flyingapricot"},"content":"                leftText \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"                        \"Hands: \"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"                                + (handValue.equals(\"-1\") ? \"NA\" : handValue)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"                                + \" | Discards: \"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"                                + (discardValue.equals(\"-1\") ? \"NA\" : discardValue);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"flyingapricot"},"content":"            else if (i \u003d\u003d 3) leftText \u003d \"------------------------\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"            else if (i \u003d\u003d 4)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"flyingapricot"},"content":"                leftText \u003d \"Ante: \" + storage.getValue(runNumber - 1, Storage.ANTE_NUMBER_INDEX);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"            else if (i \u003d\u003d 5)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"flyingapricot"},"content":"                leftText \u003d \"Blind: \" + storage.getValue(runNumber - 1, Storage.BLIND_INDEX);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"flyingapricot"},"content":"            else if (i \u003d\u003d 6) leftText \u003d \"------------------------\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"flyingapricot"},"content":"            else if (i \u003d\u003d 7)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"                leftText \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"                        \"Wins: \"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"flyingapricot"},"content":"                                + storage.getValue(runNumber - 1, Storage.WINS_INDEX)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"                                + \" | Losses: \"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"flyingapricot"},"content":"                                + storage.getValue(runNumber - 1, Storage.LOSSES_INDEX);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"flyingapricot"},"content":"            String rightAnsi \u003d (i \u003c cardArt.length) ? cardArt[i] : \"\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"flyingapricot"},"content":"            // Pad leftText to align with ANSI","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"flyingapricot"},"content":"            String paddedLeft \u003d String.format(\"%-70s\", leftText);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"flyingapricot"},"content":"            optionLines.add(paddedLeft + rightAnsi);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"flyingapricot"},"content":"        optionLines.add(paddedDeckName);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"flyingapricot"},"content":"        printBorderedContent(\"RUN #\" + runNumber, optionLines);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"flyingapricot"},"content":"    String stripAnsi(String input) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"flyingapricot"},"content":"        return input.replaceAll(\"\\\\u001B\\\\[[;\\\\d]*m\", \"\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":7,"flyingapricot":127,"-":86}},{"path":"src/main/java/javatro/display/screens/Screen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.ITALICS;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printBorderedContent;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.Option;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import javatro.utilities.outpututils.OutputUtils;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import java.io.IOException;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" * Abstract base class representing a display screen in the Javatro application.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eProvides common functionality for:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eManaging screen options/commands","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eDisplaying formatted menus","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eHandling user command selection","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eSubclasses must implement {@link #displayScreen()} to define specific screen content.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"public abstract class Screen {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    /** Format string for the options title decoration */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    private static final String TITLE_FORMAT \u003d \"%s::: %s :::%s\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    /** List of available commands/options for this screen */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    protected final List\u003cOption\u003e commandMap \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    /** Formatted title for the options menu section */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    private final String optionsTitle;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a screen with specified options menu title.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     * @param optionsTitle Descriptive title for the options section (1-3 words recommended)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if optionsTitle is null or empty","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    public Screen(String optionsTitle) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        if (optionsTitle \u003d\u003d null || optionsTitle.trim().isEmpty()) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidOptionsTitle();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        this.optionsTitle \u003d String.format(TITLE_FORMAT, BOLD, optionsTitle.trim(), END);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"     * Displays the main content of the screen.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eMust be implemented by concrete subclasses to define:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eScreen-specific header/content","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eAny additional visual elements","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eDynamic content updates","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    public abstract void displayScreen();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"     * Displays formatted options menu with title and border decoration.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"     * \u003cp\u003eOutput includes:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eStyled title header","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eNumbered list of options","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eOption descriptions with consistent formatting","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eVisual border elements","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    public void displayOptions() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        List\u003cString\u003e optionLines \u003d new ArrayList\u003c\u003e(commandMap.size());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        // Format each option with index, description, and styling","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c commandMap.size(); i++) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"            Option option \u003d commandMap.get(i);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"            String desc \u003d BLACK_B + option.getDescription() + END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"            String optionLine \u003d BLACK_B + BOLD + \"[\" + (i + 1) + \"] \" + END + ITALICS + desc + END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"            optionLines.add(optionLine);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        printBorderedContent(optionsTitle, optionLines);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"    public List\u003cOption\u003e getCommandMap() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        return commandMap;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"    // For Testing","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"    public void clearCommandMap() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        commandMap.clear();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"     * Gets the current number of available options.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"     * @return Number of registered commands/options (always ≥ 0)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"    public int getOptionsSize() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"        return commandMap.size();","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"     * Retrieves a command by its index position.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"     * @param index Zero-based index of the command","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"     * @return Selected Option object","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if index is out of valid range","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"    public Option getCommand(int index) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"        if (index \u003c 0 || index \u003e\u003d commandMap.size()) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.indexOutOfBounds(index);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"        Option selected \u003d commandMap.get(index);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"        assert selected !\u003d null : \"Command list should not contain null elements\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        return selected;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"    public void getOutput() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"        String fileName \u003d this.getClass().getSimpleName();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"            // Generate output file","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"            OutputUtils.pipeOutputToFile(fileName + \".txt\", this);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"            System.out.println(\"Output successfully written\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":142}},{"path":"src/main/java/javatro/display/screens/StartScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printANSI;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.audioplayer.AudioPlayer;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.HelpMenuOption;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.RunSelectOption;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" * Initial application screen displaying main menu options and game logo.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eProvides functionality for:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eDisplaying the Javatro logo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003ePresenting core game startup options","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eHandling basic application navigation","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"public class StartScreen extends Screen {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * Constructs the start screen with default main menu options.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen initialization fails","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    public StartScreen() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        super(\"MAIN MENU\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new RunSelectOption());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new HelpMenuOption());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        assert commandMap.size() \u003d\u003d 3 : \"StartScreen should have exactly 3 initial options\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     * Displays the startup screen content including:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eJavatro logo loaded from external file","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eFormatted menu options (handled by superclass)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        printANSI(\"javatro_logo.txt\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        AudioPlayer.getInstance().stopAudio();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        AudioPlayer.getInstance().playAudio(\"audioplayer/balatro_theme.wav\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":54}},{"path":"src/main/java/javatro/display/screens/WinGameScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BORDER_WIDTH;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_LEFT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOTTOM_RIGHT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.GREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.HORIZONTAL;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.ITALICS;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_LEFT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.TOP_RIGHT;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.centerText;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printANSI;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printBlackB;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import javatro.audioplayer.AudioPlayer;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import java.util.concurrent.ThreadLocalRandom;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" * Victory screen displayed upon completing the game successfully.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eFeatures:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eRandom celebratory quote","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eAnimated victory graphic","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003ePost-game navigation options","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"public class WinGameScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    /** Collection of victory messages for random selection */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    protected static final List\u003cString\u003e QUOTES \u003d","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"            List.of(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"                    \"You Aced it!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"                    \"You dealt with that pretty well!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"                    \"Looks like you weren\u0027t bluffing!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"                    \"Too bad these chips are all virtual...\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"                    \"Looks like I\u0027ve taught you well!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"                    \"You made some heads up plays!\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"                    \"Good thing I didn\u0027t bet against you!\");","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"     * Constructs victory screen with post-game options.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen initialization fails","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    public WinGameScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        super(\"\\\\\" + GREEN + \" YOU WIN! \" + END + BLACK_B + \"/\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new MainMenuOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"     * Displays victory screen components:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eCelebratory ASCII art","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eDecorative border elements","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eRandom victory quote","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003ePost-game options","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        // Play Win Sound","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        AudioPlayer.getInstance().stopAudio();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        AudioPlayer.getInstance().playAudio(\"audioplayer/winning.wav\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        // Display primary victory graphic","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        printANSI(\"jimbo.txt\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        // Select and display random quote","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        int quoteIndex \u003d ThreadLocalRandom.current().nextInt(QUOTES.size());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        String randomQuote \u003d QUOTES.get(quoteIndex);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        assert quoteIndex \u003e\u003d 0 \u0026\u0026 quoteIndex \u003c QUOTES.size() : \"Invalid quote index\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        // Render top border","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(TOP_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + TOP_RIGHT);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        // Display centered content","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"                centerText(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"                        BLUE + BOLD + \"Thanks for playing our game!\" + END + BLACK_B,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"                        BORDER_WIDTH));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        System.out.println(centerText(ITALICS + randomQuote, BORDER_WIDTH));","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"        // Render bottom border","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        printBlackB(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"                BOTTOM_LEFT + String.valueOf(HORIZONTAL).repeat(BORDER_WIDTH - 2) + BOTTOM_RIGHT);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"        System.out.println();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":103}},{"path":"src/main/java/javatro/display/screens/WinRoundScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLUE;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.CYAN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.GREEN;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.RED;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printANSI;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printBorderedContent;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Ante;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.PlanetCard;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.jokers.JokerFactory;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.options.NextRoundOption;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import java.util.concurrent.ThreadLocalRandom;","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" * Screen displayed after winning a game round, showing earned rewards.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eHandles:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eJoker card rewards for boss blind victories","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003ePlanet card rewards for regular blind victories","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eProgression system display","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"public class WinRoundScreen extends Screen {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     * Constructs round victory screen with progression options.","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen initialization fails","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    public WinRoundScreen() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        super(\"\\\\\" + GREEN + \" You beat the Blind! \" + END + BLACK_B + \"/\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new NextRoundOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        commandMap.add(new ExitGameOption());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"     * Displays round victory content based on blind type:","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eBoss Blind: Awards random joker with special ability","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eNormal Blind: Awards planet card with stat boosts","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    public void displayScreen() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        if (JavatroCore.getAnte().getBlind() \u003d\u003d Ante.Blind.BOSS_BLIND) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"            handleBossBlindVictory();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        } else {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"            handleNormalBlindVictory();","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    /** Handles boss blind victory rewards and display */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    private void handleBossBlindVictory() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"        Joker randomJoker \u003d JokerFactory.createRandomJoker();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"        assert randomJoker !\u003d null : \"Joker factory returned null\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        printANSI(randomJoker.getPath());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        String title \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"                \"You got a \" + CYAN + BOLD + randomJoker.getName() + END + BLACK_B + \" Joker card!\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"            JavatroCore.heldJokers.add(randomJoker);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"            printBorderedContent(title, List.of(\"\u003e\u003e \" + randomJoker.getDescription() + \" \u003c\u003c\"));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"            printBorderedContent(title, List.of(\"Limit for Jokers has been reached!\"));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"    /** Handles normal blind victory rewards and display */","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"    private void handleNormalBlindVictory() {","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        PokerHand.HandType[] handTypes \u003d PokerHand.HandType.values();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"        int randomIndex \u003d ThreadLocalRandom.current().nextInt(handTypes.length);","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        PokerHand.HandType randomPlanetCard \u003d handTypes[randomIndex];","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        assert randomIndex \u003e\u003d 0 \u0026\u0026 randomIndex \u003c handTypes.length : \"Invalid hand type index\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard.getForHand(randomPlanetCard).apply();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        printANSI(PlanetCard.getForHand(randomPlanetCard).getPath());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        String title \u003d","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                \"You got a \"","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                        + BLUE","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"                        + BOLD","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"                        + PlanetCard.getForHand(randomPlanetCard).getName()","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                        + END","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"                        + BLACK_B","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"                        + \" Planet card!\";","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"            String.format(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"                    \"Poker Hand %s%s\u003c%s\u003e%s%s Leveled Up!\",","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"                    BOLD, YELLOW, randomPlanetCard.getHandName(), END, BLACK_B),","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"            String.format(","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"                    \"Level %s: %s%s+%d Chips%s%s and %s%s+%d Mult%s%s\",","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"                    PlanetCard.getLevel(randomPlanetCard),","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"                    BOLD,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"                    BLUE,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"                    PlanetCard.getChipIncrement(randomPlanetCard),","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"                    END,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"                    BLACK_B,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"                    BOLD,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"                    RED,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"                    PlanetCard.getMultiIncrement(randomPlanetCard),","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"                    END,","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"                    BLACK_B)","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"        };","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"        printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":126}},{"path":"src/main/java/javatro/manager/JavatroManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"// @@author flyingapricot","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.Ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeEvent;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeListener;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":" * The {@code JavatroManager} class serves as the main controller (manager) of the game,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":" * coordinating interactions between the model ({@code JavatroCore}) and the view ({@code display}).","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":" * It listens for property changes and updates the game state accordingly.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"public class JavatroManager implements PropertyChangeListener {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    /** The main view responsible for rendering the user interface. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    public static UI ui;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    /** The main model responsible for handling game logic. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    public static JavatroCore jc;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    /** Stores the last recorded user input. */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    private static int userInput;","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    public static Ante ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    public static int roundCount \u003d 1;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    public static boolean runningTests \u003d","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"            false; // If tests are running, some settings will be adjusted","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"     * Constructs a {@code JavatroManager} and registers it as an observer to the view.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"     * @param ui The main view of the game.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"     * @param jc The main model of the game.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"    public JavatroManager(UI ui, JavatroCore jc) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.ui \u003d ui;","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.jc \u003d jc;","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        UI.getParser().addPropertyChangeListener(this); // Register as an observer","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"     * Changes the currently displayed screen.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"     * @param destinationScreen The new screen to be displayed.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"    public static void setScreen(Screen destinationScreen) throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"        ui.setCurrentScreen(destinationScreen);","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"     * Begins the game by initializing the game model and registering necessary observers.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs during game initialization.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"    public static void beginGame(Deck.DeckType deckType) throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"        jc.setupNewGame(deckType);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"     * Handles property change events from the view. If the property change corresponds to user","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"     * input, it executes the appropriate command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"     * @param evt The property change event.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"    public void propertyChange(PropertyChangeEvent evt) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"        if (evt.getPropertyName().equals(\"userInput\")) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"            // Execute the respective command","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"                UI.getCurrentScreen().getCommand((int) evt.getNewValue() - 1).execute();","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"                try {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"                    ui.setCurrentScreen(UI.getCurrentScreen());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"                } catch (JavatroException ex) {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"                    throw new RuntimeException(ex);","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"flyingapricot":85}},{"path":"src/main/java/javatro/manager/options/AcceptBlindOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":" * Represents an option to accept the current blind in the game. This class implements the {@code","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":" * Option} interface.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"public class AcceptBlindOption implements Option {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     * Returns the description of this option.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"     * @return A string representing the description of the option.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"        return \"Accept Blind\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"     * Executes the action associated with accepting the blind. Currently, this method does not","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"     * perform any operations.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"     * @throws JavatroException if an error occurs during execution.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"        JavatroManager.jc.beginGame();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"        JavatroCore.currentRound.addPropertyChangeListener(javatro.display.UI.getGameScreen());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"        JavatroCore.currentRound.updateRoundVariables();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"        Storage.getStorageInstance().updateSaveFile();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"swethacool":32,"flyingapricot":1,"jwyk":7}},{"path":"src/main/java/javatro/manager/options/CardSelectOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BLACK_B;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.BOLD;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.END;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.YELLOW;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.getCardArtLines;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.display.UI.printBorderedContent;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Ante;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.Parser;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.DiscardCardScreen;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.PlayCardScreen;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":" * The {@code CardSelectOption} class handles card selection operations for the player, allowing","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" * them to either play cards into their current poker hand or discard cards, depending on the active","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" * game screen. The number of selectable cards is limited by a configurable maximum (default: 5).","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"public class CardSelectOption implements Option {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    /** Default maximum number of cards that can be selected in one operation */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public static final int DEFAULT_SELECTION_LIMIT \u003d 5;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    /** Maximum allowed number of cards to select in this operation */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    private final int selectionLimit;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a card selector with default selection limit ({@value DEFAULT_SELECTION_LIMIT}).","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if initialization fails due to internal constraints","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    public CardSelectOption() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"        this(DEFAULT_SELECTION_LIMIT);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a card selector with a custom selection limit.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"     * @param selectionLimit Maximum number of cards that can be selected (must be ≥ 1)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if invalid selection limit is provided","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    public CardSelectOption(int selectionLimit) throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        if (selectionLimit \u003c 1) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"            throw JavatroException.invalidSelectionLimit();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        this.selectionLimit \u003d selectionLimit;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        // Assert internal invariant after validation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        assert this.selectionLimit \u003e\u003d 1 : \"Selection limit must be positive\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"     * Returns a human-readable description of this command.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"     * @return Brief string describing the card selection operation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        return \"Select Cards\";","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"     * Executes the card selection operation. Collects user input, processes the selection based on","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"     * current context (play/discard), updates game state, and handles game progression.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if input parsing fails or game state becomes inconsistent","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        // Get validated card selection from user","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e userInput \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                Parser.getCardInput(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"                        JavatroCore.currentRound.getPlayerHandCards().size(), selectionLimit);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        // Validate input assumptions","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        assert userInput !\u003d null : \"Card input must not be null\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        assert userInput.size() \u003c\u003d selectionLimit","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"                : \"Selected card count exceeds limit: \" + userInput.size();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"        // Process selection based on current screen context","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        if (UI.getCurrentScreen() instanceof PlayCardScreen) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"            // Play selected cards as part of poker hand","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"            JavatroCore.currentRound.playCards(userInput);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"            // Display played hand information","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"            PokerHand playedHand \u003d JavatroCore.currentRound.getPlayedHand();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"            String handName \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"                    String.format(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"                            \"Achieved: %s%s\u003c%s\u003e%s%s Hand\",","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                            BOLD, YELLOW, playedHand.getHandName(), END, BLACK_B);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"            List\u003cString\u003e cardArtLines \u003d getCardArtLines(JavatroCore.currentRound.getPlayedCards());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"            printBorderedContent(handName, cardArtLines);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"            // Update statistics for played hand type","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"            playedHand.incrementPlayed();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        } else if (UI.getCurrentScreen() instanceof DiscardCardScreen) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"            // Remove selected cards from play","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"            JavatroCore.currentRound.discardCards(userInput);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"            // Display discard confirmation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"            String handName \u003d String.format(\"%sCards Discarded%s%s\", BOLD, END, BLACK_B);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"            List\u003cString\u003e cardArtLines \u003d getCardArtLines(JavatroCore.currentRound.getPlayedCards());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"            printBorderedContent(handName, cardArtLines);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"        // Handle game progression based on round outcome","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"        if (JavatroCore.currentRound.isWon()","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 JavatroCore.getAnte().getAnteCount() \u003d\u003d 8","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"                \u0026\u0026 JavatroCore.getAnte().getBlind() \u003d\u003d Ante.Blind.BOSS_BLIND) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"            // Final victory condition: Defeated boss blind at maximum ante","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"            JavatroManager.setScreen(UI.getWinGameScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"        } else if (JavatroCore.currentRound.isLost()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"            // Game over condition: Failed current round","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"            JavatroManager.setScreen(UI.getLoseScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"        } else if (JavatroCore.currentRound.isWon()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"            // Round victory: Advance to next round","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"            JavatroManager.setScreen(UI.getWinRoundScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        } else {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"            // Continue current round","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"            JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":133}},{"path":"src/main/java/javatro/manager/options/DeckSelectOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" * Represents a menu option for selecting a specific deck type to start a new game. When executed,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" * initializes the game with the specified deck and transitions to the blind screen.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"public class DeckSelectOption implements Option {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    /** The descriptive text displayed for this option in the menu. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    private final String description;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    /** The type of deck associated with this option. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    private final Deck.DeckType deckType;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"     * Constructs a deck selection option with specified description and deck type.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * @param description User-visible description of the option","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * @param deckType The type of deck to initialize when selected","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws NullPointerException if description or deckType are null","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    public DeckSelectOption(String description, Deck.DeckType deckType) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        assert description !\u003d null : \"Description cannot be null\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        assert deckType !\u003d null : \"DeckType cannot be null\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        this.deckType \u003d deckType;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"     * @return The description text for this deck selection option","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        return description;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc} Initializes game with selected deck type and transitions to blind screen.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if game initialization fails","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        // Initialize core game deck","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        JavatroCore.deck \u003d new Deck(deckType);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        storage.setValue(storage.getRunChosen() - 1, Storage.DECK_INDEX, deckType.getName());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.beginGame(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"                (Storage.DeckFromKey(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"                        storage.getValue(storage.getRunChosen() - 1, Storage.DECK_INDEX))));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        assert JavatroCore.deck !\u003d null : \"Deck initialization failed\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        // Start game session with selected deck","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        // JavatroManager.beginGame(deckType);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        // Transition to blind screen display","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getBlindScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-30","isFullCredit":false}],"authorContributionMap":{"Markneoneo":70}},{"path":"src/main/java/javatro/manager/options/DeckViewOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * Represents a menu option to view the current deck composition. When executed, transitions the","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * display to the deck viewing screen.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class DeckViewOption implements Option {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @return The static description \"View Deck\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        return \"View Deck\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc} Transitions the display to show deck contents.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen transition fails","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        // Retrieve and validate deck view screen","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        Screen deckScreen \u003d UI.getDeckViewScreen();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        assert deckScreen !\u003d null : \"Deck view screen must be initialized\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        // Update display to deck view","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(deckScreen);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":39}},{"path":"src/main/java/javatro/manager/options/DiscardCardOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * Represents a command to discard selected cards during gameplay. When executed, transitions to the","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * card selection interface for discarding cards.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class DiscardCardOption implements Option {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @return The static description \"Discard Cards\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        return \"Discard Cards\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc} Transitions to the card discard selection screen.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen transition fails","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        // Retrieve and validate discard screen","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        Screen discardScreen \u003d UI.getDiscardScreen();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        assert discardScreen !\u003d null : \"Discard screen must be initialized\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        // Update display to discard interface","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(discardScreen);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":39}},{"path":"src/main/java/javatro/manager/options/ExitGameOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * Terminates the game application after displaying exit sequences. Shows farewell message and","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * performs clean shutdown.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class ExitGameOption implements Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @return Constant description \"Exit Game\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        return \"Exit Game\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc} Performs orderly application shutdown sequence.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if any display operation fails","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        // Display pre-stored ASCII art exit screen","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        UI.printANSI(\"end_screen.txt\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        // Format and display farewell message","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        final String header \u003d UI.BOLD + \"::: SEE YOU LATER! :::\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        final List\u003cString\u003e message \u003d List.of(UI.RED + \"WE KNOW YOU WILL BE BACK SOON ;)\" + UI.END);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"        UI.printBorderedContent(header, message);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        // Terminate JVM with normal status","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"        System.exit(0);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"Markneoneo":43}},{"path":"src/main/java/javatro/manager/options/HelpHowOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":" * The HelpHowOption class explains how to play javatro. This command is executed when the player","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":" * requests gameplay instructions.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"public class HelpHowOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"        return \"How To Play\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display instructions on how to play. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"        String title \u003d \"How To Play Javatro\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"            \"                          Welcome to the Javatro!                          \",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"            \"                   Here\u0027s how to play and navigate the game:                \",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"            \" 1. Start a new game run from the Main Menu by selecting [1]                    \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"            \" 2. Select the deck you desire from [1] to [4]                              \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"            \" 3. Choose your blind level by either accepting [1] or rejecting [2]        \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"            \" 4. Play cards [1] and form valid poker hands                               \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"            \" 5. Discard cards [2] you don\u0027t want to strategize your deck                \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"            \" 6. View deck [4] or poker hands [3] anytime                                \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"            \" 7. Follow menu navigation by entering the number for desired commands      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"            \" 8. Build your strategy and aim for the highest score!                      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"            \"                                                                            \",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"            \"                         Ante and Blind System:                             \",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"            \" - Each round starts with an ante and blind selection                       \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"            \" - The ante increases as you progress through rounds                        \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"            \" - Blinds rotate: Small Blind, Large Blind, and Boss Blind                  \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"            \" - Score requirements increase progressively                                \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"            \" - Only Boss Blind is compulsory; others are optional                       \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"            \" - Higher blinds mean higher risks and rewards!                             \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"            \"                                                                            \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"            \"              Have fun playing and may the best hand win!                   \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"swethacool"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"swethacool"},"content":"        UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"swethacool":57}},{"path":"src/main/java/javatro/manager/options/HelpIntroOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":" * The HelpIntroOption class provides an introduction to javatro. This command is executed when the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":" * player requests an introduction.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"public class HelpIntroOption implements Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"        return \"Game Introduction\";","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display the introduction message. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"        String title \u003d \"Welcome to Javatro\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"            \"Javatro is a text-based roguelike deck-building game inspired by Balatro.      \",","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"            \"Your goal is to strategically build a deck and progress through challenges.    \",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"            \"Each turn, you\u0027ll play poker-style hands to defeat enemies and earn new cards. \",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"            \"Think strategically, manage your deck wisely, and see how far you can go!      \"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"        UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"swethacool":42}},{"path":"src/main/java/javatro/manager/options/HelpMenuOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":" * The HelpMenuOption class handles displaying the help screen in javatro. This command is executed","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":" * when the player selects the help option.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"public class HelpMenuOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"        return \"Help Menu\";","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display the help screen. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"swethacool":29}},{"path":"src/main/java/javatro/manager/options/HelpRulesOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":" * The HelpRulesOption class provides the rules for playing javatro. This command is executed when","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":" * the player requests game rules.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"public class HelpRulesOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"        return \"Game Rules\";","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display the rules of the game. */","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"        String title \u003d \"Javatro Rules\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"            \"1. Start with a basic deck of cards.                                                  \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"                    + \"    \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"            \"2. Each turn, draw cards and form poker hands.                                        \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"                    + \"    \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"            \"3. Use your best hands to score points and progress through rounds.                   \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"                    + \"    \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"            \"4. Earn new cards after each round and upgrade your deck.                             \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"                    + \"    \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"            \"5. The run ends when you fail to meet the score threshold—try again with a new\"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"                    + \" strategy!  \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"            \"6. Each run introduces new challenges to test your poker skills.                      \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"                    + \"    \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"            \"\",","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"            \"Remember: Strategic hand selection and deck management are key to success!            \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"                    + \"    \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"        UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"swethacool":52}},{"path":"src/main/java/javatro/manager/options/HelpTipsOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"swethacool"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"swethacool"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"swethacool"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"swethacool"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"swethacool"},"content":"import java.util.List;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":" * The HelpTipsOption class provides gameplay tips for javatro. This command is executed when the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":" * player requests tips for improving their strategy.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"public class HelpTipsOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"     * Returns a description of this command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"        return \"Tips and Tricks\";","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-19","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    /** Executes the command to display gameplay tips. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"        String title \u003d \"Pro Tips For Javatro\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"        String[] lines \u003d {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"            \" - Focus on building a well-rounded deck with versatile poker hands.                  \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"                    + \"      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"            \" - The blind level you choose influences your gameplay.                               \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"                    + \"      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"            \" - Choose the deck that suits your play style as each deck provides unique advantages.\"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"                    + \"      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"            \" - Avoid overloading your deck—some cards can reduce your chances of strong\"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"                    + \" combinations.   \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"            \" - Don\u0027t rush through rounds. Think carefully about which cards to play or discard.   \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"                    + \"      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"            \" - Save powerful hands for high-stakes rounds or tougher challenges.                  \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"                    + \"      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"            \" - Adjust your strategy based on the poker hands you draw and your current blind.     \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"                    + \"      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"            \" - Try different combinations and playstyles to discover what works best for your\"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"                    + \" deck.     \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"            \" - Utilize Special Cards like Joker and Planet Cards wisely for extra benefits.       \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"                    + \"      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"            \"                                                                                      \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"                    + \"      \",","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"swethacool"},"content":"            \"                                  Good luck and have fun!                             \"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"swethacool"},"content":"                    + \"      \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"swethacool"},"content":"        };","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"swethacool"},"content":"        UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getHelpScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-19","isFullCredit":false}],"authorContributionMap":{"swethacool":59}},{"path":"src/main/java/javatro/manager/options/MainMenuOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"// @@author flyingapricot","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":" * The {@code MainMenuOption} class represents a command that loads the start screen, allowing","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":" * players to navigate to the main menu.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"public class MainMenuOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        return \"Main Menu\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /** Executes the command to change the screen to the start menu. */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getStartScreen());","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"flyingapricot":29}},{"path":"src/main/java/javatro/manager/options/NextRoundOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.manager.JavatroManager.jc;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"public class NextRoundOption implements Option {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":"        return \"Start Next Round\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"     * Executes the command to move on to the next round. The command will give the player a {@code","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     * PlanetCard} or a {@code Joker}, depending on the Blind won.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"        // Instantiate next round","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"        jc.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"        JavatroCore.currentRound.addPropertyChangeListener(javatro.display.UI.getGameScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"        JavatroCore.currentRound.updateRoundVariables();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"swethacool":21,"jwyk":9}},{"path":"src/main/java/javatro/manager/options/Option.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"// @@author flyingapricot","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"public interface Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"     * Retrieves a description of the command. This method has a default implementation returning an","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"     * empty string.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"     * @return A string representing the command description.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    default String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"        return \"\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     * Executes the command. Implementing classes must define specific behavior.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs during execution.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    void execute() throws JavatroException;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"     * Updates the description of the command. Default implementation does nothing.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     * @param description The new description to set.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    default void setDescription(String description) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"        throw new UnsupportedOperationException(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"                \"Description updates are not supported by this option.\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"flyingapricot":34}},{"path":"src/main/java/javatro/manager/options/PlayCardOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * Represents a command to play selected cards during gameplay. When executed, transitions to the","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * card selection interface for playing cards.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class PlayCardOption implements Option {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @return The static description \"Play Cards\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        return \"Play Cards\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc} Transitions to the card play selection screen.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen transition fails","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        // Retrieve and validate play screen","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        Screen playScreen \u003d UI.getPlayScreen();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        assert playScreen !\u003d null : \"Play screen must be initialized\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        // Update display to card play interface","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(playScreen);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"Markneoneo":39}},{"path":"src/main/java/javatro/manager/options/PokerHandOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * Represents a menu option to view current poker hand combinations. When executed, transitions the","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * display to the poker hand analysis screen.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class PokerHandOption implements Option {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * @return Constant description \"View Poker Hands\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        return \"View Poker Hands\";","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc} Transitions display to the poker hand analysis interface.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen transition fails","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        // Retrieve poker hand analysis screen from UI","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        final Screen pokerScreen \u003d UI.getPokerHandScreen();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        assert pokerScreen !\u003d null : \"Poker hand screen must be initialized\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        // Update display to show poker hand analysis","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(pokerScreen);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":39}},{"path":"src/main/java/javatro/manager/options/RejectBlindOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import javatro.core.Ante;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" * Represents an option to reject the current blind and move to the next available blind level.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":" * Implements the {@code Option} interface.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"public class RejectBlindOption implements Option {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"     * Returns the description of this option.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"     * @return A string representing the description of the option.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"        return \"Reject Blind\";","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"     * Executes the action of rejecting the current blind level. If the current blind is {@code","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"     * SMALL_BLIND}, it moves to {@code LARGE_BLIND}. If the current blind is {@code LARGE_BLIND},","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"     * it moves to {@code BOSS_BLIND}. If already at {@code BOSS_BLIND}, a warning message is","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"     * displayed, indicating that the player must play at this level.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"     * @throws JavatroException if an error occurs during execution.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"    @Override","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"        if (JavatroCore.getAnte().getBlind() \u003d\u003d Ante.Blind.SMALL_BLIND) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"            JavatroCore.getAnte().setBlind(Ante.Blind.LARGE_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"            JavatroManager.setScreen(UI.getBlindScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"        } else if (JavatroCore.getAnte().getBlind() \u003d\u003d Ante.Blind.LARGE_BLIND) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"            JavatroCore.getAnte().setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"            JavatroManager.setScreen(UI.getBlindScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"        } else {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"            String title \u003d \"⚠\\uFE0F \" + UI.BOLD + \"WARNING\" + \" ⚠\\uFE0F\" + UI.END;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"            String[] lines \u003d {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"                \"Oops! you have to play the BOSS blind to proceed, no skipping! :D\",","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"            };","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"            UI.printBorderedContent(title, List.of(lines));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"swethacool"},"content":"            JavatroManager.setScreen(UI.getBlindScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"swethacool":45,"jwyk":10}},{"path":"src/main/java/javatro/manager/options/ResumeGameOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"// @@author flyingapricot","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":" * The {@code ResumeGameOption} class represents a command that allows the player to return to the","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":" * main game screen after navigating away.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"public class ResumeGameOption implements Option {","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        return \"Return To Game\";","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"     * Executes the resume game command, updating the game screen to return the player to the main","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"     * game interface.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs during execution.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"flyingapricot":34}},{"path":"src/main/java/javatro/manager/options/ReturnOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * Enables navigation back to the previous screen in the view stack. Maintains screen history using","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" * a last-in-first-out navigation model.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class ReturnOption implements Option {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    /** Reference to the previously displayed screen. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"    private Screen prev_screen;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     * @return Constant description \"Return To Previous Screen\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        return \"Return To Previous Screen\";","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc} Restores the application display to the previous screen state.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if screen history is unavailable","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        // Retrieve previous screen from navigation history","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        prev_screen \u003d UI.getPreviousScreen();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        assert prev_screen !\u003d null : \"Screen history is empty\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"        // Restore previous display state","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(prev_screen);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-27","isFullCredit":false}],"authorContributionMap":{"Markneoneo":42}},{"path":"src/main/java/javatro/manager/options/RunSelectOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code MainMenuOption} class represents a command that loads the start screen, allowing","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":" * players to navigate to the main menu.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"/** A command that loads the run selection screen when executed. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class RunSelectOption implements Option {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    String description \u003d \"Start a Run\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        return description;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    /** Executes the command to change the screen to the start menu. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        UI.reloadRunSelectScreen();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"        UI.reloadJumpToRunScreen();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(UI.getRunSelectScreen()); // New Game","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":7,"flyingapricot":26}},{"path":"src/main/java/javatro/manager/options/SortByRankOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.CardSelectScreen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * Organizes card display using rank-based sorting (Ace high to Two low). Updates both the data","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * model and display when executed.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class SortByRankOption implements Option {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    /** The card selection screen to modify. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    private final CardSelectScreen screen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * Creates a rank sorting option for specified card screen.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     * @param screen Card display interface to modify","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     * @throws NullPointerException if screen is null","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    public SortByRankOption(CardSelectScreen screen) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        assert screen !\u003d null : \"Card screen must be initialized\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        this.screen \u003d screen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     * @return Constant description \"Sort cards by Rank\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        return \"Sort cards by Rank\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc} Applies rank-based sorting and refreshes display.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if display update fails","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        // Apply rank-based sorting to card collection","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        screen.updateHoldingHand(CardSelectScreen.SortOrder.BY_RANK);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        // Refresh display with new card order","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(screen);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-25","isFullCredit":false}],"authorContributionMap":{"Markneoneo":51}},{"path":"src/main/java/javatro/manager/options/SortBySuitOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import javatro.display.screens.CardSelectScreen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" * Organizes card display using suit-based sorting (Spades, Hearts, Clubs, Diamonds). Updates both","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * the data model and display when executed.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class SortBySuitOption implements Option {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"    /** The card selection screen to modify. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"    private final CardSelectScreen screen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"     * Creates a suit sorting option for specified card screen.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"     * @param screen Card display interface to modify","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"     * @throws NullPointerException if screen is null","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    public SortBySuitOption(CardSelectScreen screen) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"        assert screen !\u003d null : \"Card screen must be initialized\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"        this.screen \u003d screen;","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     * @return Constant description \"Sort cards by Suit\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"        return \"Sort cards by Suit\";","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"     * {@inheritDoc} Applies suit-based sorting and refreshes display.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if display update fails","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"    @Override","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"        // Apply suit-based sorting to card collection","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        screen.updateHoldingHand(CardSelectScreen.SortOrder.BY_SUIT);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"        // Refresh display with new card order","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"        JavatroManager.setScreen(screen);","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-25","isFullCredit":false}],"authorContributionMap":{"Markneoneo":51}},{"path":"src/main/java/javatro/manager/options/StartGameOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"// @@author flyingapricot","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":" * The {@code StartGameOption} class represents a command that initializes and starts a new game","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":" * session by setting the game screen.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"public class StartGameOption implements Option {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"    private String description \u003d \"Start New Game\"; // Default description","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        return description;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     * Updates the description of the command.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"     * @param description The new description to set.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"     * Executes the command to begin the game, restore available commands, and update the main","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"     * screen to display the game interface.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"     * @throws JavatroException If an error occurs while starting the game.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"        Storage.getStorageInstance().addNewRun();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getDeckSelectScreen());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"        /*","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"        // Return to game if there is an existing game.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"        if (JavatroCore.currentRound \u003d\u003d null || JavatroCore.currentRound.isLost()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"            if (JavatroCore.currentRound \u003d\u003d null) Storage.getStorageInstance().addNewRun();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"            JavatroCore.currentRound \u003d null;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"            JavatroManager.setScreen(UI.getDeckSelectScreen());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"        // Continue Game","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"        if (JavatroCore.currentRound !\u003d null) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"            JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"        */","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-03-04","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-03-04","isFullCredit":false}],"authorContributionMap":{"flyingapricot":62}},{"path":"src/main/java/javatro/manager/options/StartRunOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code MainMenuOption} class represents a command that loads the start screen, allowing","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":" * players to navigate to the main menu.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"/** A command that loads the run selection screen when executed. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"public class StartRunOption implements Option {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private int runNumber \u003d 1;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    private final Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"        runNumber \u003d UI.getRunSelectScreen().getRunNumber();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        return \"Continue Run #\" + runNumber;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    /** Executes the command to change the screen to the start menu. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        // Update Storage with chosen run number","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        storage.setRunChosen(runNumber);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JavatroManager.beginGame(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"                (Storage.DeckFromKey(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                        storage.getValue(storage.getRunChosen() - 1, Storage.DECK_INDEX))));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.jc.beginGame();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        JavatroCore.currentRound.addPropertyChangeListener(javatro.display.UI.getGameScreen());","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"        JavatroCore.currentRound.updateRoundVariables();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getGameScreen());","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-05","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"flyingapricot":38,"-":3}},{"path":"src/main/java/javatro/manager/options/ViewNextRunOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code MainMenuOption} class represents a command that loads the start screen, allowing","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":" * players to navigate to the main menu.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"/** A command that loads the run selection screen when executed. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class ViewNextRunOption implements Option {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        return \"View Next Run\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    /** Executes the command to change the screen to the start menu. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        int currentRun \u003d UI.getRunSelectScreen().getRunNumber();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        int totalRuns \u003d Storage.getStorageInstance().getNumberOfRuns();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"        int nextRun \u003d (currentRun % totalRuns) + 1;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        UI.getRunSelectScreen().setRunNumber(nextRun);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getRunSelectScreen());","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"flyingapricot":34}},{"path":"src/main/java/javatro/manager/options/ViewPrevRunOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code MainMenuOption} class represents a command that loads the start screen, allowing","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":" * players to navigate to the main menu.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"/** A command that loads the run selection screen when executed. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"public class ViewPrevRunOption implements Option {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"        return \"View Previous Run\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    /** Executes the command to change the screen to the start menu. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        int currentRun \u003d UI.getRunSelectScreen().getRunNumber();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        int totalRuns \u003d Storage.getStorageInstance().getNumberOfRuns();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"        int previousRun \u003d ((currentRun - 2 + totalRuns) % totalRuns) + 1;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        UI.getRunSelectScreen().setRunNumber(previousRun);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getRunSelectScreen());","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"flyingapricot":34}},{"path":"src/main/java/javatro/manager/options/ViewRunListOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code MainMenuOption} class represents a command that loads the start screen, allowing","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":" * players to navigate to the main menu.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"/** A command that loads the run selection screen when executed. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class ViewRunListOption implements Option {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"        return \"View List of Runs\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /** Executes the command to change the screen to the start menu. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getJumpToRunScreen());","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"flyingapricot":27}},{"path":"src/main/java/javatro/manager/options/ViewRunOption.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"/**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":" * The {@code MainMenuOption} class represents a command that loads the start screen, allowing","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":" * players to navigate to the main menu.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":" */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"package javatro.manager.options;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"/** A command that loads the run selection screen when executed. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"public class ViewRunOption implements Option {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    private int runNumber \u003d 0;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * Provides a brief description of the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     * @return A string describing the command.","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    public String getDescription() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"        return \"View Run #\" + runNumber;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    /** Executes the command to change the screen to the start menu. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    @Override","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    public void execute() throws JavatroException {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        UI.getRunSelectScreen().setRunNumber(runNumber);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.setScreen(UI.getRunSelectScreen());","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    public void setRunNumber(int runNumber) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        this.runNumber \u003d runNumber;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    public int getRunNumber() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        return runNumber;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"flyingapricot":38}},{"path":"src/main/java/javatro/manager/package-info.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":" * The {@code manager} package contains the core game management and command execution logic. It","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" * follows the Command design pattern to handle various user actions and game state changes.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eThis package is responsible for managing game flow, handling user commands, and coordinating","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":" * between the game model and the user interface.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":" * \u003ch2\u003eClasses in this package:\u003c/h2\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.Command} - Interface defining executable game commands.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.DiscardCardsCommand} - Command for discarding selected","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" *       cards.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.ExitGameCommand} - Command for terminating the game.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.JavatroManager} - Central controller managing game state and","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":" *       user input.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.LoadGameScreenCommand} - Command for starting the game and","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":" *       loading the game screen.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.LoadOptionsScreenCommand} - Command for displaying the","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":" *       options menu.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.LoadStartScreenCommand} - Command for displaying the main","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":" *       menu.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.MakeSelectionCommand} - Command for selecting cards to play","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":" *       or discard.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.PlayCardsCommand} - Command for playing selected cards.","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003e{@link javatro.Javatro.Manager.ResumeGameCommand} - Command for returning to the main game","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":" *       screen.","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"package javatro.manager;","lastModifiedDate":"2025-03-23","isFullCredit":false}],"authorContributionMap":{"Markneoneo":22,"-":8}},{"path":"src/main/java/javatro/storage/HashUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.storage;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import java.security.MessageDigest;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import java.security.NoSuchAlgorithmException;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"public class HashUtil {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"    public static String generateHash(List\u003cString\u003e runData) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"            StringBuilder dataString \u003d new StringBuilder();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"            for (int i \u003d 0; i \u003c runData.size(); i++) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"                String data \u003d runData.get(i).trim(); // Trim whitespace for consistency","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"                if (data.isEmpty() || data.equals(\"-\")) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"                    data \u003d \"NA\"; // Normalize empty entries to a consistent value","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"                dataString.append(data);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"                // Avoid adding a trailing comma at the end","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"                if (i \u003c runData.size() - 1) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"                    dataString.append(\",\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"            byte[] hash \u003d digest.digest(dataString.toString().getBytes(StandardCharsets.UTF_8));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"            StringBuilder hexString \u003d new StringBuilder();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"            for (byte b : hash) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"                String hex \u003d Integer.toHexString(0xff \u0026 b);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"                if (hex.length() \u003d\u003d 1) hexString.append(\u00270\u0027);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"                hexString.append(hex);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"            return hexString.toString();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"        } catch (NoSuchAlgorithmException e) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-06","isFullCredit":false}],"authorContributionMap":{"flyingapricot":43,"-":1}},{"path":"src/main/java/javatro/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.storage;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import static javatro.core.Ante.Blind.*;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import static javatro.display.DeckArt.ABANDONED_DECK;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import static javatro.display.DeckArt.BLUE_DECK;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import static javatro.display.DeckArt.CHECKERED_DECK;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import static javatro.display.DeckArt.RED_DECK;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.*;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.jokers.addchip.OddToddJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.jokers.addchip.ScaryFaceJoker;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.jokers.addmult.*;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.DeckArt;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"import java.io.IOException;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.Files;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.Path;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"import java.util.*;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"public class Storage {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"    /** Path to the task storage file. */","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    private static final String SAVEFILE_LOCATION \u003d \"./savefile.csv\";","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    private static final Path saveFilePath \u003d Paths.get(SAVEFILE_LOCATION);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    private static boolean saveFileValid \u003d true;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    private static int runChosen \u003d 0;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    public static boolean saveActive \u003d true;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    private static final int EXPECTED_COLUMNS \u003d 13;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    private static final Set\u003cString\u003e VALID_DECKS \u003d Set.of(\"RED\", \"ABANDONED\", \"CHECKERED\", \"BLUE\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Set\u003cString\u003e VALID_BLINDS \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"            Set.of(\"SMALL BLIND\", \"LARGE BLIND\", \"BOSS BLIND\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"    // Basic Info Indexes (Fixed Position)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"    public static final int RUN_NUMBER_INDEX \u003d 0;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"    public static final int ROUND_NUMBER_INDEX \u003d 1;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"    public static final int ROUND_SCORE_INDEX \u003d 2;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    public static final int HAND_INDEX \u003d 3;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"    public static final int DISCARD_INDEX \u003d 4;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    public static final int ANTE_NUMBER_INDEX \u003d 5;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    public static final int BLIND_INDEX \u003d 6;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"    public static final int WINS_INDEX \u003d 7;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"    public static final int LOSSES_INDEX \u003d 8;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"    public static final int DECK_INDEX \u003d 9;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"    // Dynamic Data Indexes (Varying Size)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"    public static final int HOLDING_HAND_START_INDEX \u003d 10; // Maximum 8 holding hands (10 to 17)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    public static final int JOKER_HAND_START_INDEX \u003d 18; // Maximum 5 Joker Hands (18 to 22)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    // Planet Card Level Indexes","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    public static final int HIGH_CARD_INDEX \u003d 23;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"    public static final int PAIR_INDEX \u003d 24;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"    public static final int TWO_PAIR_INDEX \u003d 25;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"    public static final int THREE_OF_A_KIND_INDEX \u003d 26;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"    public static final int STRAIGHT_INDEX \u003d 27;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"    public static final int FLUSH_INDEX \u003d 28;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"    public static final int FULL_HOUSE_INDEX \u003d 29;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"    public static final int FOUR_OF_A_KIND_INDEX \u003d 30;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"    public static final int STRAIGHT_FLUSH_INDEX \u003d 31;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"    public static final int ROYAL_FLUSH_INDEX \u003d 32;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"    public static final int FIVE_OF_A_KIND_INDEX \u003d 33;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"    public static final int FLUSH_HOUSE_INDEX \u003d 34;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"    public static final int FLUSH_FIVE_INDEX \u003d 35;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"    public static final int START_OF_REST_OF_DECK \u003d 36;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"    private static Storage storageInstance;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"    // Serialized Storage Information stored in a TreeMap","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"    private static TreeMap\u003cInteger, ArrayList\u003cString\u003e\u003e serializedRunData \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"    private String csvRawData; // Raw data from csv","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"    public static Boolean isNewDeck \u003d false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"    private Storage() throws JavatroException {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"        if (saveActive) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"            initaliseTaskFile();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"    public static Storage getStorageInstance() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"        if (storageInstance \u003d\u003d null) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"                return storageInstance \u003d new Storage();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"            } catch (JavatroException e) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"        return storageInstance;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"    private void createSaveFile() throws JavatroException {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"            // Create the file if it doesn\u0027t exist","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"            Files.createFile(saveFilePath);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"            saveFileValid \u003d false;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"            throw new JavatroException(","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"                    \"Save File could not be created, current session will not have saving\"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"                            + \" features.\");","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"    public boolean isCSVDataValid() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String[] rows \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"                csvRawData.split(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"                        \"\\\\r?\\\\n\"); // Split by newline, handling Windows and Unix line endings","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"        for (String row : rows) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"            row \u003d row.trim();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"            if (row.isEmpty()) continue; // Skip empty lines","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"            String[] columns \u003d row.split(\",\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"flyingapricot"},"content":"            // Get the stored hash (last column)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"            String storedHash \u003d columns[columns.length - 1];","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"            // Extract the actual game data","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"            List\u003cString\u003e rowData \u003d new ArrayList\u003c\u003e(Arrays.asList(columns));","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"            rowData.remove(rowData.size() - 1); // Remove the hash column before validation","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"            // Normalize the row data before hashing","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"            List\u003cString\u003e normalizedRowData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"            for (String data : rowData) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"                data \u003d data.trim();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"                if (data.equals(\"-\") || data.isEmpty()) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"                    data \u003d \"NA\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"                normalizedRowData.add(data);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"            // Generate a hash from the normalized data","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"            String computedHash \u003d HashUtil.generateHash(normalizedRowData);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"            // Compare hashes","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"            if (!computedHash.equals(storedHash)) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(\"Invalid row data detected due to hash mismatch: \" + row);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"                return false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"            // Additional validation (Existing Logic)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"flyingapricot"},"content":"            if (columns.length \u003c Storage.HIGH_CARD_INDEX + 13) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(\"Invalid number of columns in row: \" + row);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"                return false;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"flyingapricot"},"content":"            // Check if deck name is valid","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"flyingapricot"},"content":"            String deckName \u003d columns[DECK_INDEX].trim();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"flyingapricot"},"content":"            if (!VALID_DECKS.contains(deckName)) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(\"Invalid deck name in row: \" + row);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"flyingapricot"},"content":"                return false;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"flyingapricot"},"content":"            // Check if blind name is valid","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"flyingapricot"},"content":"            String blindName \u003d columns[BLIND_INDEX].trim();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"flyingapricot"},"content":"            if (!VALID_BLINDS.contains(blindName)) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(\"Invalid blind name in row: \" + row);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"flyingapricot"},"content":"                return false;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"flyingapricot"},"content":"            // Validate predefined numeric columns","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"flyingapricot"},"content":"                int[] numericIndexes \u003d {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"                    RUN_NUMBER_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"                    ROUND_NUMBER_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"                    ROUND_SCORE_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"                    HAND_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"                    DISCARD_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"                    WINS_INDEX,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"                    LOSSES_INDEX","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"flyingapricot"},"content":"                };","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"flyingapricot"},"content":"                for (int index : numericIndexes) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"flyingapricot"},"content":"                    Integer.parseInt(columns[index]);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"flyingapricot"},"content":"                // Validate Ante Number (must be between 1 and 8)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"flyingapricot"},"content":"                int anteNumber \u003d Integer.parseInt(columns[ANTE_NUMBER_INDEX]);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"flyingapricot"},"content":"                if (anteNumber \u003c 1 || anteNumber \u003e 8) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"                    System.out.println(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"                            \"Invalid Ante Number (must be between 1 and 8): \" + anteNumber);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"flyingapricot"},"content":"                    return false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"flyingapricot"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(\"Invalid numeric value in row: \" + row);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"flyingapricot"},"content":"                return false;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"flyingapricot"},"content":"            // Validate holding hands (Fixed 8 slots)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"flyingapricot"},"content":"            for (int i \u003d HOLDING_HAND_START_INDEX; i \u003c JOKER_HAND_START_INDEX; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"flyingapricot"},"content":"                String card \u003d columns[i].trim();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"flyingapricot"},"content":"                if (!card.equals(\"NA\") \u0026\u0026 !isValidCardString(card)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"flyingapricot"},"content":"                    System.out.println(\"Invalid holding card: \" + card);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"flyingapricot"},"content":"                    return false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"flyingapricot"},"content":"            // Validate joker hands (Fixed 5 slots)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"flyingapricot"},"content":"            for (int i \u003d JOKER_HAND_START_INDEX; i \u003c HIGH_CARD_INDEX; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"flyingapricot"},"content":"                String joker \u003d columns[i].trim();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"flyingapricot"},"content":"                if (!joker.equals(\"NA\") \u0026\u0026 !isValidJokerString(joker)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"flyingapricot"},"content":"                    System.out.println(\"Invalid joker card: \" + joker);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"flyingapricot"},"content":"                    return false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"flyingapricot"},"content":"            // Validate planet card levels (From PLANET_CARD_START_INDEX onwards)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"flyingapricot"},"content":"            for (int i \u003d HIGH_CARD_INDEX; i \u003c START_OF_REST_OF_DECK; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"flyingapricot"},"content":"                try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"flyingapricot"},"content":"                    int level \u003d Integer.parseInt(columns[i].trim());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"flyingapricot"},"content":"                    if (level \u003c 1) { // Assuming levels must be positive integers","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"-"},"content":"                        System.out.println(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"                                \"Invalid planet card level at index \" + i + \": \" + columns[i]);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"flyingapricot"},"content":"                        return false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"flyingapricot"},"content":"                    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"flyingapricot"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    System.out.println(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"                            \"Invalid planet card level at index \" + i + \": \" + columns[i]);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"flyingapricot"},"content":"                    return false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"flyingapricot"},"content":"            // Validate the rest of the deck","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"flyingapricot"},"content":"            for (int i \u003d START_OF_REST_OF_DECK; i \u003c START_OF_REST_OF_DECK + 44; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"flyingapricot"},"content":"                String card \u003d columns[i].trim();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"flyingapricot"},"content":"                if (!card.equals(\"NA\") \u0026\u0026 !isValidCardString(card)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"flyingapricot"},"content":"                    System.out.println(\"Invalid rest of the deck card: \" + card);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"flyingapricot"},"content":"                    return false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"flyingapricot"},"content":"        return true; // All rows are valid","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"flyingapricot"},"content":"    private void loadCSVData() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"flyingapricot"},"content":"        String[] runs \u003d csvRawData.split(\"\\\\r?\\\\n\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c runs.length; i++) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"flyingapricot"},"content":"            String[] runInfo \u003d runs[i].split(\",\");","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"flyingapricot"},"content":"            ArrayList\u003cString\u003e runInfoList \u003d new ArrayList\u003c\u003e(Arrays.asList(runInfo));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"flyingapricot"},"content":"            serializedRunData.put(i, runInfoList);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"flyingapricot"},"content":"    private byte[] convertSerializedDataIntoString() {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"flyingapricot"},"content":"        StringBuilder saveData \u003d new StringBuilder();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"flyingapricot"},"content":"        for (Integer key : serializedRunData.keySet()) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"flyingapricot"},"content":"            List\u003cString\u003e runInfo \u003d serializedRunData.get(key);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"flyingapricot"},"content":"            List\u003cString\u003e sanitizedRunInfo \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"flyingapricot"},"content":"            for (int i \u003d 0; i \u003c Storage.START_OF_REST_OF_DECK + 44; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"flyingapricot"},"content":"                String runAttribute \u003d runInfo.get(i).trim();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"flyingapricot"},"content":"                // Normalize empty or placeholder entries","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"flyingapricot"},"content":"                if (runAttribute.equals(\"-\") || runAttribute.isEmpty()) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"flyingapricot"},"content":"                    runAttribute \u003d \"NA\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"flyingapricot"},"content":"                sanitizedRunInfo.add(runAttribute);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"flyingapricot"},"content":"                saveData.append(runAttribute);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"flyingapricot"},"content":"                if (i \u003c Storage.START_OF_REST_OF_DECK + 44 - 1) { // Avoid trailing comma","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"flyingapricot"},"content":"                    saveData.append(\",\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"flyingapricot"},"content":"            // Generate a hash for the row using sanitizedRunInfo","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"flyingapricot"},"content":"            String hash \u003d HashUtil.generateHash(sanitizedRunInfo);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"flyingapricot"},"content":"            saveData.append(\",\").append(hash).append(\"\\n\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"flyingapricot"},"content":"        saveData.deleteCharAt(saveData.length() - 1); // Removing the last \\n","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"flyingapricot"},"content":"        return saveData.toString().getBytes();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"flyingapricot"},"content":"    public void updateSaveFile() throws JavatroException {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"            Files.write(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"-"},"content":"                    saveFilePath,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"-"},"content":"                    convertSerializedDataIntoString(),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"-"},"content":"                    StandardOpenOption.WRITE,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"-"},"content":"                    StandardOpenOption.TRUNCATE_EXISTING);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"flyingapricot"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"flyingapricot"},"content":"            throw new JavatroException(\"SAVING ISSUE: \" + e.getMessage());","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"flyingapricot"},"content":"    private void initaliseTaskFile() throws JavatroException {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"flyingapricot"},"content":"        // Check if the file exists","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"flyingapricot"},"content":"        if (Files.exists(saveFilePath)) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"flyingapricot"},"content":"            try {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"flyingapricot"},"content":"                // Read the data present in the saveFile.csv","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"flyingapricot"},"content":"                csvRawData \u003d String.join(\"\\n\", Files.readAllLines(saveFilePath));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"flyingapricot"},"content":"                if (csvRawData.trim().isEmpty()) { // Check for null or empty string","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"flyingapricot"},"content":"                    return;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"flyingapricot"},"content":"                // Do validation of the data to ensure that data is valid","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"flyingapricot"},"content":"                if (!isCSVDataValid()) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"flyingapricot"},"content":"                    // Delete invalid csv file and create new one","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"flyingapricot"},"content":"                    Files.deleteIfExists(saveFilePath);","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"flyingapricot"},"content":"                    throw new Exception(\"Save File Corrupted\");","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"flyingapricot"},"content":"                }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"flyingapricot"},"content":"                // Load the data into the treemap","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"flyingapricot"},"content":"                loadCSVData();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"flyingapricot"},"content":"            } catch (Exception e) {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"-"},"content":"                createSaveFile(); // Create a new save file since current save file is corrupted or","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"-"},"content":"                // could not be read","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"flyingapricot"},"content":"                System.out.println(\"Creating new save file..\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"flyingapricot"},"content":"        } else {","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"flyingapricot"},"content":"            createSaveFile();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"flyingapricot"},"content":"    public TreeMap\u003cInteger, List\u003cString\u003e\u003e getSerializedRunData() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"flyingapricot"},"content":"        TreeMap\u003cInteger, List\u003cString\u003e\u003e copy \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"flyingapricot"},"content":"        for (Map.Entry\u003cInteger, ArrayList\u003cString\u003e\u003e entry : serializedRunData.entrySet()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"flyingapricot"},"content":"            // Deep copy each list","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"flyingapricot"},"content":"            copy.put(entry.getKey(), new ArrayList\u003c\u003e(entry.getValue()));","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"flyingapricot"},"content":"        return copy;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"flyingapricot"},"content":"    public void setSerializedRunData(TreeMap\u003cInteger, ArrayList\u003cString\u003e\u003e serializedRunData) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"flyingapricot"},"content":"        Storage.serializedRunData \u003d serializedRunData;","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"flyingapricot"},"content":"    public void addNewRun() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"flyingapricot"},"content":"        // Initialize a new list with default values","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"flyingapricot"},"content":"        ArrayList\u003cString\u003e newRun \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"flyingapricot"},"content":"        isNewDeck \u003d true;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"flyingapricot"},"content":"        // Get the new run number","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"flyingapricot"},"content":"        int arrSize \u003d serializedRunData.isEmpty() ? 0 : serializedRunData.size();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"flyingapricot"},"content":"        // Adding default values as specified","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(String.valueOf(arrSize)); // RUN_NUMBER","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(\"1\"); // ROUND_NUMBER","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(\"0\"); // ROUND_SCORE","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(\"4\"); // HAND","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(\"3\"); // DISCARD","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(\"1\"); // ANTE_NUMBER","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(\"SMALL BLIND\"); // BLIND","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(\"0\"); // WINS","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(\"0\"); // LOSSES","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"flyingapricot"},"content":"        newRun.add(\"\"); // DECK","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"flyingapricot"},"content":"        // Add holding hands (8 slots) with \"-\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"flyingapricot"},"content":"            newRun.add(\"-\"); // Adding \"-\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"flyingapricot"},"content":"        // Add jokers (5 slots) with \"-\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"flyingapricot"},"content":"            newRun.add(\"-\"); // Adding \"-\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"flyingapricot"},"content":"        // Add planet card levels (13 slots) with \"1\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c 13; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"flyingapricot"},"content":"            newRun.add(\"1\"); // Adding \"1\" for each planet card level","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"flyingapricot"},"content":"        // Add the rest of the deck cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c 44; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"flyingapricot"},"content":"            newRun.add(\"-\"); // Adding \"-\" for rest of the deck cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"flyingapricot"},"content":"        // Add the run to the serializedRunData map using the next run number as the key","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"flyingapricot"},"content":"        serializedRunData.put(arrSize, newRun);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"flyingapricot"},"content":"        // Set run chosen to new run","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"flyingapricot"},"content":"        runChosen \u003d serializedRunData.size();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"-"},"content":"    public int getNumberOfRuns() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"-"},"content":"        return serializedRunData.size();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-04","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"flyingapricot"},"content":"    public String getValue(int runNumber, int idx) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"flyingapricot"},"content":"        return serializedRunData.get(runNumber).get(idx);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"flyingapricot"},"content":"    public void setValue(int runNumber, int idx, String value) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"flyingapricot"},"content":"        serializedRunData.get(runNumber).set(idx, value);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"flyingapricot"},"content":"    public int getRunChosen() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"flyingapricot"},"content":"        return runChosen;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"flyingapricot"},"content":"    public void setRunChosen(int runChosen) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"flyingapricot"},"content":"        Storage.runChosen \u003d runChosen;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"flyingapricot"},"content":"    public static DeckArt fromStorageKey(String key) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"flyingapricot"},"content":"        return switch (key.toUpperCase()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"flyingapricot"},"content":"            case \"RED\" -\u003e RED_DECK;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"flyingapricot"},"content":"            case \"BLUE\" -\u003e BLUE_DECK;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"flyingapricot"},"content":"            case \"CHECKERED\" -\u003e CHECKERED_DECK;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"flyingapricot"},"content":"            case \"ABANDONED\" -\u003e ABANDONED_DECK;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"flyingapricot"},"content":"            default -\u003e throw new IllegalArgumentException(\"Unknown deck art: \" + key);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"flyingapricot"},"content":"        };","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"flyingapricot"},"content":"    public static Deck.DeckType DeckFromKey(String key) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"flyingapricot"},"content":"        return switch (key.toUpperCase()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"flyingapricot"},"content":"            case \"RED\" -\u003e Deck.DeckType.RED;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"flyingapricot"},"content":"            case \"BLUE\" -\u003e Deck.DeckType.BLUE;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"flyingapricot"},"content":"            case \"CHECKERED\" -\u003e Deck.DeckType.CHECKERED;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"flyingapricot"},"content":"            case \"ABANDONED\" -\u003e Deck.DeckType.ABANDONED;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"flyingapricot"},"content":"            default -\u003e throw new IllegalArgumentException(\"Unknown deck type: \" + key);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"flyingapricot"},"content":"        };","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"flyingapricot"},"content":"    public static Ante.Blind BlindFromKey(String key) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"flyingapricot"},"content":"        return switch (key.toUpperCase()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"flyingapricot"},"content":"            case \"SMALL BLIND\" -\u003e SMALL_BLIND;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"flyingapricot"},"content":"            case \"LARGE BLIND\" -\u003e LARGE_BLIND;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"flyingapricot"},"content":"            case \"BOSS BLIND\" -\u003e BOSS_BLIND;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"flyingapricot"},"content":"            default -\u003e throw new IllegalArgumentException(\"Unknown blind type: \" + key);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"flyingapricot"},"content":"        };","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"flyingapricot"},"content":"    public static Card parseCardString(String cardString) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"flyingapricot"},"content":"        // Ensure the string is not null or empty","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"flyingapricot"},"content":"        if (cardString \u003d\u003d null || cardString.length() \u003c 2) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"flyingapricot"},"content":"            throw new IllegalArgumentException(\"Invalid card string\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"flyingapricot"},"content":"        // Extract the rank and suit from the string","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"flyingapricot"},"content":"        String rankStr \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"flyingapricot"},"content":"                cardString.substring(0, cardString.length() - 1); // All but the last character","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"flyingapricot"},"content":"        char suitChar \u003d cardString.charAt(cardString.length() - 1); // Last character","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"flyingapricot"},"content":"        // Parse the rank","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"flyingapricot"},"content":"        Card.Rank rank \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"flyingapricot"},"content":"                switch (rankStr) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"flyingapricot"},"content":"                    case \"2\" -\u003e Card.Rank.TWO;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"flyingapricot"},"content":"                    case \"3\" -\u003e Card.Rank.THREE;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"flyingapricot"},"content":"                    case \"4\" -\u003e Card.Rank.FOUR;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"flyingapricot"},"content":"                    case \"5\" -\u003e Card.Rank.FIVE;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"flyingapricot"},"content":"                    case \"6\" -\u003e Card.Rank.SIX;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"flyingapricot"},"content":"                    case \"7\" -\u003e Card.Rank.SEVEN;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"flyingapricot"},"content":"                    case \"8\" -\u003e Card.Rank.EIGHT;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"flyingapricot"},"content":"                    case \"9\" -\u003e Card.Rank.NINE;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"flyingapricot"},"content":"                    case \"10\" -\u003e Card.Rank.TEN;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"flyingapricot"},"content":"                    case \"J\" -\u003e Card.Rank.JACK;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"flyingapricot"},"content":"                    case \"Q\" -\u003e Card.Rank.QUEEN;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"flyingapricot"},"content":"                    case \"K\" -\u003e Card.Rank.KING;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"flyingapricot"},"content":"                    case \"A\" -\u003e Card.Rank.ACE;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"flyingapricot"},"content":"                    default -\u003e throw new IllegalArgumentException(\"Invalid rank: \" + rankStr);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"flyingapricot"},"content":"                };","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"flyingapricot"},"content":"        // Parse the suit","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"flyingapricot"},"content":"        Card.Suit suit \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"flyingapricot"},"content":"                switch (Character.toUpperCase(suitChar)) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"flyingapricot"},"content":"                    case \u0027H\u0027 -\u003e Card.Suit.HEARTS;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"flyingapricot"},"content":"                    case \u0027C\u0027 -\u003e Card.Suit.CLUBS;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"flyingapricot"},"content":"                    case \u0027S\u0027 -\u003e Card.Suit.SPADES;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"flyingapricot"},"content":"                    case \u0027D\u0027 -\u003e Card.Suit.DIAMONDS;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"flyingapricot"},"content":"                    default -\u003e throw new IllegalArgumentException(\"Invalid suit: \" + suitChar);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"flyingapricot"},"content":"                };","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"flyingapricot"},"content":"        // Return the constructed Card","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"flyingapricot"},"content":"        return new Card(rank, suit);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"flyingapricot"},"content":"    public static String cardToString(Card card) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"flyingapricot"},"content":"        // Get the rank and suit from the card","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"flyingapricot"},"content":"        String rankStr \u003d card.rank().getSymbol(); // Get the symbol (e.g., \"A\", \"K\", \"10\")","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"flyingapricot"},"content":"        String suitStr \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"flyingapricot"},"content":"                switch (card.suit()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"flyingapricot"},"content":"                    case HEARTS -\u003e \"H\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"flyingapricot"},"content":"                    case CLUBS -\u003e \"C\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"flyingapricot"},"content":"                    case SPADES -\u003e \"S\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"flyingapricot"},"content":"                    case DIAMONDS -\u003e \"D\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"flyingapricot"},"content":"                };","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"flyingapricot"},"content":"        // Combine rank and suit to form the card string","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"flyingapricot"},"content":"        return rankStr + suitStr;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"flyingapricot"},"content":"    public static boolean isValidCardString(String cardString) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"flyingapricot"},"content":"        if (cardString \u003d\u003d null || cardString.length() \u003c 2) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"flyingapricot"},"content":"            return false; // Null or too short to be a valid card","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"flyingapricot"},"content":"        // Extract the rank and suit from the string","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":502,"author":{"gitId":"-"},"content":"        String rankStr \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":503,"author":{"gitId":"-"},"content":"                cardString.substring(0, cardString.length() - 1); // All but the last character","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":504,"author":{"gitId":"flyingapricot"},"content":"        char suitChar \u003d cardString.charAt(cardString.length() - 1); // Last character","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":505,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":506,"author":{"gitId":"flyingapricot"},"content":"        // Check if the rank is valid","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":507,"author":{"gitId":"-"},"content":"        boolean isValidRank \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":508,"author":{"gitId":"-"},"content":"                switch (rankStr) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":509,"author":{"gitId":"flyingapricot"},"content":"                    case \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\" -\u003e true;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":510,"author":{"gitId":"flyingapricot"},"content":"                    default -\u003e false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":511,"author":{"gitId":"flyingapricot"},"content":"                };","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":512,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":513,"author":{"gitId":"flyingapricot"},"content":"        // Check if the suit is valid","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":514,"author":{"gitId":"-"},"content":"        boolean isValidSuit \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":515,"author":{"gitId":"-"},"content":"                switch (Character.toUpperCase(suitChar)) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":516,"author":{"gitId":"flyingapricot"},"content":"                    case \u0027H\u0027, \u0027C\u0027, \u0027S\u0027, \u0027D\u0027 -\u003e true;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":517,"author":{"gitId":"flyingapricot"},"content":"                    default -\u003e false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":518,"author":{"gitId":"flyingapricot"},"content":"                };","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":519,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":520,"author":{"gitId":"flyingapricot"},"content":"        // Return true only if both rank and suit are valid","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":521,"author":{"gitId":"flyingapricot"},"content":"        return isValidRank \u0026\u0026 isValidSuit;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":522,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":523,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":524,"author":{"gitId":"flyingapricot"},"content":"    public static Joker parseJokerString(String jokerName) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":525,"author":{"gitId":"flyingapricot"},"content":"        return switch (jokerName.toUpperCase()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":526,"author":{"gitId":"flyingapricot"},"content":"            case \"ODDTODDJOKER\" -\u003e new OddToddJoker();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":527,"author":{"gitId":"flyingapricot"},"content":"            case \"SCARYFACEJOKER\" -\u003e new ScaryFaceJoker();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":528,"author":{"gitId":"flyingapricot"},"content":"            case \"ABSTRACTJOKER\" -\u003e new AbstractJoker();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":529,"author":{"gitId":"flyingapricot"},"content":"            case \"GLUTTONOUSJOKER\" -\u003e new GluttonousJoker();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":530,"author":{"gitId":"flyingapricot"},"content":"            case \"GREEDYJOKER\" -\u003e new GreedyJoker();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":531,"author":{"gitId":"flyingapricot"},"content":"            case \"HALFJOKER\" -\u003e new HalfJoker();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":532,"author":{"gitId":"flyingapricot"},"content":"            case \"LUSTYJOKER\" -\u003e new LustyJoker();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":533,"author":{"gitId":"flyingapricot"},"content":"            case \"WRATHFULJOKER\" -\u003e new WrathfulJoker();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":534,"author":{"gitId":"flyingapricot"},"content":"            default -\u003e throw new IllegalArgumentException(\"Invalid Joker name: \" + jokerName);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":535,"author":{"gitId":"flyingapricot"},"content":"        };","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":536,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":537,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":538,"author":{"gitId":"flyingapricot"},"content":"    public static String jokerToString(Joker joker) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":539,"author":{"gitId":"flyingapricot"},"content":"        if (joker \u003d\u003d null) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":540,"author":{"gitId":"flyingapricot"},"content":"            throw new IllegalArgumentException(\"Joker cannot be null\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":541,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":542,"author":{"gitId":"flyingapricot"},"content":"        return joker.getIdentifierName(); // Returns the class name of the Joker","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":543,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":544,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":545,"author":{"gitId":"flyingapricot"},"content":"    public static boolean isValidJokerString(String jokerName) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":546,"author":{"gitId":"flyingapricot"},"content":"        if (jokerName \u003d\u003d null || jokerName.trim().isEmpty()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":547,"author":{"gitId":"flyingapricot"},"content":"            return false; // Null or empty string is not valid","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":548,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":549,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":550,"author":{"gitId":"flyingapricot"},"content":"        return switch (jokerName.toUpperCase()) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":551,"author":{"gitId":"-"},"content":"            case \"ODDTODDJOKER\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":552,"author":{"gitId":"-"},"content":"                    \"SCARYFACEJOKER\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":553,"author":{"gitId":"-"},"content":"                    \"ABSTRACTJOKER\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":554,"author":{"gitId":"-"},"content":"                    \"GLUTTONOUSJOKER\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":555,"author":{"gitId":"-"},"content":"                    \"GREEDYJOKER\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":556,"author":{"gitId":"-"},"content":"                    \"HALFJOKER\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":557,"author":{"gitId":"-"},"content":"                    \"LUSTYJOKER\",","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":558,"author":{"gitId":"-"},"content":"                    \"WRATHFULJOKER\" -\u003e true;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":559,"author":{"gitId":"flyingapricot"},"content":"            default -\u003e false;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":560,"author":{"gitId":"flyingapricot"},"content":"        };","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":561,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":562,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":563,"author":{"gitId":"flyingapricot"},"content":"    public void resetStorage() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":564,"author":{"gitId":"flyingapricot"},"content":"        storageInstance \u003d null;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":565,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":566,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-04","isFullCredit":false}],"authorContributionMap":{"flyingapricot":522,"-":44}},{"path":"src/main/java/javatro/utilities/csvutils/CSVUtils.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.utilities.csvutils;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import java.io.IOException;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.Files;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.Path;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"public class CSVUtils {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"     * Clears the content of a CSV file by overwriting it with an empty string.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"     * @param filePath The path to the CSV file to be cleared.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    public static void clearCSVFile(String filePath) throws IOException {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"        Path saveFilePath \u003d Paths.get(filePath);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"        Files.deleteIfExists(saveFilePath);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"        Files.createFile(saveFilePath);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"     * Writes a sample string to a CSV file.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"     * @param filePath The path to the CSV file to write to.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"     * @param sampleString The sample string to write to the CSV file.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    public static void writeSampleToCSV(String filePath, String sampleString) throws IOException {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"        Path saveFilePath \u003d Paths.get(filePath);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        Files.write(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"                saveFilePath,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"                sampleString.getBytes(),","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"                StandardOpenOption.WRITE,","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"                StandardOpenOption.TRUNCATE_EXISTING);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"flyingapricot":38}},{"path":"src/main/java/javatro/utilities/outpututils/OutputUtils.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.utilities.outpututils;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.io.PrintStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"public class OutputUtils {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"     * Pipes the output of the current screen to a file.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"     * @param fileName The name of the file to write to (e.g., \"StartScreen.txt\").","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"     * @param renderable The renderable screen object that has a render() method.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    public static void pipeOutputToFile(String fileName, Screen renderable) throws IOException {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        // Prepare to capture the output","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        PrintStream originalOut \u003d System.out;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager javatroManager;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        UI javatroView \u003d new UI();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        JavatroCore javatroCore \u003d new JavatroCore();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"            javatroManager \u003d new JavatroManager(javatroView, javatroCore);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"            // Render the screen","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"            JavatroManager.runningTests \u003d true;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"            JavatroManager.setScreen(renderable);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"        // Save the captured output to a file","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        try (FileOutputStream fos \u003d","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"                new FileOutputStream(\"src/test/resources/screens/\" + fileName)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"            fos.write(outContent.toString().getBytes());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"        } finally {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"            // Reset the standard output","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"            System.setOut(originalOut);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"flyingapricot":46,"-":7}},{"path":"src/test/java/javatro/audioplayer/AudioPlayerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.audioplayer;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import java.io.PrintStream;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"public class AudioPlayerTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    private static final String VALID_AUDIO_PATH \u003d \"audioplayer/balatro_theme.wav\";","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"    private static final String INVALID_AUDIO_PATH \u003d \"audioplayer/invalid_audio.wav\";","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private AudioPlayer audioPlayer;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    private final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"        audioPlayer \u003d AudioPlayer.getInstance();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"        AudioPlayer.getInstance().stopAudio(); // Ensure audio is not playing before each test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"        // Redirect System.err to capture error messages","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    @AfterEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    public void tearDown() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"        AudioPlayer.getInstance().stopAudio(); // Ensure audio is stopped after each test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        System.setErr(originalErr); // Reset System.err","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    public void testPlayValidAudio() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertDoesNotThrow(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"                () -\u003e AudioPlayer.getInstance().playAudio(VALID_AUDIO_PATH),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"                \"Audio should play successfully if the file exists.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"    public void testStopAudio() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertDoesNotThrow(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"                () -\u003e AudioPlayer.getInstance().stopAudio(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"                \"Audio stopping should not cause any exceptions.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"    public void testPlayAndStopAudio() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertDoesNotThrow(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                () -\u003e {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"                    AudioPlayer.getInstance().playAudio(VALID_AUDIO_PATH);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"                    AudioPlayer.getInstance().stopAudio();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"                },","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"                \"Playing and stopping audio should work without exceptions.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":48,"-":10}},{"path":"src/test/java/javatro/core/AnteTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import java.util.Random;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"swethacool"},"content":"// @@author swethacool","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"swethacool"},"content":"/**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"swethacool"},"content":" * Test class for the {@link Ante} class. This class tests the functionality of the Ante class,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"swethacool"},"content":" * including the initialization of values, progression between rounds, blind multipliers, and score","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"swethacool"},"content":" * calculations.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"swethacool"},"content":" */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"swethacool"},"content":"public class AnteTest {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"swethacool"},"content":"    private Ante ante;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"swethacool"},"content":"    private Random random;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"swethacool"},"content":"    /** Initializes a new Ante object before each test. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"swethacool"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"swethacool"},"content":"    void setUp() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"swethacool"},"content":"        ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"swethacool"},"content":"        random \u003d new Random();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"swethacool"},"content":"     * Tests the initial values of the Ante object. Ensures the Ante count starts at 1, the blind is","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"swethacool"},"content":"     * set to SMALL_BLIND, and the round score is set to 300.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"swethacool"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"swethacool"},"content":"    void testInitialValues() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"swethacool"},"content":"        assertEquals(1, ante.getAnteCount(), \"Ante count should start at 1\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"swethacool"},"content":"        assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"swethacool"},"content":"                Ante.Blind.SMALL_BLIND, ante.getBlind(), \"Initial blind should be SMALL_BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"swethacool"},"content":"        assertEquals(300, ante.getRoundScore(), \"Initial round score should be 300\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"swethacool"},"content":"     * Tests the multipliers for different blinds. Verifies that each blind (SMALL_BLIND,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"swethacool"},"content":"     * LARGE_BLIND, BOSS_BLIND) has the expected multiplier.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"swethacool"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"swethacool"},"content":"    void testBlindMultiplier() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"swethacool"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"swethacool"},"content":"        assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"swethacool"},"content":"                1.0,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"swethacool"},"content":"                ante.getBlind().getMultiplier(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"swethacool"},"content":"                \"SMALL_BLIND should have a multiplier of 1.0\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"swethacool"},"content":"        ante.setBlind(Ante.Blind.LARGE_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"swethacool"},"content":"        assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"swethacool"},"content":"                1.5,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"swethacool"},"content":"                ante.getBlind().getMultiplier(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"swethacool"},"content":"                \"LARGE_BLIND should have a multiplier of 1.5\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"swethacool"},"content":"        ante.setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"swethacool"},"content":"        assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"swethacool"},"content":"                2.0, ante.getBlind().getMultiplier(), \"BOSS_BLIND should have a multiplier of 2.0\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"swethacool"},"content":"     * Tests the progression of the blind and ante count across rounds. Verifies that after each","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"swethacool"},"content":"     * round, the blind changes in the expected order, and the ante count increments correctly,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"swethacool"},"content":"     * resetting after reaching a cap.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"swethacool"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"swethacool"},"content":"    void testNextRoundProgression() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"swethacool"},"content":"        ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"swethacool"},"content":"        assertEquals(Ante.Blind.LARGE_BLIND, ante.getBlind(), \"Blind should change to LARGE_BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"swethacool"},"content":"        ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"swethacool"},"content":"        assertEquals(Ante.Blind.BOSS_BLIND, ante.getBlind(), \"Blind should change to BOSS_BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"swethacool"},"content":"        ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"swethacool"},"content":"        assertEquals(2, ante.getAnteCount(), \"Ante count should increment\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"swethacool"},"content":"        assertEquals(Ante.Blind.SMALL_BLIND, ante.getBlind(), \"Blind should reset to SMALL_BLIND\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"swethacool"},"content":"     * Tests the calculation of the round score based on the current blind. Verifies that the score","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"swethacool"},"content":"     * is calculated correctly for each blind.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"swethacool"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"swethacool"},"content":"    void testRoundScoreCalculation() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"swethacool"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"swethacool"},"content":"        assertEquals(300, ante.getRoundScore(), \"Score for SMALL_BLIND should be correct\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"swethacool"},"content":"        ante.setBlind(Ante.Blind.LARGE_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"swethacool"},"content":"        assertEquals(450, ante.getRoundScore(), \"Score for LARGE_BLIND should be correct\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"swethacool"},"content":"        ante.setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"swethacool"},"content":"        assertEquals(600, ante.getRoundScore(), \"Score for BOSS_BLIND should be correct\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"swethacool"},"content":"     * Tests the maximum ante count cap. Ensures that the ante count does not exceed 8 after several","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"swethacool"},"content":"     * rounds.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"swethacool"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"swethacool"},"content":"    void testMaxAnteCap() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"swethacool"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"swethacool"},"content":"            ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"swethacool"},"content":"            ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"swethacool"},"content":"            ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"swethacool"},"content":"        assertEquals(8, ante.getAnteCount(), \"Ante count should not exceed 8\");","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"swethacool"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"swethacool"},"content":"     * Tests random blinds and their respective scores. Verifies that for each randomly selected","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"swethacool"},"content":"     * blind and ante count, the score matches the expected value based on the blind\u0027s multiplier.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"swethacool"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"swethacool"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"swethacool"},"content":"    void testRandomBlindsAndScores() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"swethacool"},"content":"        // Test for 10 random iterations","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"swethacool"},"content":"        for (int i \u003d 0; i \u003c 10; i++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"swethacool"},"content":"            // Randomly select ante count (from 1 to 8)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"swethacool"},"content":"            int randomAnteCount \u003d random.nextInt(8) + 1;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"swethacool"},"content":"            // Move to the selected ante count using nextRound","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"swethacool"},"content":"            for (int j \u003d 1; j \u003c randomAnteCount; j++) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"swethacool"},"content":"                ante.nextRound();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"swethacool"},"content":"            }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"swethacool"},"content":"            // Randomly select a blind","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"swethacool"},"content":"            int blindIndex \u003d random.nextInt(Ante.Blind.values().length);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"swethacool"},"content":"            Ante.Blind randomBlind \u003d Ante.Blind.values()[blindIndex];","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"swethacool"},"content":"            ante.setBlind(randomBlind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"swethacool"},"content":"            // Get expected score","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"swethacool"},"content":"            int expectedScore \u003d (int) (ante.getAnteScore() * randomBlind.getMultiplier());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"swethacool"},"content":"            // Assert the score is correct","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"swethacool"},"content":"            assertEquals(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"swethacool"},"content":"                    expectedScore,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"swethacool"},"content":"                    ante.getRoundScore(),","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"swethacool"},"content":"                    \"Random score calculation failed for Ante \"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"swethacool"},"content":"                            + randomAnteCount","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"swethacool"},"content":"                            + \" and Blind \"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"swethacool"},"content":"                            + randomBlind.getName());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"swethacool"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"swethacool"},"content":"            // Reset the ante for the next iteration","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"swethacool"},"content":"            ante.resetAnte();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"swethacool"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"swethacool"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"swethacool"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"swethacool":137,"-":3,"jwyk":6}},{"path":"src/test/java/javatro/core/CardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.EIGHT;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FIVE;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.SEVEN;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.SIX;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.DisplayName;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" * Comprehensive test suite for the {@link Card} class and its associated enums. Verifies core","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":" * functionality, edge cases, and expected behaviors without using parameterized tests.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eTest coverage includes:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":" * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eAll 52 card combinations (13 ranks × 4 suits)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eChip value calculations for all ranks","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eString representation formatting","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eEquality and hash code contracts","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eEnum completeness and values","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":" *   \u003cli\u003eRecord component integrity","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":" * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"class CardTest {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"     * Tests creation of all possible card combinations. Iterates through every rank and suit","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"     * combination to verify:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eSuccessful card instantiation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eCorrect rank component storage","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eCorrect suit component storage","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    @DisplayName(\"Test all card combinations\")","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    void testAllCardCombinations() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        // Nested loops test all 13 ranks × 4 suits \u003d 52 combinations","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        for (Card.Rank rank : Card.Rank.values()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"            for (Card.Suit suit : Card.Suit.values()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"                Card card \u003d new Card(rank, suit);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"                assertNotNull(card, \"Card should not be null\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"                assertEquals(rank, card.rank(), \"Rank should match constructor argument\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"                assertEquals(suit, card.suit(), \"Suit should match constructor argument\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"     * Verifies chip values for all card ranks. Tests both numerical ranks and special values for","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"     * face cards:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eNumerical ranks (2-10) have matching chip values","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eFace cards (JACK, QUEEN, KING) have 10 chips","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eACE has special value of 11 chips","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"    @DisplayName(\"Test rank chip values\")","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"    void testRankChipValues() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        // Test numerical ranks","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(2, TWO.getChips(), \"TWO should have 2 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(3, THREE.getChips(), \"THREE should have 3 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(4, FOUR.getChips(), \"FOUR should have 4 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(5, FIVE.getChips(), \"FIVE should have 5 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(6, SIX.getChips(), \"SIX should have 6 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(7, SEVEN.getChips(), \"SEVEN should have 7 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(8, EIGHT.getChips(), \"EIGHT should have 8 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(9, NINE.getChips(), \"NINE should have 9 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(10, TEN.getChips(), \"TEN should have 10 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"        // Test face cards","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(10, JACK.getChips(), \"JACK should have 10 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(10, QUEEN.getChips(), \"QUEEN should have 10 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(10, KING.getChips(), \"KING should have 10 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        // Test special case","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(11, ACE.getChips(), \"ACE should have 11 chips\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"     * Validates symbol representations for all card ranks. Ensures proper symbols for both","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"     * numerical and face cards:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eNumerical ranks show their number","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eFace cards use single-letter abbreviations","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eACE uses \u0027A\u0027 symbol","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"    @DisplayName(\"Test rank symbols\")","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"    void testRankSymbols() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"        // Verify numerical symbols","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"2\", TWO.getSymbol(), \"TWO symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"3\", THREE.getSymbol(), \"THREE symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"4\", FOUR.getSymbol(), \"FOUR symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"5\", FIVE.getSymbol(), \"FIVE symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"6\", SIX.getSymbol(), \"SIX symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"7\", SEVEN.getSymbol(), \"SEVEN symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"8\", EIGHT.getSymbol(), \"EIGHT symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"9\", NINE.getSymbol(), \"NINE symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"10\", TEN.getSymbol(), \"TEN symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"        // Verify face card symbols","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"J\", JACK.getSymbol(), \"JACK symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Q\", QUEEN.getSymbol(), \"QUEEN symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"K\", KING.getSymbol(), \"KING symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"A\", ACE.getSymbol(), \"ACE symbol mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"     * Tests formal names for all suit enums. Verifies proper capitalization and spelling:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eFirst letter capitalized","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eSubsequent letters lowercase","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eFull English names","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"    @DisplayName(\"Test suit names\")","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"    void testSuitNames() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Hearts\", HEARTS.getName(), \"HEARTS name mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Clubs\", CLUBS.getName(), \"CLUBS name mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Spades\", SPADES.getName(), \"SPADES name mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Diamonds\", DIAMONDS.getName(), \"DIAMONDS name mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"     * Verifies the string representation format. Tests the pattern: \"[Rank Symbol] of [Suit Name]\".","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"     * Samples include:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eNumerical card with simple suit","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eFace card with different suit","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eSpecial case (ACE)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"    @DisplayName(\"Test string representation\")","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"    void testToString() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"                \"2 of Hearts\", new Card(TWO, HEARTS).toString(), \"TWO of HEARTS string mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"                \"A of Spades\", new Card(ACE, SPADES).toString(), \"ACE of SPADES string mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"                \"J of Diamonds\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"                new Card(JACK, DIAMONDS).toString(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"                \"JACK of DIAMONDS string mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"                \"Q of Clubs\", new Card(QUEEN, CLUBS).toString(), \"QUEEN of CLUBS string mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"     * Tests the equality contract and hash code consistency. Verifies:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eEqual cards return true for equals()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eEqual cards have matching hash codes","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eDifferent cards return false for equals()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"    @DisplayName(\"Test equality and hash code\")","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"    void testEqualityAndHashCode() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"        Card card1 \u003d new Card(TWO, CLUBS);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"        Card card2 \u003d new Card(TWO, CLUBS);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"        Card card3 \u003d new Card(KING, HEARTS);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"        // Equality tests","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(card1, card2, \"Identical cards should be equal\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(card1.hashCode(), card2.hashCode(), \"Equal cards must have equal hash codes\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(card1, card3, \"Different cards should not be equal\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"     * Verifies proper handling of invalid comparisons. Ensures cards:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eNever equal to null","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eNever equal to different types","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"    @DisplayName(\"Test invalid comparisons\")","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"    void testInvalidComparisons() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"        Card card \u003d new Card(SEVEN, DIAMONDS);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(null, card, \"Card should not equal null\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(new Object(), card, \"Card should not equal other types\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"     * Validates completeness of enum declarations. Prevents accidental modification of enum values","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"     * by:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eChecking count of Rank values (13)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003eChecking count of Suit values (4)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"    @DisplayName(\"Test enum completeness\")","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"    void testEnumCompleteness() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(13, Card.Rank.values().length, \"Should have 13 ranks (2-10, J, Q, K, A)\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"                4,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"                Card.Suit.values().length,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"                \"Should have 4 suits (Hearts, Clubs, Spades, Diamonds)\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"     * Tests record component accessors. Verifies the automatically generated methods:","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003e{@link Card#rank()}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"     *   \u003cli\u003e{@link Card#suit()}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"    @DisplayName(\"Test record components\")","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"    void testRecordComponents() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"        Card card \u003d new Card(NINE, SPADES);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(NINE, card.rank(), \"Rank component mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(SPADES, card.suit(), \"Suit component mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-04-05","isFullCredit":false}],"authorContributionMap":{"Markneoneo":249}},{"path":"src/test/java/javatro/core/DeckTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":" * This class contains unit tests for the {@link Deck} class. It tests the initialisation and","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":" * drawing of cards, ensuring the deck contains the proper number of cards.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"public class DeckTest {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"    private static Deck deck;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"    /** Initialize a new deck for each test. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    void init() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"        deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"     * Test that each Deck initialised has 52 cards, and drawing 1 card gives the correct number of","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"     * cards remaining.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    void testDeck() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        int cardsRemaining \u003d deck.getRemainingCards();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(52, cardsRemaining);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"        Card drawOne \u003d deck.draw();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(51, deck.getRemainingCards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /** Test that a Checkered Deck has 52 cards, with 26 cards of Hearts, 26 cards of Spades. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    void testCheckeredDeck() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        Deck checkeredDeck \u003d new Deck(Deck.DeckType.CHECKERED);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"        int cardsRemaining \u003d checkeredDeck.getRemainingCards();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        assertEquals(52, cardsRemaining);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e cardArrayList \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c 52; i++) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"            Card card \u003d checkeredDeck.draw();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Suit.CLUBS, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Suit.DIAMONDS, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"    /** Test that a Abandoned Deck has 40 cards, with no Face Cards. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"    void testAbandonedDeck() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"        Deck checkeredDeck \u003d new Deck(Deck.DeckType.ABANDONED);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"        int cardsRemaining \u003d checkeredDeck.getRemainingCards();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"        assertEquals(40, cardsRemaining);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"        ArrayList\u003cCard\u003e cardArrayList \u003d new ArrayList\u003cCard\u003e();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        for (int i \u003d 0; i \u003c 40; i++) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"            Card card \u003d checkeredDeck.draw();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Rank.KING, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Rank.QUEEN, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"            assertNotEquals(Card.Rank.JACK, card.suit());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":31,"-":3,"jwyk":32}},{"path":"src/test/java/javatro/core/HoldingHandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.FIVE;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":" * This class contains unit tests for the {@link HoldingHandTest} class. It tests the various","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":" * methods of drawing, discarding and adding cards to ensure the correct cards are displayed and","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":" * played hand is correct.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"public class HoldingHandTest {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"    private static Deck deck;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    private static HoldingHand holdingHand;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    /** Initialize a new deck for each test. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    void init() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"        deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        cardOne \u003d new Card(TWO, SPADES);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"        cardTwo \u003d new Card(THREE, HEARTS);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"        cardThree \u003d new Card(FOUR, CLUBS);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        cardFour \u003d new Card(FIVE, DIAMONDS);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    /** Test that HoldingHand can add cards, draw and discard cards. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"    void testHoldingHand() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"        int cardsRemaining \u003d deck.getRemainingCards();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(44, cardsRemaining);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        holdingHand.discard(List.of(1, 3, 5));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(41, deck.getRemainingCards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e playedHand \u003d holdingHand.play(List.of(1, 4, 5));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(3, playedHand.size());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(38, deck.getRemainingCards());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    /** Test that HoldingHand can return the hand held. */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"    void testGetHoldingHand() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        Card cardOne \u003d new Card(ACE, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"        Card cardTwo \u003d new Card(TWO, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"        Card cardThree \u003d new Card(THREE, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"        Card cardFour \u003d new Card(FOUR, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e cards \u003d","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                new ArrayList\u003cCard\u003e() {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                    {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"                        add(cardOne);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"                        add(cardTwo);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"                        add(cardThree);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"                        add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"                    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"                };","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        for (Card card : cards) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(card);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d holdingHand.getHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"        assertArrayEquals(new List[] {cards}, new List[] {hand});","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jwyk"},"content":"    /** Test that HoldingHand can return cards in order. */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jwyk"},"content":"    void testSortByRank() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e cards \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"                new ArrayList\u003cCard\u003e() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jwyk"},"content":"                    {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"                        add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jwyk"},"content":"                        add(cardThree);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"                        add(cardTwo);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"                        add(cardOne);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"                    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"                };","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardThree);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardTwo);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardOne);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"        holdingHand.sortByRank();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e hand \u003d holdingHand.getHand();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jwyk"},"content":"        assertArrayEquals(new List[] {cards}, new List[] {hand});","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Test that HoldingHand can return suits in a particular order. SPADES \u003e HEARTS \u003e CLUBS \u003e","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * DIAMONDS","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jwyk"},"content":"    void testSortBySuit() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e cards \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jwyk"},"content":"                new ArrayList\u003cCard\u003e() {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jwyk"},"content":"                    {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jwyk"},"content":"                        add(cardOne);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jwyk"},"content":"                        add(cardTwo);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jwyk"},"content":"                        add(cardThree);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jwyk"},"content":"                        add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jwyk"},"content":"                    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jwyk"},"content":"                };","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardFour);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardThree);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardTwo);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jwyk"},"content":"        holdingHand.add(cardOne);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jwyk"},"content":"        holdingHand.sortBySuit();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jwyk"},"content":"        List\u003cCard\u003e hand \u003d holdingHand.getHand();","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"jwyk"},"content":"        assertArrayEquals(new List[] {cards}, new List[] {hand});","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"    /***","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"     * Test that JavatroException is thrown when an illegal card selection is played.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"    void testIllegalPlay() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e playedHand \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(-1);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"jwyk"},"content":"            holdingHand.play(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"                    UI.RED + \"Invalid index in cards to be played: -1\" + UI.END, e.getMessage());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(500);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"jwyk"},"content":"            holdingHand.play(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"                    UI.RED + \"Invalid index in cards to be played: 500\" + UI.END, e.getMessage());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"            playedHand.add(i);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"jwyk"},"content":"            holdingHand.play(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"jwyk"},"content":"                    UI.RED","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"                            + \"Number of cards played (8) \"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"                            + \"exceeds maximum allowed. (5)\"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"                            + UI.END,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"                    e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"    /***","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"     * Test that JavatroException is thrown when an illegal card selection is discarded.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"    void testIllegalDiscard() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"        List\u003cInteger\u003e playedHand \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(-1);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"jwyk"},"content":"            holdingHand.discard(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"                    UI.RED + \"Invalid index in cards to be discarded: -1\" + UI.END, e.getMessage());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"        playedHand.add(500);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"jwyk"},"content":"            holdingHand.discard(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"            assertEquals(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"jwyk"},"content":"                    UI.RED + \"Invalid index in cards to be discarded: 500\" + UI.END,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"                    e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"        playedHand.remove(0);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"            playedHand.add(i);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"        try {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"jwyk"},"content":"            holdingHand.discard(playedHand);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"            fail(\"Should have thrown an exception for illegal card index\");","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    UI.RED + \"Number of cards discarded (8) exceeds maximum allowed. (5)\" + UI.END,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"                    e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"    /***","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"     * Test that JavatroException is thrown when a card cannot be added properly.","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"    void testIllegalAdd() throws JavatroException {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"        HoldingHand holdingHand \u003d new HoldingHand();","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"        Card cardToAdd \u003d new Card(ACE, SPADES);","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"            holdingHand.add(deck.draw());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"        assertThrowsExactly(JavatroException.class, () -\u003e holdingHand.add(cardToAdd));","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-24","isFullCredit":false}],"authorContributionMap":{"Markneoneo":156,"-":21,"jwyk":69}},{"path":"src/test/java/javatro/core/PlanetCardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":" * JUnit 5 test suite for {@link PlanetCard} class functionality.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" * \u003cp\u003eVerifies core functionality including card retrieval, level management, increment","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" * calculations, and instance properties. Maintains test isolation through automatic state reset","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" * after each test.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"class PlanetCardTest {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"     * Resets enhancement levels to default values after each test. Ensures test isolation by","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"     * clearing shared state between test executions.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"    @AfterEach","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"    void resetState() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"        Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"            PlanetCard.LEVELS.put(handType, 1);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"     * Verifies that all poker hand types have associated planet cards. Tests complete coverage of","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"     * {@link PokerHand.HandType} enumeration.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"    void getForHand_allHandTypes_returnsNonNullCards() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"            PlanetCard card \u003d PlanetCard.getForHand(handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"            assertNotNull(card, \"Missing card for hand type: \" + handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"     * Tests initial state configuration of enhancement levels. Ensures all hand types start at","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"     * level 1 before any modifications.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    void getLevel_initialState_returnsBaseLevelOne() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"                    1, PlanetCard.getLevel(handType), \"Incorrect initial level for: \" + handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     * Verifies single level enhancement functionality. Checks both direct level access and","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"     * subsequent retrieval.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"    void apply_singleApplication_incrementsLevelByOne() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard targetCard \u003d PlanetCard.getForHand(PokerHand.HandType.HIGH_CARD);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"        targetCard.apply();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"                2,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getLevel(targetCard.getHandType()),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"                \"Level not incremented after single application\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"     * Tests multiple consecutive enhancements on the same card. Verifies cumulative level increases","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"     * and boundary conditions.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"    void apply_multipleApplications_incrementsLevelAppropriately() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard targetCard \u003d PlanetCard.getForHand(PokerHand.HandType.PAIR);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"        final int applications \u003d 3;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c applications; i++) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"            targetCard.apply();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"                1 + applications,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getLevel(targetCard.getHandType()),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"                \"Incorrect level after multiple applications\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"     * Verifies isolation between different hand type enhancements. Ensures modifying one card type","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"     * doesn\u0027t affect others.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"    void apply_oneHandType_doesNotAffectOtherLevels() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"        Storage.getStorageInstance().setRunChosen(1);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard modifiedCard \u003d PlanetCard.getForHand(PokerHand.HandType.TWO_PAIR);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"        modifiedCard.apply();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"                2,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getLevel(PokerHand.HandType.TWO_PAIR),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"                \"Modified card level incorrect\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"                1,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getLevel(PokerHand.HandType.THREE_OF_A_KIND),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"                \"Unrelated card level affected\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"     * Validates static chip increment values against known configurations. Tests sample hand types","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"     * to verify correct base values.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"    void getChipIncrement_knownValues_returnsConfiguredAmounts() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"                10,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getChipIncrement(PokerHand.HandType.HIGH_CARD),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"                \"Incorrect chip increment for HIGH_CARD\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"                30,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getChipIncrement(PokerHand.HandType.FOUR_OF_A_KIND),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                \"Incorrect chip increment for FOUR_OF_A_KIND\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"                50,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getChipIncrement(PokerHand.HandType.FLUSH_FIVE),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"                \"Incorrect chip increment for FLUSH_FIVE\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"     * Validates static multiplier increments against known configurations. Tests edge cases and","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"     * mid-range values.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"    void getMultiIncrement_knownValues_returnsConfiguredAmounts() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"                1,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getMultiIncrement(PokerHand.HandType.PAIR),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"                \"Incorrect multi increment for PAIR\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"                4,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getMultiIncrement(PokerHand.HandType.STRAIGHT_FLUSH),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"                \"Incorrect multi increment for STRAIGHT_FLUSH\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"                3,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"                PlanetCard.getMultiIncrement(PokerHand.HandType.FIVE_OF_A_KIND),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"                \"Incorrect multi increment for FIVE_OF_A_KIND\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"     * Verifies instance property consistency for a sample card. Tests all getters against","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"     * predefined configuration values.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"    void instanceProperties_sampleCard_returnsConfiguredValues() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"        PlanetCard earthCard \u003d PlanetCard.getForHand(PokerHand.HandType.FULL_HOUSE);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"        assertAll(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"                \"Earth card properties\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertEquals(\"Earth\", earthCard.getName()),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertEquals(25, earthCard.getChipIncrement()),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertEquals(2, earthCard.getMultiIncrement()),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertEquals(PokerHand.HandType.FULL_HOUSE, earthCard.getHandType()),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertEquals(\"planet_earth.txt\", earthCard.getPath()));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"     * Ensures static and instance chip increments match for all cards. Verifies API consistency","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"     * between different access methods.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"    void chipIncrement_staticVsInstance_returnsSameValue() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"            PlanetCard card \u003d PlanetCard.getForHand(handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"                    PlanetCard.getChipIncrement(handType),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"                    card.getChipIncrement(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"                    \"Mismatch for hand type: \" + handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"     * Ensures static and instance multiplier increments match for all cards. Validates API","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"     * consistency across different access patterns.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"    void multiIncrement_staticVsInstance_returnsSameValue() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"            PlanetCard card \u003d PlanetCard.getForHand(handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"            assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"                    PlanetCard.getMultiIncrement(handType),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"                    card.getMultiIncrement(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"                    \"Mismatch for hand type: \" + handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-04-05","isFullCredit":false}],"authorContributionMap":{"Markneoneo":198}},{"path":"src/test/java/javatro/core/PokerHandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertSame;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":" * Comprehensive test suite for {@link PokerHand} class functionality. Tests focus on core business","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":" * logic while making following assumptions: 1. {@link PlanetCard} returns level 1 for all new hand","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":" * types 2. {@link JavatroCore} maintains play counts correctly across increments 3. Chip/multiplier","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":" * increments are handled by external systems as per base values","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"class PokerHandTest {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"    private PokerHand highCardHand;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"    private PokerHand flushFiveHand;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"    void setUp() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"        highCardHand \u003d new PokerHand(PokerHand.HandType.HIGH_CARD);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"        flushFiveHand \u003d new PokerHand(PokerHand.HandType.FLUSH_FIVE);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"     * Tests baseline chip calculation without level progression. Assumes PlanetCard returns level 1","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"     * for new hands.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":"    void getChips_shouldReturnBaseValueAtLevelOne() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(5, highCardHand.getChips(), \"High Card base chips mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(160, flushFiveHand.getChips(), \"Flush Five base chips mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"     * Tests multiplier calculation without level progression. Assumes PlanetCard returns level 1","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"     * for new hands.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"    void getMultiplier_shouldReturnBaseValueAtLevelOne() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(1, highCardHand.getMultiplier(), \"High Card base multiplier mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(16, flushFiveHand.getMultiplier(), \"Flush Five base multiplier mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"    /** Tests hand name retrieval matches enum declaration. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"    void getHandName_shouldReturnCorrectName() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", highCardHand.getHandName(), \"Hand name mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush Five\", flushFiveHand.getHandName(), \"Hand name mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"     * Tests play counter initialization and increment sequence. Assumes JavatroCore maintains","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"     * separate counts per hand type.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"    void playCount_shouldIncrementSeparatelyPerHandType() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        final int initialHighCardPlays \u003d highCardHand.getPlayCount();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"        final int initialFlushPlays \u003d flushFiveHand.getPlayCount();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"        highCardHand.incrementPlayed();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"        highCardHand.incrementPlayed();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"                initialHighCardPlays + 2,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"                highCardHand.getPlayCount(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"                \"High Card play count mismatch\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"                initialFlushPlays,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"                flushFiveHand.getPlayCount(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"                \"Flush Five play count should remain unchanged\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"     * Tests that incrementPlayed() maintains instance identity. Since state is managed externally,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"     * same instance should be returned.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"    void incrementPlayed_shouldReturnSameInstance() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"        PokerHand original \u003d highCardHand;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        PokerHand updated \u003d original.incrementPlayed();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        assertSame(original, updated, \"Should return same instance after increment\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"     * Tests string representation contains all critical components. Format: \"Hand Name (Level: X,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"     * Chips: Y, Multiplier: Z, Played: W)\"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"    void toString_shouldContainAllComponents() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"        String result \u003d highCardHand.toString();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"        assertAll(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"                \"All components should be present\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertTrue(result.contains(\"High Card\"), \"Missing hand name\"),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertTrue(result.contains(\"Level:\"), \"Missing level\"),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertTrue(result.contains(\"Chips:\"), \"Missing chips\"),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertTrue(result.contains(\"Multiplier:\"), \"Missing multiplier\"),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"                () -\u003e assertTrue(result.contains(\"Played:\"), \"Missing play count\"));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"    /** Tests all enum values have non-empty hand names. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"    void handTypeEnum_shouldHaveValidNames() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"            assertNotNull(handType.getHandName(), \"Null hand name for \" + handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"            assertFalse(handType.getHandName().trim().isEmpty(), \"Empty hand name for \" + handType);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"    /** Tests base chip values follow expected hierarchy. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"    void handTypeChips_shouldMaintainValueHierarchy() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"        assertTrue(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.FLUSH_FIVE.getChips()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"                        \u003e PokerHand.HandType.FLUSH_HOUSE.getChips(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"                \"Flush Five should have higher chips than Flush House\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"        assertTrue(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                PokerHand.HandType.HIGH_CARD.getChips() \u003c PokerHand.HandType.PAIR.getChips(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"                \"Pair should have higher chips than High Card\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"    /** Tests multiplier values are positive for all hand types. */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"    void handTypeMultipliers_shouldBePositive() {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"        for (PokerHand.HandType handType : PokerHand.HandType.values()) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"            assertTrue(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"                    handType.getMultiplier() \u003e 0, \"Non-positive multiplier for \" + handType.name());","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-04-05","isFullCredit":false}],"authorContributionMap":{"Markneoneo":137}},{"path":"src/test/java/javatro/core/ScoreTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"public class ScoreTest {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    private static HandResult handResult;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    private static Card cardFive;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"                List.of(","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"                        new Card(NINE, DIAMONDS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"                        new Card(TEN, HEARTS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"                        new Card(JACK, CLUBS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand played with no jokers gives the correct score. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"    void testScore() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, heldJokers);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"        assertEquals(316, finalScore);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"-":1,"jwyk":53}},{"path":"src/test/java/javatro/core/handResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Markneoneo"},"content":"// @@author Markneoneo","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Markneoneo"},"content":"package javatro.core;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.ACE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.EIGHT;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FIVE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.FOUR;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.SEVEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.SIX;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.THREE;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Rank.TWO;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-23","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FIVE_OF_A_KIND;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FLUSH_FIVE;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Markneoneo"},"content":"import static javatro.core.PokerHand.HandType.FLUSH_HOUSE;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Markneoneo"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Markneoneo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Markneoneo"},"content":"import java.util.List;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Markneoneo"},"content":"/**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Markneoneo"},"content":" * This class contains comprehensive unit tests for the {@link HandResult} class. It verifies the","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Markneoneo"},"content":" * correct identification and ranking of various poker hand types, including standard poker hands","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Markneoneo"},"content":" * and special hand types like Flush Five and Flush House.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Markneoneo"},"content":" */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Markneoneo"},"content":"class HandResultTest {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d STRAIGHT FLUSH TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a straight flush is correctly identified. A straight flush is a hand that contains","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Markneoneo"},"content":"     * five cards of sequential rank, all the same suit.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Markneoneo"},"content":"    void testStraightFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Markneoneo"},"content":"        // Arrange: Create a straight flush hand (9-K all spades)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Markneoneo"},"content":"        // Act: Evaluate the hand","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Markneoneo"},"content":"        // Assert: Verify correct hand type identification","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with mixed suits is not identified as a straight flush. The hand should be","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Markneoneo"},"content":"     * identified as a straight instead.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Markneoneo"},"content":"    void testStraightFlushFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Markneoneo"},"content":"        // Arrange: Create a straight with mixed suits","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Markneoneo"},"content":"        // Act: Evaluate the hand","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Markneoneo"},"content":"        // Assert: Verify it\u0027s not a straight flush but is a straight","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with cards not in sequence is not identified as a straight flush. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Markneoneo"},"content":"     * should be identified as a flush instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Markneoneo"},"content":"    void testStraightFlushFalseNotInSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ROYAL FLUSH TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a royal flush is correctly identified. A royal flush is a hand that contains the","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Markneoneo"},"content":"     * Ace, King, Queen, Jack, and Ten of the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Markneoneo"},"content":"    void testRoyalFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with an Ace as a low card is not identified as a royal flush. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Markneoneo"},"content":"     * should be identified as a straight flush instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Markneoneo"},"content":"    void testRoyalFlushFalseAceLow() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Markneoneo"},"content":"                        new Card(THREE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FOUR, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FLUSH TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a flush is correctly identified. A flush is a hand that contains five cards of the","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Markneoneo"},"content":"     * same suit, not in sequence.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Markneoneo"},"content":"    void testFlushTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with mixed suits is not identified as a flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Markneoneo"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with less than five cards is not identified as a flush. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Markneoneo"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TWO, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HIGH CARD TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a high card is correctly identified. A high card is a hand that does not fall into","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Markneoneo"},"content":"     * any other category.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"Markneoneo"},"content":"    void testHighCardTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d List.of(new Card(ACE, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d STRAIGHT TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a straight is correctly identified. A straight is a hand that contains five cards","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"Markneoneo"},"content":"     * of sequential rank, not all the same suit.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"Markneoneo"},"content":"    void testStraightTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with cards not in sequence is not identified as a straight. The hand should","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"Markneoneo"},"content":"     * be identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"Markneoneo"},"content":"    void testStraightFalseNotInSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with mixed sequence is not identified as a straight. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"Markneoneo"},"content":"     * identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"Markneoneo"},"content":"    void testStraightFalseMixedSequence() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"Markneoneo"},"content":"                        new Card(NINE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with less than five cards is not identified as a straight. The hand should","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"Markneoneo"},"content":"     * be identified as a high card instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"Markneoneo"},"content":"    void testStraightFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SIX, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Straight\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"High Card\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FULL HOUSE TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a full house is correctly identified. A full house is a hand that contains three","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"Markneoneo"},"content":"     * cards of one rank and two cards of another rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"Markneoneo"},"content":"    void testFullHouseTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with two pairs is not identified as a full house. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"Markneoneo"},"content":"     * identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"Markneoneo"},"content":"    void testFullHouseFalseTwoPair() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with less than five cards is not identified as a full house. The hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"Markneoneo"},"content":"     * should be identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"Markneoneo"},"content":"    void testFullHouseFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with three of a kind is not identified as a full house. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"Markneoneo"},"content":"     * identified as three of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"Markneoneo"},"content":"    void testFullHouseFalseThreeOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d THREE OF A KIND TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"Markneoneo"},"content":"     * Tests that three of a kind is correctly identified. Three of a kind is a hand that contains","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"Markneoneo"},"content":"     * three cards of one rank and two cards of two different ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"Markneoneo"},"content":"    void testThreeOfAKindTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"Markneoneo"},"content":"     * Tests that three of a kind is correctly identified with only three cards.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"Markneoneo"},"content":"    void testThreeOfAKindTrue3Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"Markneoneo"},"content":"                List.of(new Card(TEN, SPADES), new Card(TEN, DIAMONDS), new Card(TEN, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a full house is not identified as three of a kind. The hand should be identified","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"Markneoneo"},"content":"     * as a full house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"Markneoneo"},"content":"    void testThreeOfAKindFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Three of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FOUR OF A KIND TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"Markneoneo"},"content":"     * Tests that four of a kind is correctly identified with five cards. Four of a kind is a hand","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"Markneoneo"},"content":"     * that contains four cards of one rank and one card of another rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"Markneoneo"},"content":"    void testFourOfAKindTrue5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"Markneoneo"},"content":"     * Tests that four of a kind is correctly identified with four cards.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"Markneoneo"},"content":"    void testFourOfAKindTrue4Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PAIR TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a pair is correctly identified with five cards. A pair is a hand that contains two","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"Markneoneo"},"content":"     * cards of one rank and three cards of three different ranks.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"Markneoneo"},"content":"    void testPairTrue5Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with two pairs is not identified as a single pair. The hand should be","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"Markneoneo"},"content":"     * identified as two pairs instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":502,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":503,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":504,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":505,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":506,"author":{"gitId":"Markneoneo"},"content":"    void testPairFalseTwoPair() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":507,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":508,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":509,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":510,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":511,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":512,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":513,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":514,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":515,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":516,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":517,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":518,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":519,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":520,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a pair is correctly identified with two cards.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":521,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":522,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":523,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":524,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":525,"author":{"gitId":"Markneoneo"},"content":"    void testPairTrue2Cards() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":526,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d List.of(new Card(EIGHT, SPADES), new Card(EIGHT, DIAMONDS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":527,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":528,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":529,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":530,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":531,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":532,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a full house is not identified as a pair. The hand should be identified as a full","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":533,"author":{"gitId":"Markneoneo"},"content":"     * house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":534,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":535,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":536,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":537,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":538,"author":{"gitId":"Markneoneo"},"content":"    void testPairFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":539,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":540,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":541,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":542,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":543,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":544,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":545,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":546,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":547,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":548,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":549,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":550,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":551,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":552,"author":{"gitId":"Markneoneo"},"content":"     * Tests that four of a kind is not identified as a pair. The hand should be identified as four","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":553,"author":{"gitId":"Markneoneo"},"content":"     * of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":554,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":555,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":556,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":557,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":558,"author":{"gitId":"Markneoneo"},"content":"    void testPairFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":559,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":560,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":561,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":562,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":563,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":564,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":565,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":566,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":567,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":568,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":569,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":570,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":571,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TWO PAIR TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":572,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":573,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":574,"author":{"gitId":"Markneoneo"},"content":"     * Tests that two pairs are correctly identified. Two pairs is a hand that contains two cards of","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":575,"author":{"gitId":"Markneoneo"},"content":"     * one rank, two cards of another rank, and one card of a third rank.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":576,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":577,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":578,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":579,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":580,"author":{"gitId":"Markneoneo"},"content":"    void testTwoPairTrue() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":581,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":582,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":583,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":584,"author":{"gitId":"Markneoneo"},"content":"                        new Card(EIGHT, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":585,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":586,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":587,"author":{"gitId":"Markneoneo"},"content":"                        new Card(SEVEN, SPADES));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":588,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":589,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":590,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":591,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":592,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":593,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a full house is not identified as two pairs. The hand should be identified as a","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":594,"author":{"gitId":"Markneoneo"},"content":"     * full house instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":595,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":596,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":597,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":598,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":599,"author":{"gitId":"Markneoneo"},"content":"    void testTwoPairFalseFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":600,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":601,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":602,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":603,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":604,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":605,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":606,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":607,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":608,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":609,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":610,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":611,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":612,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":613,"author":{"gitId":"Markneoneo"},"content":"     * Tests that four of a kind is not identified as two pairs. The hand should be identified as","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":614,"author":{"gitId":"Markneoneo"},"content":"     * four of a kind instead.","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":615,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":616,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":617,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":618,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":619,"author":{"gitId":"Markneoneo"},"content":"    void testTwoPairFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-08","isFullCredit":false},{"lineNumber":620,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":621,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":622,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":623,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, DIAMONDS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":624,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, CLUBS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":625,"author":{"gitId":"Markneoneo"},"content":"                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":626,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":627,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":628,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(\"Two Pair\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":629,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":630,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":631,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":632,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FLUSH FIVE TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":633,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":634,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":635,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a Flush Five is correctly identified (all 5 cards identical in rank and suit).","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":636,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":637,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":638,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":639,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":640,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFiveTrue() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":641,"author":{"gitId":"Markneoneo"},"content":"        // Arrange: Create a Flush Five hand (5 identical Ace of Hearts)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":642,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":643,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":644,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":645,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":646,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":647,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":648,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":649,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":650,"author":{"gitId":"Markneoneo"},"content":"        // Act: Evaluate the hand","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":651,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":652,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":653,"author":{"gitId":"Markneoneo"},"content":"        // Assert: Verify correct hand type identification","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":654,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":655,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush Five\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":656,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":657,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":658,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":659,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with same rank but different suits is not a Flush Five.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":660,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":661,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":662,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":663,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":664,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFiveFalseDifferentSuits() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":665,"author":{"gitId":"Markneoneo"},"content":"        // Arrange: Create a Five of a Kind hand (same rank, different suits)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":666,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":667,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":668,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":669,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":670,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":671,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":672,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":673,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":674,"author":{"gitId":"Markneoneo"},"content":"        // Act: Evaluate the hand","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":675,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":676,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":677,"author":{"gitId":"Markneoneo"},"content":"        // Assert: Verify it\u0027s not Flush Five but is Five of a Kind","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":678,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":679,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FIVE_OF_A_KIND, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":680,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":681,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":682,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":683,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with same suit but different ranks is not a Flush Five.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":684,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":685,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":686,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":687,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":688,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFiveFalseDifferentRanks() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":689,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":690,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":691,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":692,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":693,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":694,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":695,"author":{"gitId":"Markneoneo"},"content":"                        new Card(TEN, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":696,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":697,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":698,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Royal Flush\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":699,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":700,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":701,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":702,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with less than 5 cards cannot be a Flush Five.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":703,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":704,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":705,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":706,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":707,"author":{"gitId":"Markneoneo"},"content":"    void testFlushFiveFalseLessThan5Cards() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":708,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":709,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":710,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":711,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":712,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":713,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":714,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":715,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":716,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":717,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":718,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":719,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FIVE OF A KIND TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":720,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":721,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":722,"author":{"gitId":"Markneoneo"},"content":"     * Tests that Five of a Kind is correctly identified (all 5 cards same rank, suits can differ).","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":723,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":724,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":725,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":726,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":727,"author":{"gitId":"Markneoneo"},"content":"    void testFiveOfAKindTrue() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":728,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":729,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":730,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":731,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":732,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":733,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":734,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":735,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":736,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FIVE_OF_A_KIND, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":737,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Five of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":738,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":739,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":740,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":741,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a hand with only 4 of a kind is not Five of a Kind.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":742,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":743,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":744,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":745,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":746,"author":{"gitId":"Markneoneo"},"content":"    void testFiveOfAKindFalseFourOfAKind() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":747,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":748,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":749,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":750,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":751,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":752,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":753,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":754,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":755,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FIVE_OF_A_KIND, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":756,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Four of a Kind\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":757,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":758,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":759,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":760,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a Flush Five is not mistakenly identified as Five of a Kind.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":761,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":762,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":763,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":764,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":765,"author":{"gitId":"Markneoneo"},"content":"    void testFiveOfAKindFalseFlushFive() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":766,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":767,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":768,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":769,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":770,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":771,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":772,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":773,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":774,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FIVE_OF_A_KIND, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":775,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":776,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":777,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":778,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FLUSH HOUSE TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":779,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":780,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":781,"author":{"gitId":"Markneoneo"},"content":"     * Tests that Flush House is correctly identified (full house with all cards same suit).","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":782,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":783,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":784,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":785,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":786,"author":{"gitId":"Markneoneo"},"content":"    void testFlushHouseTrue() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":787,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":788,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":789,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":790,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":791,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":792,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":793,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":794,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":795,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FLUSH_HOUSE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":796,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush House\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":797,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":798,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":799,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":800,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a regular full house with mixed suits is not a Flush House.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":801,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":802,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":803,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":804,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":805,"author":{"gitId":"Markneoneo"},"content":"    void testFlushHouseFalseMixedSuits() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":806,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":807,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":808,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":809,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":810,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":811,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":812,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":813,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":814,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_HOUSE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":815,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Full House\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":816,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":817,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":818,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":819,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a flush without the full house composition is not a Flush House.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":820,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":821,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":822,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":823,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":824,"author":{"gitId":"Markneoneo"},"content":"    void testFlushHouseFalseNotFullHouse() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":825,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":826,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":827,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":828,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":829,"author":{"gitId":"Markneoneo"},"content":"                        new Card(KING, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":830,"author":{"gitId":"Markneoneo"},"content":"                        new Card(QUEEN, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":831,"author":{"gitId":"Markneoneo"},"content":"                        new Card(JACK, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":832,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":833,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_HOUSE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":834,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(\"Flush\", result.getHandName());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":835,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":836,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":837,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":838,"author":{"gitId":"Markneoneo"},"content":"     * Tests that a Flush Five is not mistakenly identified as Flush House.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":839,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":840,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":841,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":842,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":843,"author":{"gitId":"Markneoneo"},"content":"    void testFlushHouseFalseFlushFive() throws JavatroException {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":844,"author":{"gitId":"Markneoneo"},"content":"        List\u003cCard\u003e hand \u003d","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":845,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":846,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":847,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":848,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":849,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":850,"author":{"gitId":"Markneoneo"},"content":"                        new Card(ACE, HEARTS));","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":851,"author":{"gitId":"Markneoneo"},"content":"        PokerHand result \u003d HandResult.evaluateHand(hand);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":852,"author":{"gitId":"Markneoneo"},"content":"        assertNotEquals(FLUSH_HOUSE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":853,"author":{"gitId":"Markneoneo"},"content":"        assertEquals(FLUSH_FIVE, result.handType());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":854,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":855,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":856,"author":{"gitId":"Markneoneo"},"content":"    /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d HAND PRIORITY TESTS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":857,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":858,"author":{"gitId":"Markneoneo"},"content":"    // Enum values are ordered from strongest to weakest in declaration","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":859,"author":{"gitId":"Markneoneo"},"content":"    // ordinal() returns the position (0-based index) in the enum declaration","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":860,"author":{"gitId":"Markneoneo"},"content":"    // compareTo() returns negative when the first is \"less than\" (stronger than) the second","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":861,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":862,"author":{"gitId":"Markneoneo"},"content":"     * Comprehensive test that verifies the correct priority ordering of all poker hand types. This","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":863,"author":{"gitId":"Markneoneo"},"content":"     * test ensures that stronger hands properly outrank weaker ones according to the defined","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":864,"author":{"gitId":"Markneoneo"},"content":"     * priority values in HandType.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":865,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":866,"author":{"gitId":"Markneoneo"},"content":"     * @throws JavatroException if there\u0027s an error in hand evaluation","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":867,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":868,"author":{"gitId":"Markneoneo"},"content":"    @Test","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":869,"author":{"gitId":"Markneoneo"},"content":"    void testAllHandPriorities() throws JavatroException {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":870,"author":{"gitId":"Markneoneo"},"content":"        // Create sample hands for each hand type in order from strongest to weakest","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":871,"author":{"gitId":"Markneoneo"},"content":"        List\u003cTestHand\u003e testHands \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":872,"author":{"gitId":"Markneoneo"},"content":"                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":873,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":874,"author":{"gitId":"Markneoneo"},"content":"                                // 1. Flush Five (all cards identical)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":875,"author":{"gitId":"Markneoneo"},"content":"                                \"Flush Five\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":876,"author":{"gitId":"Markneoneo"},"content":"                                FLUSH_FIVE,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":877,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":878,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":879,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":880,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":881,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":882,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":883,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":884,"author":{"gitId":"Markneoneo"},"content":"                                // 2. Flush House (full house with all cards same suit)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":885,"author":{"gitId":"Markneoneo"},"content":"                                \"Flush House\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":886,"author":{"gitId":"Markneoneo"},"content":"                                FLUSH_HOUSE,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":887,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":888,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":889,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":890,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":891,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(QUEEN, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":892,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(QUEEN, DIAMONDS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":893,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":894,"author":{"gitId":"Markneoneo"},"content":"                                // 3. Five of a Kind (all cards same rank)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":895,"author":{"gitId":"Markneoneo"},"content":"                                \"Five of a Kind\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":896,"author":{"gitId":"Markneoneo"},"content":"                                FIVE_OF_A_KIND,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":897,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":898,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":899,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":900,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":901,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, SPADES),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":902,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":903,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":904,"author":{"gitId":"Markneoneo"},"content":"                                // 4. Royal Flush (A-K-Q-J-10 same suit)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":905,"author":{"gitId":"Markneoneo"},"content":"                                \"Royal Flush\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":906,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.ROYAL_FLUSH,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":907,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":908,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":909,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":910,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":911,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(JACK, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":912,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(TEN, SPADES))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":913,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":914,"author":{"gitId":"Markneoneo"},"content":"                                // 5. Straight Flush (sequential same suit, not royal)","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":915,"author":{"gitId":"Markneoneo"},"content":"                                \"Straight Flush\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":916,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.STRAIGHT_FLUSH,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":917,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":918,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(NINE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":919,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(TEN, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":920,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(JACK, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":921,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(QUEEN, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":922,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, HEARTS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":923,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":924,"author":{"gitId":"Markneoneo"},"content":"                                // 6. Four of a kind","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":925,"author":{"gitId":"Markneoneo"},"content":"                                \"Four of a Kind\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":926,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.FOUR_OF_A_KIND,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":927,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":928,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":929,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":930,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":931,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":932,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, HEARTS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":933,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":934,"author":{"gitId":"Markneoneo"},"content":"                                // 7. Full House","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":935,"author":{"gitId":"Markneoneo"},"content":"                                \"Full House\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":936,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.FULL_HOUSE,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":937,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":938,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":939,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":940,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":941,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":942,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, HEARTS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":943,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":944,"author":{"gitId":"Markneoneo"},"content":"                                // 8. Flush","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":945,"author":{"gitId":"Markneoneo"},"content":"                                \"Flush\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":946,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.FLUSH,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":947,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":948,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":949,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(TWO, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":950,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(FIVE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":951,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(NINE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":952,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(QUEEN, HEARTS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":953,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":954,"author":{"gitId":"Markneoneo"},"content":"                                // 9. Straight","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":955,"author":{"gitId":"Markneoneo"},"content":"                                \"Straight\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":956,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.STRAIGHT,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":957,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":958,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(FIVE, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":959,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(SIX, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":960,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(SEVEN, DIAMONDS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":961,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(EIGHT, CLUBS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":962,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(NINE, SPADES))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":963,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":964,"author":{"gitId":"Markneoneo"},"content":"                                // 10. Three of a Kind","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":965,"author":{"gitId":"Markneoneo"},"content":"                                \"Three of a Kind\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":966,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.THREE_OF_A_KIND,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":967,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":968,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":969,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":970,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, CLUBS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":971,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":972,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(QUEEN, HEARTS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":973,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":974,"author":{"gitId":"Markneoneo"},"content":"                                // 11. Two Pair","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":975,"author":{"gitId":"Markneoneo"},"content":"                                \"Two Pair\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":976,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.TWO_PAIR,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":977,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":978,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":979,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":980,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, CLUBS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":981,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":982,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(QUEEN, HEARTS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":983,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":984,"author":{"gitId":"Markneoneo"},"content":"                                // 12. Pair","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":985,"author":{"gitId":"Markneoneo"},"content":"                                \"Pair\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":986,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.PAIR,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":987,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":988,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":989,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, DIAMONDS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":990,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, CLUBS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":991,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":992,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(JACK, HEARTS))),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":993,"author":{"gitId":"Markneoneo"},"content":"                        new TestHand(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":994,"author":{"gitId":"Markneoneo"},"content":"                                // 13. High Card","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":995,"author":{"gitId":"Markneoneo"},"content":"                                \"High Card\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":996,"author":{"gitId":"Markneoneo"},"content":"                                PokerHand.HandType.HIGH_CARD,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":997,"author":{"gitId":"Markneoneo"},"content":"                                List.of(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":998,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(ACE, HEARTS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":999,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(KING, DIAMONDS),","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":1000,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(QUEEN, CLUBS),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1001,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(JACK, SPADES),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1002,"author":{"gitId":"Markneoneo"},"content":"                                        new Card(NINE, HEARTS))));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1003,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1004,"author":{"gitId":"Markneoneo"},"content":"        // Evaluate all hands","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1005,"author":{"gitId":"Markneoneo"},"content":"        List\u003cPokerHand\u003e evaluatedHands \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1006,"author":{"gitId":"Markneoneo"},"content":"                testHands.stream()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1007,"author":{"gitId":"Markneoneo"},"content":"                        .map(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1008,"author":{"gitId":"Markneoneo"},"content":"                                testHand -\u003e {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1009,"author":{"gitId":"Markneoneo"},"content":"                                    try {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1010,"author":{"gitId":"Markneoneo"},"content":"                                        PokerHand result \u003d","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1011,"author":{"gitId":"Markneoneo"},"content":"                                                HandResult.evaluateHand(testHand.cards());","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1012,"author":{"gitId":"Markneoneo"},"content":"                                        assertEquals(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1013,"author":{"gitId":"Markneoneo"},"content":"                                                testHand.expectedType(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1014,"author":{"gitId":"Markneoneo"},"content":"                                                result.handType(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1015,"author":{"gitId":"Markneoneo"},"content":"                                                \"Hand \"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1016,"author":{"gitId":"Markneoneo"},"content":"                                                        + testHand.name()","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1017,"author":{"gitId":"Markneoneo"},"content":"                                                        + \" was incorrectly identified\");","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1018,"author":{"gitId":"Markneoneo"},"content":"                                        return result;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1019,"author":{"gitId":"Markneoneo"},"content":"                                    } catch (JavatroException e) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1020,"author":{"gitId":"Markneoneo"},"content":"                                        throw new RuntimeException(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1021,"author":{"gitId":"Markneoneo"},"content":"                                                \"Hand evaluation failed for \" + testHand.name(), e);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1022,"author":{"gitId":"Markneoneo"},"content":"                                    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1023,"author":{"gitId":"Markneoneo"},"content":"                                })","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1024,"author":{"gitId":"Markneoneo"},"content":"                        .toList();","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1025,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1026,"author":{"gitId":"Markneoneo"},"content":"        // Verify each hand is stronger than all subsequent hands","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1027,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c evaluatedHands.size(); i++) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1028,"author":{"gitId":"Markneoneo"},"content":"            PokerHand currentHand \u003d evaluatedHands.get(i);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1029,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":1030,"author":{"gitId":"Markneoneo"},"content":"            // Compare against all weaker hands","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1031,"author":{"gitId":"Markneoneo"},"content":"            for (int j \u003d i + 1; j \u003c evaluatedHands.size(); j++) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1032,"author":{"gitId":"Markneoneo"},"content":"                PokerHand weakerHand \u003d evaluatedHands.get(j);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1033,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":1034,"author":{"gitId":"Markneoneo"},"content":"                assertTrue(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1035,"author":{"gitId":"Markneoneo"},"content":"                        currentHand.handType().compareTo(weakerHand.handType()) \u003c 0,","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1036,"author":{"gitId":"Markneoneo"},"content":"                        String.format(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1037,"author":{"gitId":"Markneoneo"},"content":"                                \"%s should be stronger than %s but isn\u0027t\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1038,"author":{"gitId":"Markneoneo"},"content":"                                testHands.get(i).name(), testHands.get(j).name()));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1039,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1040,"author":{"gitId":"Markneoneo"},"content":"                assertTrue(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1041,"author":{"gitId":"Markneoneo"},"content":"                        currentHand.handType().ordinal() \u003c weakerHand.handType().ordinal(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1042,"author":{"gitId":"Markneoneo"},"content":"                        String.format(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1043,"author":{"gitId":"Markneoneo"},"content":"                                \"%s should have lower ordinal than %s\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1044,"author":{"gitId":"Markneoneo"},"content":"                                testHands.get(i).name(), testHands.get(j).name()));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1045,"author":{"gitId":"Markneoneo"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1046,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":1047,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1048,"author":{"gitId":"Markneoneo"},"content":"        // Additional verification of priority values","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1049,"author":{"gitId":"Markneoneo"},"content":"        for (int i \u003d 0; i \u003c evaluatedHands.size() - 1; i++) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1050,"author":{"gitId":"Markneoneo"},"content":"            PokerHand current \u003d evaluatedHands.get(i);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1051,"author":{"gitId":"Markneoneo"},"content":"            PokerHand next \u003d evaluatedHands.get(i + 1);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1052,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1053,"author":{"gitId":"Markneoneo"},"content":"            assertTrue(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1054,"author":{"gitId":"Markneoneo"},"content":"                    current.handType().ordinal() \u003c next.handType().ordinal(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1055,"author":{"gitId":"Markneoneo"},"content":"                    String.format(","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1056,"author":{"gitId":"Markneoneo"},"content":"                            \"%s (priority %d) should have higher priority than %s (priority %d)\",","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1057,"author":{"gitId":"Markneoneo"},"content":"                            testHands.get(i).name(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1058,"author":{"gitId":"Markneoneo"},"content":"                            current.handType().ordinal(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1059,"author":{"gitId":"Markneoneo"},"content":"                            testHands.get(i + 1).name(),","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1060,"author":{"gitId":"Markneoneo"},"content":"                            next.handType().ordinal()));","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1061,"author":{"gitId":"Markneoneo"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1062,"author":{"gitId":"Markneoneo"},"content":"    }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1063,"author":{"gitId":"Markneoneo"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1064,"author":{"gitId":"Markneoneo"},"content":"    /**","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1065,"author":{"gitId":"Markneoneo"},"content":"     * Helper record to hold test hand information.","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1066,"author":{"gitId":"Markneoneo"},"content":"     *","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1067,"author":{"gitId":"Markneoneo"},"content":"     * @param name The name of the hand type being tested","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1068,"author":{"gitId":"Markneoneo"},"content":"     * @param expectedType The expected HandType enum value","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1069,"author":{"gitId":"Markneoneo"},"content":"     * @param cards The cards that make up this test hand","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1070,"author":{"gitId":"Markneoneo"},"content":"     */","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1071,"author":{"gitId":"Markneoneo"},"content":"    private record TestHand(String name, PokerHand.HandType expectedType, List\u003cCard\u003e cards) {}","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":1072,"author":{"gitId":"Markneoneo"},"content":"}","lastModifiedDate":"2025-03-06","isFullCredit":false}],"authorContributionMap":{"Markneoneo":1072}},{"path":"src/test/java/javatro/core/jokers/HeldJokersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.CLUBS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import javatro.core.HandResult;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Markneoneo"},"content":"import javatro.core.jokers.addmult.AbstractJoker;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.GluttonousJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.GreedyJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.LustyJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.addmult.WrathfulJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"public class HeldJokersTest {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"                List.of(","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"                        new Card(NINE, DIAMONDS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"                        new Card(TEN, HEARTS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"                        new Card(JACK, CLUBS),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"                        new Card(QUEEN, SPADES),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"                        new Card(KING, SPADES));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"        Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Test that a normal HeldJokers cannot add more than 5 Jokers without exceeding the maximum","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * limit.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"    void testIllegalAdd() {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"        Joker gluttonousJoker \u003d new GluttonousJoker();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        try {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"            for (int i \u003d 0; i \u003c 10; i++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"                heldJokers.add(gluttonousJoker);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"            fail();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"            assertEquals(JavatroException.exceedsMaxJokers().getMessage(), e.getMessage());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /** Test that a normal HeldJokers cannot delete a Joker at illegal positions */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"    void testIllegalDelete() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"        Joker gluttonousJoker \u003d new GluttonousJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"        Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"        try {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"            heldJokers.add(gluttonousJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"            heldJokers.remove(0);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jwyk"},"content":"            heldJokers.remove(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jwyk"},"content":"            fail();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jwyk"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jwyk"},"content":"            assertEquals(JavatroException.indexOutOfBounds(1).getMessage(), e.getMessage());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jwyk"},"content":"        }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"    /**","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jwyk"},"content":"     * Test that a hand played triggers multiple joker effects correctly and has the right score.","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jwyk"},"content":"     */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jwyk"},"content":"    void assertScoreEquals(HeldJokers currentJokers, int expectedScore) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"        Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, currentJokers);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jwyk"},"content":"        assertEquals(expectedScore, finalScore);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Test that a hand played triggers multiple joker effects correctly and has the right score.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jwyk"},"content":"    void testMultipleJokersSuite() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"        Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jwyk"},"content":"        Joker gluttonousJoker \u003d new GluttonousJoker();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Markneoneo"},"content":"        Joker counterJoker \u003d new AbstractJoker();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jwyk"},"content":"        Joker wrathfulJoker \u003d new WrathfulJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jwyk"},"content":"        Joker lustyJoker \u003d new LustyJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"        Joker greedyJoker \u003d new GreedyJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(counterJoker);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(gluttonousJoker);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(lustyJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(wrathfulJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 2212);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(greedyJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 2686);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-28","isFullCredit":false}],"authorContributionMap":{"Markneoneo":2,"flyingapricot":6,"-":16,"jwyk":92}},{"path":"src/test/java/javatro/core/jokers/addchip/OddToddJokerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addchip;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.HandResult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"public class OddToddJokerTest {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    private static Card cardFive;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    private static Joker oddToddJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        oddToddJoker \u003d new OddToddJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(oddToddJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        cardOne \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"        cardTwo \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        cardThree \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        cardFour \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"        cardFive \u003d new Card(KING, SPADES);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand played triggers joker effects correctly and has the right score. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"    void assertScoreEquals(HeldJokers currentJokers, int expectedScore) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, currentJokers);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"        assertEquals(expectedScore, finalScore);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand with 3 cards played correctly triggers the ScaryFaceJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"    void testOddToddJokerCorrect() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d List.of(cardOne, cardTwo);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 180);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand without face cards does not trigger the ScaryFaceJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"    void testOddToddJokerDisabled() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d List.of(cardThree, cardFour, cardFive);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 80);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"jwyk":70}},{"path":"src/test/java/javatro/core/jokers/addchip/ScaryFaceJokerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addchip;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.JACK;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.KING;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.QUEEN;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.SPADES;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import javatro.core.HandResult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"public class ScaryFaceJokerTest {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    private static Card cardFive;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"    private static Card cardSix;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"    private static Card cardSeven;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"    private static Joker scaryFaceJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"        scaryFaceJoker \u003d new ScaryFaceJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(scaryFaceJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"        cardOne \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"        cardTwo \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        cardThree \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        cardFour \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"        cardFive \u003d new Card(KING, SPADES);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"        cardSix \u003d new Card(QUEEN, SPADES);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"        cardSeven \u003d new Card(JACK, SPADES);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand played triggers joker effects correctly and has the right score. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jwyk"},"content":"    void assertScoreEquals(HeldJokers currentJokers, int expectedScore) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, currentJokers);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jwyk"},"content":"        assertEquals(expectedScore, finalScore);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand with 3 cards played correctly triggers the ScaryFaceJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    void testHalfJokerCorrect() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d List.of(cardFive, cardSix, cardSeven);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 125);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jwyk"},"content":"    /** Test that a hand without face cards does not trigger the ScaryFaceJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jwyk"},"content":"    void testScaryFaceJokerDisabled() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jwyk"},"content":"        playedCardList \u003d List.of(cardOne, cardTwo, cardThree, cardFour);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 116);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"-":1,"jwyk":75}},{"path":"src/test/java/javatro/core/jokers/addmult/HalfJokerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jwyk"},"content":"package javatro.core.jokers.addmult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.NINE;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Rank.TEN;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.DIAMONDS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static javatro.core.Card.Suit.HEARTS;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jwyk"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jwyk"},"content":"import javatro.core.HandResult;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jwyk"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.PokerHand;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jwyk"},"content":"import javatro.core.Score;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.Joker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jwyk"},"content":"import java.util.List;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jwyk"},"content":"public class HalfJokerTest {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jwyk"},"content":"    private static List\u003cCard\u003e playedCardList;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jwyk"},"content":"    private static PokerHand result;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jwyk"},"content":"    private static Card cardOne;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jwyk"},"content":"    private static Card cardTwo;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jwyk"},"content":"    private static Card cardThree;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jwyk"},"content":"    private static Card cardFour;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jwyk"},"content":"    private static Card cardFive;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"    private static Joker halfJoker;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jwyk"},"content":"    /** Initialize a test run. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jwyk"},"content":"    @BeforeEach","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jwyk"},"content":"    void init() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jwyk"},"content":"        halfJoker \u003d new HalfJoker();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jwyk"},"content":"        heldJokers.add(halfJoker);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"        cardOne \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"        cardTwo \u003d new Card(NINE, DIAMONDS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"        cardThree \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"        cardFour \u003d new Card(TEN, HEARTS);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /** Test that a hand played triggers joker effects correctly and has the right score. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"    void assertScoreEquals(HeldJokers currentJokers, int expectedScore) throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jwyk"},"content":"        result \u003d HandResult.evaluateHand(playedCardList);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jwyk"},"content":"        Score scoreObject \u003d new Score();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        long finalScore \u003d scoreObject.getScore(result, playedCardList, currentJokers);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jwyk"},"content":"        assertEquals(expectedScore, finalScore);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /** Test that a hand with 3 cards played correctly triggers the HalfJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jwyk"},"content":"    void testHalfJokerCorrect() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"        playedCardList \u003d List.of(cardOne, cardTwo, cardThree);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 836);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /** Test that a hand with 4 cards does not trigger the HalfJoker. */","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jwyk"},"content":"    @Test","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jwyk"},"content":"    void testHalfJokerDisabled() throws JavatroException {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        playedCardList \u003d List.of(cardOne, cardTwo, cardThree, cardFour);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jwyk"},"content":"        assertScoreEquals(heldJokers, 116);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jwyk"},"content":"}","lastModifiedDate":"2025-03-29","isFullCredit":false}],"authorContributionMap":{"-":5,"jwyk":61}},{"path":"src/test/java/javatro/core/round/RoundActionsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core.round;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"K-J-Q"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"K-J-Q"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"K-J-Q"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.BossType;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.HoldingHand;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"K-J-Q"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"K-J-Q"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"K-J-Q"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"K-J-Q"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"K-J-Q"},"content":"import java.util.List;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"K-J-Q"},"content":"public class RoundActionsTest {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"    private RoundState roundState;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"    private RoundConfig roundConfig;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"    private Deck deck;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"    private HoldingHand playerHand;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"K-J-Q"},"content":"    private HeldJokers playerJokers;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"K-J-Q"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"K-J-Q"},"content":"    void setUp() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"        // Initialize the deck with default cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"K-J-Q"},"content":"        deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"K-J-Q"},"content":"        // Create a player\u0027s hand and populate it with 8 cards from the deck","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"K-J-Q"},"content":"        playerHand \u003d new HoldingHand();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c 8; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"            playerHand.add(deck.draw());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"K-J-Q"},"content":"        // Initialize the player\u0027s jokers and round configuration","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"K-J-Q"},"content":"        playerJokers \u003d new HeldJokers();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"K-J-Q"},"content":"        roundConfig \u003d new RoundConfig(300);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"K-J-Q"},"content":"        roundConfig.setBossType(BossType.NONE);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"K-J-Q"},"content":"        // Set up the initial round state","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"K-J-Q"},"content":"        roundState \u003d new RoundState(0, 3, 3, playerJokers, deck);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"    void testPlayCards_Success() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        // Test playing 3 cards successfully","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 1, 2);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"        int initialDeckSize \u003d deck.getRemainingCards();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"        // Perform the play action and validate the results","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"        RoundActions.ActionResult result \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"                RoundActions.playCards(roundState, roundConfig, cardIndices);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, result.getCards().size(), \"Should have played 3 cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"                8,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                playerHand.getHand().size(),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \"Player should still have 8 cards after play and draw\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"                initialDeckSize - 3, deck.getRemainingCards(), \"Deck should have 3 fewer cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"        assertNotNull(result.getPointsEarned(), \"Points should be earned for playing cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"K-J-Q"},"content":"    void testPlayCards_NoRemainingPlays() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"        // Test behavior when no plays are remaining","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"        RoundState stateWithNoPlays;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"            stateWithNoPlays \u003d new RoundState(0, 3, 0, playerJokers, deck);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"            return;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 1, 2);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"        // Validate that an exception is thrown","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JavatroException exception \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"                assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"                        JavatroException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"K-J-Q"},"content":"                        () -\u003e RoundActions.playCards(stateWithNoPlays, roundConfig, cardIndices),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"                        \"Should throw JavatroException when no plays remain\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(UI.RED + \"No plays remaining.\" + UI.END, exception.getMessage());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"    void testPlayCards_TooFewCards() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"        // Test playing fewer cards than the minimum required","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"        RoundConfig config \u003d new RoundConfig(300);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"        config.setMinHandSize(3);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"        config.setMaxHandSize(5);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 1);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"K-J-Q"},"content":"        // Validate that an exception is thrown","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"        JavatroException exception \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"                assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"K-J-Q"},"content":"                        JavatroException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"K-J-Q"},"content":"                        () -\u003e RoundActions.playCards(roundState, config, cardIndices),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"                        \"Should throw JavatroException when playing fewer cards than minimum\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"                UI.RED + \"A poker hand must contain between 3 and 5 cards.\" + UI.END,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"K-J-Q"},"content":"                exception.getMessage());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"    void testPlayCards_TooManyCards() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"        // Test playing more cards than the maximum allowed","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"        RoundConfig config \u003d new RoundConfig(300);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"        config.setMinHandSize(1);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"        config.setMaxHandSize(3);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 1, 2, 3, 4);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"        // Validate that an exception is thrown","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"        JavatroException exception \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"                assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"                        JavatroException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"K-J-Q"},"content":"                        () -\u003e RoundActions.playCards(roundState, config, cardIndices),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"                        \"Should throw JavatroException when playing more cards than maximum\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"                UI.RED + \"A poker hand must contain between 1 and 3 cards.\" + UI.END,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"K-J-Q"},"content":"                exception.getMessage());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"K-J-Q"},"content":"    void testPlayCards_InvalidIndices() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"K-J-Q"},"content":"        // Test playing cards with invalid indices","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 20);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"        // Validate that an exception is thrown","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"        JavatroException exception \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"                assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"                        JavatroException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"                        () -\u003e RoundActions.playCards(roundState, roundConfig, cardIndices),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"                        \"Should throw JavatroException when trying to play a card with an invalid\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"                                + \" index\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"                UI.RED + \"Invalid index in cards to be played: 20\" + UI.END,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"                exception.getMessage());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"    void testPlayCards_ExactMinimumHandSize() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"        // Test playing the exact minimum number of cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"K-J-Q"},"content":"        RoundConfig config \u003d new RoundConfig(300);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"        config.setMinHandSize(2);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"        config.setMaxHandSize(5);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 1);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"        // Perform the play action and validate the results","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"        RoundActions.ActionResult result \u003d RoundActions.playCards(roundState, config, cardIndices);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"        assertNotNull(result, \"Result should not be null\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(2, result.getCards().size(), \"Should have played 2 cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"K-J-Q"},"content":"    void testPlayCards_ExactMaximumHandSize() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"K-J-Q"},"content":"        // Test playing the exact maximum number of cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"K-J-Q"},"content":"        RoundConfig config \u003d new RoundConfig(300);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"K-J-Q"},"content":"        config.setMinHandSize(1);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"K-J-Q"},"content":"        config.setMaxHandSize(4);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 1, 2, 3);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"K-J-Q"},"content":"        // Perform the play action and validate the results","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"K-J-Q"},"content":"        RoundActions.ActionResult result \u003d RoundActions.playCards(roundState, config, cardIndices);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"K-J-Q"},"content":"        assertNotNull(result, \"Result should not be null\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(4, result.getCards().size(), \"Should have played 4 cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"K-J-Q"},"content":"    void testPlayCards_NullParameters() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"K-J-Q"},"content":"        // Test behavior when null parameters are passed","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"K-J-Q"},"content":"        assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"K-J-Q"},"content":"                IllegalArgumentException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"K-J-Q"},"content":"                () -\u003e RoundActions.playCards(null, roundConfig, List.of(0, 1, 2)),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"                \"Should throw IllegalArgumentException when state is null\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"        assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"K-J-Q"},"content":"                IllegalArgumentException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"K-J-Q"},"content":"                () -\u003e RoundActions.playCards(roundState, null, List.of(0, 1, 2)),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"                \"Should throw IllegalArgumentException when config is null\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"K-J-Q"},"content":"        assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"K-J-Q"},"content":"                IllegalArgumentException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"K-J-Q"},"content":"                () -\u003e RoundActions.playCards(roundState, roundConfig, null),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"                \"Should throw IllegalArgumentException when card indices are null\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"K-J-Q"},"content":"    void testDiscardCards_Success() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"K-J-Q"},"content":"        // Test discarding 3 cards successfully","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 2, 4);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"K-J-Q"},"content":"        int initialDeckSize \u003d deck.getRemainingCards();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"K-J-Q"},"content":"        // Perform the discard action and validate the results","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"        RoundActions.ActionResult result \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"                RoundActions.discardCards(roundState, roundConfig, cardIndices);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, result.getCards().size(), \"Should have discarded 3 cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"                8,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"                playerHand.getHand().size(),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"                \"Player should still have 8 cards after discard and draw\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"                initialDeckSize - 3, deck.getRemainingCards(), \"Deck should have 3 fewer cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, result.getPointsEarned(), \"No points should be earned for discarding\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"K-J-Q"},"content":"    void testDiscardCards_NoRemainingDiscards() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"K-J-Q"},"content":"        // Test behavior when no discards are remaining","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"K-J-Q"},"content":"        RoundState stateWithNoDiscards;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"K-J-Q"},"content":"            stateWithNoDiscards \u003d new RoundState(0, 0, 3, playerJokers, deck);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"K-J-Q"},"content":"            fail(\"Unexpected exception during setup: \" + e.getMessage());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"K-J-Q"},"content":"            return;","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 1);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"K-J-Q"},"content":"        // Validate that an exception is thrown","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"        JavatroException exception \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"-"},"content":"                assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"K-J-Q"},"content":"                        JavatroException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"                        () -\u003e","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"                                RoundActions.discardCards(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"                                        stateWithNoDiscards, roundConfig, cardIndices),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"                        \"Should throw JavatroException when no discards remain\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(UI.RED + \"No remaining discards available\" + UI.END, exception.getMessage());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"K-J-Q"},"content":"    void testDiscardCards_TooManyCards() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"K-J-Q"},"content":"        // Test discarding more cards than allowed","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"K-J-Q"},"content":"            cardIndices.add(i);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"K-J-Q"},"content":"        // Validate that an exception is thrown","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"-"},"content":"        JavatroException exception \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"                assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"K-J-Q"},"content":"                        JavatroException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"K-J-Q"},"content":"                        () -\u003e RoundActions.discardCards(roundState, roundConfig, cardIndices),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"                        \"Should throw JavatroException when trying to discard too many cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"                UI.RED + \"Too many cards selected for discarding\" + UI.END, exception.getMessage());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"K-J-Q"},"content":"    void testDiscardCards_EmptyIndices() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"K-J-Q"},"content":"        // Test discarding zero cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"K-J-Q"},"content":"        // Validate that an exception is thrown","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"        JavatroException exception \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"                assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"K-J-Q"},"content":"                        JavatroException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"K-J-Q"},"content":"                        () -\u003e RoundActions.discardCards(roundState, roundConfig, cardIndices),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"                        \"Should throw JavatroException when trying to discard zero cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(UI.RED + \"Cannot discard zero cards\" + UI.END, exception.getMessage());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"K-J-Q"},"content":"    void testDiscardCards_DuplicateIndices() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"K-J-Q"},"content":"        // Test discarding cards with duplicate indices","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(1, 1, 2, 2, 3);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"K-J-Q"},"content":"        int initialDeckSize \u003d deck.getRemainingCards();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"K-J-Q"},"content":"        // Perform the discard action and validate the results","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"-"},"content":"        RoundActions.ActionResult result \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"-"},"content":"                RoundActions.discardCards(roundState, roundConfig, cardIndices);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, result.getCards().size(), \"Should have discarded 3 unique cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"                initialDeckSize - 3, deck.getRemainingCards(), \"Deck should have 3 fewer cards\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"K-J-Q"},"content":"    void testDiscardCards_InvalidIndices() {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"K-J-Q"},"content":"        // Test discarding cards with invalid indices","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0, 10);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"K-J-Q"},"content":"        // Validate that an exception is thrown","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"-"},"content":"        JavatroException exception \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"                assertThrows(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"K-J-Q"},"content":"                        JavatroException.class,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"K-J-Q"},"content":"                        () -\u003e RoundActions.discardCards(roundState, roundConfig, cardIndices),","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"                        \"Should throw JavatroException when trying to discard a card with an\"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"-"},"content":"                                + \" invalid index\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"-"},"content":"                UI.RED + \"Invalid index in cards to be discarded: 10\" + UI.END,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"K-J-Q"},"content":"                exception.getMessage());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"K-J-Q"},"content":"    void testDiscardCards_ExactRemainingDiscards() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"K-J-Q"},"content":"        // Test discarding the exact number of remaining discards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"K-J-Q"},"content":"        RoundState stateWithOneDiscard \u003d new RoundState(0, 1, 3, playerJokers, deck);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"K-J-Q"},"content":"        List\u003cInteger\u003e cardIndices \u003d List.of(0);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"K-J-Q"},"content":"        // Perform the discard action and validate the results","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"-"},"content":"        RoundActions.ActionResult result \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"-"},"content":"                RoundActions.discardCards(stateWithOneDiscard, roundConfig, cardIndices);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"K-J-Q"},"content":"        assertNotNull(result, \"Result should not be null\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(1, result.getCards().size(), \"Should have discarded 1 card\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-04-06","isFullCredit":false}],"authorContributionMap":{"K-J-Q":242,"-":64}},{"path":"src/test/java/javatro/core/round/RoundTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"K-J-Q"},"content":"package javatro.core.round;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"K-J-Q"},"content":"import static javatro.core.Deck.DeckType.DEFAULT;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jwyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.Ante;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.BossType;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"K-J-Q"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jwyk"},"content":"import javatro.core.jokers.HeldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"K-J-Q"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jwyk"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"K-J-Q"},"content":"public class RoundTest {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"K-J-Q"},"content":"    private static String getExceptionMessage(String message) {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"K-J-Q"},"content":"        return UI.RED + message + UI.END;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALIDPLAYEDHANDERROR \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \"A poker hand must contain between 1 and 5 cards.\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALIDPLAYSPERROUND \u003d","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \"Number of plays per round must be greater than 0.\";","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"K-J-Q"},"content":"    private static final String INVALIDDECK \u003d \"Deck cannot be null.\";","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"K-J-Q"},"content":"    enum isWon {","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        WON,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        LOST,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"        UNKNOWN","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jwyk"},"content":"    private static HeldJokers heldJokers;","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jwyk"},"content":"    @BeforeAll","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jwyk"},"content":"    public static void init() {","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jwyk"},"content":"        heldJokers \u003d new HeldJokers();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jwyk"},"content":"    }","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jwyk"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private void assertRoundInitialization(int anteCount, Ante.Blind blind, int remainingPlays)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"K-J-Q"},"content":"        int expectedBlindScore \u003d ante.getRoundScore();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(expectedBlindScore, round.getBlindScore());","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(remainingPlays, round.getRemainingPlays());","lastModifiedDate":"2025-03-16","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, round.getCurrentScore());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"K-J-Q"},"content":"        if (ante.getBlind() !\u003d Ante.Blind.BOSS_BLIND) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jwyk"},"content":"            assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Markneoneo"},"content":"        assertFalse(round.isRoundOver());","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private void assertRoundInitializationFailure(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"K-J-Q"},"content":"            int anteCount,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"K-J-Q"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"            Deck deck,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"K-J-Q"},"content":"            Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"K-J-Q"},"content":"            ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"K-J-Q"},"content":"            ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"K-J-Q"},"content":"            new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(expectedMessage), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void assertRoundOverAfterPlays(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"            int blindScore, int totalPlays, int playsToMake, boolean expectedIsOver)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1); // Default setting","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND); // Default setting","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, totalPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c playsToMake; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(expectedIsOver, round.isRoundOver());","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertPlayCardsFails(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"K-J-Q"},"content":"            int anteCount,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"K-J-Q"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"            int playsToMake,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"            String expectedErrorMessage)","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jwyk"},"content":"            Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"K-J-Q"},"content":"            Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"K-J-Q"},"content":"            ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"K-J-Q"},"content":"            ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"K-J-Q"},"content":"            Round round \u003d new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"K-J-Q"},"content":"            // Make the specified number of valid plays","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"K-J-Q"},"content":"            for (int i \u003d 0; i \u003c playsToMake; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"K-J-Q"},"content":"                round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"K-J-Q"},"content":"            }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"K-J-Q"},"content":"            // Attempt one more play which should fail","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(expectedErrorMessage), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"K-J-Q"},"content":"            int anteCount,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"K-J-Q"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"            List\u003cInteger\u003e cardIndices,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"            String expectedErrorMessage)","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(cardIndices);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"K-J-Q"},"content":"            fail();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(expectedErrorMessage), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"K-J-Q"},"content":"    private void assertRoundOver(","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"K-J-Q"},"content":"            int anteCount,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"K-J-Q"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"K-J-Q"},"content":"            int playsToMake,","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"K-J-Q"},"content":"            boolean expectedIsOver)","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(anteCount);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(blind);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, remainingPlays, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"K-J-Q"},"content":"        for (int i \u003d 0; i \u003c playsToMake; i++) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"K-J-Q"},"content":"            round.playCards(List.of(0, 1, 2, 3, 4));","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(expectedIsOver, round.isRoundOver());","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"K-J-Q"},"content":"    private void testRoundInitialization(int anteCount, Ante.Blind blind, int remainingPlays)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"K-J-Q"},"content":"        assertRoundInitialization(anteCount, blind, remainingPlays);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"K-J-Q"},"content":"    private void testRoundPlayCards(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"            int anteCount,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"            int playsToMake,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"            boolean expectedIsOver)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOver(anteCount, blind, remainingPlays, playsToMake, expectedIsOver);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"K-J-Q"},"content":"    private void testRoundOver(int anteCount, Ante.Blind blind, int totalPlays, int playsToMake)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(anteCount);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(blind);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"K-J-Q"},"content":"        assertRoundOverAfterPlays(ante.getRoundScore(), totalPlays, playsToMake, true);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"K-J-Q"},"content":"    private void testPlayCardsFails(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"            int anteCount,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"            Ante.Blind blind,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"            int remainingPlays,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"            int playsToMake,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"            String expectedError)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"K-J-Q"},"content":"            throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"K-J-Q"},"content":"        assertPlayCardsFails(anteCount, blind, remainingPlays, playsToMake, expectedError);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"K-J-Q"},"content":"    private void testBossType(BossType bossType) throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, bossType);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"K-J-Q"},"content":"        // Check that default values are maintained for other bosses","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(RoundConfig.DEFAULT_MIN_HAND_SIZE, round.getConfig().getMinHandSize());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(RoundConfig.DEFAULT_MAX_HAND_SIZE, round.getConfig().getMaxHandSize());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"K-J-Q"},"content":"    public void round_correctInitialization_smallBlind1() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"K-J-Q"},"content":"        testRoundInitialization(1, Ante.Blind.SMALL_BLIND, 3);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"K-J-Q"},"content":"    public void round_correctInitialization_smallBlind2() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"K-J-Q"},"content":"        testRoundInitialization(2, Ante.Blind.SMALL_BLIND, 5);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"K-J-Q"},"content":"    public void round_correctInitialization_largeBlind() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"K-J-Q"},"content":"        testRoundInitialization(2, Ante.Blind.LARGE_BLIND, 7);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"K-J-Q"},"content":"    public void round_correctInitialization_bossBlind() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"K-J-Q"},"content":"        testRoundInitialization(3, Ante.Blind.BOSS_BLIND, 1);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"K-J-Q"},"content":"    public void round_incorrectInitializatioin() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"                1, Ante.Blind.SMALL_BLIND, 0, new Deck(DEFAULT), INVALIDPLAYSPERROUND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"-"},"content":"        assertRoundInitializationFailure(1, Ante.Blind.SMALL_BLIND, 3, null, INVALIDDECK);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_smallBlind_fewPlays() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"K-J-Q"},"content":"        testRoundPlayCards(1, Ante.Blind.SMALL_BLIND, 3, 1, false);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_largeBlind_fewPlays() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"K-J-Q"},"content":"        testRoundPlayCards(1, Ante.Blind.LARGE_BLIND, 10000, 1, false);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_smallBlind_highAnte() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"K-J-Q"},"content":"        testRoundPlayCards(8, Ante.Blind.SMALL_BLIND, 10000, 1, false);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_largeBlind_highAnte() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"K-J-Q"},"content":"        testRoundPlayCards(8, Ante.Blind.LARGE_BLIND, 10000, 1, false);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_smallBlind_manyPlays() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"K-J-Q"},"content":"        testRoundPlayCards(1, Ante.Blind.SMALL_BLIND, 10000, 8, true);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_roundOver_smallBlind() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"K-J-Q"},"content":"        testRoundOver(8, Ante.Blind.SMALL_BLIND, 3, 3);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_roundOver_bossBlind1() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"K-J-Q"},"content":"        testRoundOver(8, Ante.Blind.BOSS_BLIND, 5, 5);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_roundOver_bossBlind2() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"K-J-Q"},"content":"        testRoundOver(8, Ante.Blind.BOSS_BLIND, 8, 8);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_roundOver_smallBlind_exactPlays() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"K-J-Q"},"content":"        testRoundOver(1, Ante.Blind.SMALL_BLIND, 1, 1);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_tooManyPlays_case1() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"K-J-Q"},"content":"        testPlayCardsFails(1, Ante.Blind.SMALL_BLIND, 3, 3, \"No plays remaining.\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_tooManyPlays_case2() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"-"},"content":"        testPlayCardsFails(","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"-"},"content":"                1,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"-"},"content":"                Ante.Blind.SMALL_BLIND,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"-"},"content":"                0,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"-"},"content":"                0,","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"-"},"content":"                \"Number of plays per round must be greater than 0.\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"K-J-Q"},"content":"    public void round_playCards_invalidHandSize() throws JavatroException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"K-J-Q"},"content":"        // Test with too many cards","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"-"},"content":"                1, Ante.Blind.SMALL_BLIND, 3, List.of(0, 1, 2, 3, 4, 5), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"-"},"content":"                1, Ante.Blind.SMALL_BLIND, 3, List.of(0, 1, 2, 3, 4, 5, 6), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"K-J-Q"},"content":"                1,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"K-J-Q"},"content":"                Ante.Blind.SMALL_BLIND,","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"-"},"content":"                3,","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"-"},"content":"                List.of(0, 1, 2, 3, 4, 5, 6, 7),","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"-"},"content":"                INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"K-J-Q"},"content":"        // Test with 0 cards","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"-"},"content":"        assertPlayCardsInvalidHandSize(","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"-"},"content":"                1, Ante.Blind.SMALL_BLIND, 3, List.of(), INVALIDPLAYEDHANDERROR);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"K-J-Q"},"content":"    public void round_discardCards_success() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"K-J-Q"},"content":"        // Initial state","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"jwyk"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"K-J-Q"},"content":"        int initialHandSize \u003d round.getPlayerHandCards().size();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"K-J-Q"},"content":"        // Discard 2 cards","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0, 1));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"K-J-Q"},"content":"        // Check state after discard","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"jwyk"},"content":"        assertEquals(2, round.getRemainingDiscards());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(initialHandSize, round.getPlayerHandCards().size());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"K-J-Q"},"content":"    public void round_discardCards_tooManyDiscards() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"jwyk"},"content":"        // Use all 3 discards","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"K-J-Q"},"content":"        round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"jwyk"},"content":"        // Fourth discard should fail","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"K-J-Q"},"content":"            round.discardCards(List.of(0));","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"K-J-Q"},"content":"            fail(\"Should have thrown an exception for too many discards\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"Markneoneo"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-24","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(\"No remaining discards available\"), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":353,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":354,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":355,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":356,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":357,"author":{"gitId":"K-J-Q"},"content":"    public void round_emptyDiscardList() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":358,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":359,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":360,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":361,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":362,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":363,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":364,"author":{"gitId":"K-J-Q"},"content":"        // Initial state","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":365,"author":{"gitId":"jwyk"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":366,"author":{"gitId":"K-J-Q"},"content":"        int initialHandSize \u003d round.getPlayerHandCards().size();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":367,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":368,"author":{"gitId":"K-J-Q"},"content":"        // Discard 0 cards","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":369,"author":{"gitId":"K-J-Q"},"content":"        try {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":370,"author":{"gitId":"K-J-Q"},"content":"            round.discardCards(List.of());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":371,"author":{"gitId":"K-J-Q"},"content":"            fail(\"Should have thrown an exception for discarding zero cards\");","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":372,"author":{"gitId":"K-J-Q"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":373,"author":{"gitId":"K-J-Q"},"content":"            assertEquals(getExceptionMessage(\"Cannot discard zero cards\"), e.getMessage());","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":374,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-25","isFullCredit":false},{"lineNumber":375,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":376,"author":{"gitId":"jwyk"},"content":"        assertEquals(3, round.getRemainingDiscards());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":377,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(initialHandSize, round.getPlayerHandCards().size());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":378,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":379,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":380,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":381,"author":{"gitId":"K-J-Q"},"content":"    public void round_setNameAndDescription() throws JavatroException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":382,"author":{"gitId":"jwyk"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":383,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":384,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":385,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-03-29","isFullCredit":false},{"lineNumber":386,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":387,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":388,"author":{"gitId":"K-J-Q"},"content":"        // Set new values","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":389,"author":{"gitId":"K-J-Q"},"content":"        round.setRoundName(\"New Round\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":390,"author":{"gitId":"K-J-Q"},"content":"        round.setRoundDescription(\"New Description\");","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":391,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":392,"author":{"gitId":"K-J-Q"},"content":"        // Check values were updated","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":393,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(\"New Round\", round.getRoundName());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":394,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(\"New Description\", round.getRoundDescription());","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":395,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":396,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":397,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":398,"author":{"gitId":"K-J-Q"},"content":"    public void round_bossType_specificBehaviors() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":399,"author":{"gitId":"K-J-Q"},"content":"        // Setup","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":400,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":401,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":402,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":403,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":404,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":405,"author":{"gitId":"K-J-Q"},"content":"        // Test THE_NEEDLE","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":406,"author":{"gitId":"K-J-Q"},"content":"        Round needleRound \u003d new Round(ante, 3, deck, heldJokers, BossType.THE_NEEDLE);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":407,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(1, needleRound.getRemainingPlays());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":408,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(RoundConfig.DEFAULT_MIN_HAND_SIZE, needleRound.getConfig().getMinHandSize());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":409,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(RoundConfig.DEFAULT_MAX_HAND_SIZE, needleRound.getConfig().getMaxHandSize());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":410,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":411,"author":{"gitId":"K-J-Q"},"content":"        // Test THE_WATER","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":412,"author":{"gitId":"K-J-Q"},"content":"        Round waterRound \u003d new Round(ante, 3, deck, heldJokers, BossType.THE_WATER);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":413,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(0, waterRound.getRemainingDiscards());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":414,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(RoundConfig.DEFAULT_MIN_HAND_SIZE, waterRound.getConfig().getMinHandSize());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":415,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(RoundConfig.DEFAULT_MAX_HAND_SIZE, waterRound.getConfig().getMaxHandSize());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":416,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":417,"author":{"gitId":"K-J-Q"},"content":"        // Test THE_PSYCHIC","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":418,"author":{"gitId":"K-J-Q"},"content":"        Round psychicRound \u003d new Round(ante, 3, deck, heldJokers, BossType.THE_PSYCHIC);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":419,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, psychicRound.getRemainingPlays());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":420,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(5, psychicRound.getConfig().getMaxHandSize());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":421,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(5, psychicRound.getConfig().getMinHandSize());","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":422,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":423,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":424,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":425,"author":{"gitId":"K-J-Q"},"content":"    public void round_bossType_theClub() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":426,"author":{"gitId":"K-J-Q"},"content":"        testBossType(BossType.THE_CLUB);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":427,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":428,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":429,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":430,"author":{"gitId":"K-J-Q"},"content":"    public void round_bossType_theWindow() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":431,"author":{"gitId":"K-J-Q"},"content":"        testBossType(BossType.THE_WINDOW);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":432,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":433,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":434,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":435,"author":{"gitId":"K-J-Q"},"content":"    public void round_bossType_theHead() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":436,"author":{"gitId":"K-J-Q"},"content":"        testBossType(BossType.THE_HEAD);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":437,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":438,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":439,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":440,"author":{"gitId":"K-J-Q"},"content":"    public void round_bossType_theGoad() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":441,"author":{"gitId":"K-J-Q"},"content":"        testBossType(BossType.THE_GOAD);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":442,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":443,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":444,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":445,"author":{"gitId":"K-J-Q"},"content":"    public void round_bossType_thePlant() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":446,"author":{"gitId":"K-J-Q"},"content":"        testBossType(BossType.THE_PLANT);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":447,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":448,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":449,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":450,"author":{"gitId":"K-J-Q"},"content":"    public void round_testRandomBossType() throws JavatroException {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":451,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":452,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":453,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":454,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.BOSS_BLIND);","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":455,"author":{"gitId":"K-J-Q"},"content":"        Round round \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":456,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":457,"author":{"gitId":"K-J-Q"},"content":"        switch (round.getBossType()) {","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":458,"author":{"gitId":"K-J-Q"},"content":"            case THE_NEEDLE:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":459,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(BossType.THE_NEEDLE, round.getBossType());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":460,"author":{"gitId":"Markneoneo"},"content":"                assertEquals(1, round.getRemainingPlays());","lastModifiedDate":"2025-03-31","isFullCredit":false},{"lineNumber":461,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(RoundConfig.DEFAULT_MIN_HAND_SIZE, round.getConfig().getMinHandSize());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":462,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":463,"author":{"gitId":"K-J-Q"},"content":"            case THE_WATER:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":464,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(BossType.THE_WATER, round.getBossType());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":465,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(0, round.getRemainingDiscards());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":466,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(RoundConfig.DEFAULT_MIN_HAND_SIZE, round.getConfig().getMinHandSize());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":467,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":468,"author":{"gitId":"K-J-Q"},"content":"            case THE_PSYCHIC:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":469,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(BossType.THE_PSYCHIC, round.getBossType());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":470,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(5, round.getConfig().getMaxHandSize());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":471,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(5, round.getConfig().getMinHandSize());","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":472,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":473,"author":{"gitId":"K-J-Q"},"content":"            default:","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":474,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(RoundConfig.DEFAULT_MAX_HAND_SIZE, round.getConfig().getMaxHandSize());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":475,"author":{"gitId":"K-J-Q"},"content":"                assertEquals(RoundConfig.DEFAULT_MIN_HAND_SIZE, round.getConfig().getMinHandSize());","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":476,"author":{"gitId":"K-J-Q"},"content":"                break;","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":477,"author":{"gitId":"K-J-Q"},"content":"        }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":478,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-03-30","isFullCredit":false},{"lineNumber":479,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":480,"author":{"gitId":"K-J-Q"},"content":"    @Test","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":481,"author":{"gitId":"K-J-Q"},"content":"    public void round_testDeckVariants() throws JavatroException {","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":482,"author":{"gitId":"K-J-Q"},"content":"        // Test RED deck variant (increases remaining discards)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":483,"author":{"gitId":"K-J-Q"},"content":"        Deck redDeck \u003d new Deck(Deck.DeckType.RED);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":484,"author":{"gitId":"K-J-Q"},"content":"        Ante ante \u003d new Ante();","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":485,"author":{"gitId":"K-J-Q"},"content":"        ante.setAnteCount(1);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":486,"author":{"gitId":"K-J-Q"},"content":"        ante.setBlind(Ante.Blind.SMALL_BLIND);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":487,"author":{"gitId":"K-J-Q"},"content":"        Round redRound \u003d new Round(ante, 3, redDeck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":488,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(4, redRound.getRemainingDiscards()); // Default 3 + 1 more from RED deck","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":489,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":490,"author":{"gitId":"K-J-Q"},"content":"        // Test BLUE deck variant (increases remaining plays)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":491,"author":{"gitId":"K-J-Q"},"content":"        Deck blueDeck \u003d new Deck(Deck.DeckType.BLUE);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":492,"author":{"gitId":"K-J-Q"},"content":"        Round blueRound \u003d new Round(ante, 3, blueDeck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":493,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(4, blueRound.getRemainingPlays()); // Initial 3 + 1 more from BLUE deck","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":494,"author":{"gitId":"K-J-Q"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":495,"author":{"gitId":"K-J-Q"},"content":"        // Test DEFAULT deck variant (no changes to discards or plays)","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":496,"author":{"gitId":"K-J-Q"},"content":"        Deck deck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":497,"author":{"gitId":"K-J-Q"},"content":"        Round greenRound \u003d new Round(ante, 3, deck, heldJokers, \"\", \"\");","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":498,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, greenRound.getRemainingDiscards()); // Default value unchanged","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":499,"author":{"gitId":"K-J-Q"},"content":"        assertEquals(3, greenRound.getRemainingPlays()); // Default value unchanged","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":500,"author":{"gitId":"K-J-Q"},"content":"    }","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":501,"author":{"gitId":"K-J-Q"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"Markneoneo":3,"flyingapricot":2,"K-J-Q":404,"-":63,"jwyk":29}},{"path":"src/test/java/javatro/display/CardRendererTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static javatro.display.UI.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"public class CardRendererTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    private Card heartsCard;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"    private Card diamondsCard;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private Card clubsCard;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    private Card spadesCard;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        heartsCard \u003d new Card(Card.Rank.ACE, Card.Suit.HEARTS);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"        diamondsCard \u003d new Card(Card.Rank.KING, Card.Suit.DIAMONDS);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"        clubsCard \u003d new Card(Card.Rank.QUEEN, Card.Suit.CLUBS);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        spadesCard \u003d new Card(Card.Rank.JACK, Card.Suit.SPADES);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    public void testRenderCard_Hearts() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        String[] cardArt \u003d CardRenderer.renderCard(heartsCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(cardArt, \"Card art should not be null\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(5, cardArt.length, \"Card art should have 5 lines\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[0].contains(\"A\"), \"Top line should contain the card rank symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[2].contains(\"H\"), \"Middle line should contain the suit symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[4].contains(\"A\"), \"Bottom line should contain the card rank symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"    public void testRenderCard_Diamonds() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"        String[] cardArt \u003d CardRenderer.renderCard(diamondsCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(cardArt, \"Card art should not be null\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(5, cardArt.length, \"Card art should have 5 lines\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[0].contains(\"K\"), \"Top line should contain the card rank symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[2].contains(\"D\"), \"Middle line should contain the suit symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[4].contains(\"K\"), \"Bottom line should contain the card rank symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"    public void testRenderCard_Clubs() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"        String[] cardArt \u003d CardRenderer.renderCard(clubsCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(cardArt, \"Card art should not be null\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(5, cardArt.length, \"Card art should have 5 lines\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[0].contains(\"Q\"), \"Top line should contain the card rank symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[2].contains(\"C\"), \"Middle line should contain the suit symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[4].contains(\"Q\"), \"Bottom line should contain the card rank symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"    public void testRenderCard_Spades() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"        String[] cardArt \u003d CardRenderer.renderCard(spadesCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(cardArt, \"Card art should not be null\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(5, cardArt.length, \"Card art should have 5 lines\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[0].contains(\"J\"), \"Top line should contain the card rank symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[2].contains(\"S\"), \"Middle line should contain the suit symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(cardArt[4].contains(\"J\"), \"Bottom line should contain the card rank symbol\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"    public void testRenderCard_NullCard() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"                AssertionError.class,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                () -\u003e CardRenderer.renderCard(null),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"                \"Should throw AssertionError when rendering a null card.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"    public void testGetSuitSymbol() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"        String[] heartsArt \u003d CardRenderer.renderCard(heartsCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"        String[] diamondsArt \u003d CardRenderer.renderCard(diamondsCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"        String[] clubsArt \u003d CardRenderer.renderCard(clubsCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"        String[] spadesArt \u003d CardRenderer.renderCard(spadesCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(heartsArt[2].contains(\"H\"), \"Hearts card should contain \u0027H\u0027.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(diamondsArt[2].contains(\"D\"), \"Diamonds card should contain \u0027D\u0027.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(clubsArt[2].contains(\"C\"), \"Clubs card should contain \u0027C\u0027.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(spadesArt[2].contains(\"S\"), \"Spades card should contain \u0027S\u0027.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"    public void testGetColour_Hearts() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"        String[] cardArt \u003d CardRenderer.renderCard(heartsCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"                cardArt[0].contains(BOLD) \u0026\u0026 cardArt[0].contains(RED),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"                \"Hearts card should use RED color.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"    public void testGetColour_Diamonds() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"        String[] cardArt \u003d CardRenderer.renderCard(diamondsCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"                cardArt[0].contains(BOLD) \u0026\u0026 cardArt[0].contains(ORANGE),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \"Diamonds card should use ORANGE color.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"    public void testGetColour_Clubs() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"        String[] cardArt \u003d CardRenderer.renderCard(clubsCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"                cardArt[0].contains(BOLD) \u0026\u0026 cardArt[0].contains(BLUE),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \"Clubs card should use BLUE color.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"    public void testGetColour_Spades() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"        String[] cardArt \u003d CardRenderer.renderCard(spadesCard);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"                cardArt[0].contains(BOLD) \u0026\u0026 cardArt[0].contains(PURPLE),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"                \"Spades card should use PURPLE color.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":103,"-":20}},{"path":"src/test/java/javatro/display/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.screens.Screen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"public class ParserTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"    private Parser parser;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    private Screen mockScreen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.runningTests \u003d true; // Ensure runningTests is set to true","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    public void testAddNullPropertyChangeListener() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        assertThrows(AssertionError.class, () -\u003e parser.addPropertyChangeListener(null));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":23,"-":3}},{"path":"src/test/java/javatro/display/UIPrintANSITest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import java.io.PrintStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"class UIPrintANSITest {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    private final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    @AfterEach","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    public void tearDown() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    public void testPrintANSI_ValidFile() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        // Test with a valid file (ensure the file exists under src/test/resources/ansi)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        assertDoesNotThrow(() -\u003e UI.printANSI(\"javatro_logo.txt\"));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"        String output \u003d outContent.toString().trim();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"                output.contains(\"ANSI TEXT\"),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \"Should not display fallback message for valid file.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        assertFalse(output.isEmpty(), \"Output should not be empty when valid file is loaded.\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    public void testPrintANSI_InvalidFile() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"        // Test with a non-existent file","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"        UI.printANSI(\"nonexistent.txt\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"        String output \u003d outContent.toString().trim();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"        String errorOutput \u003d errContent.toString().trim();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"                output.contains(\"ANSI TEXT\"),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \"Fallback message should be displayed for invalid file.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"                errorOutput.contains(\"Error loading ANSI art\"),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"                \"Error message should be printed to stderr.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"    public void testPrintANSI_NullFileName() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"        // Test with a null file name","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"                AssertionError.class,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"                () -\u003e UI.printANSI(null),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"                \"Null file name should trigger assertion.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"    public void testPrintANSI_EmptyFileName() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"        // Test with an empty file name","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"                AssertionError.class,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"                () -\u003e UI.printANSI(\"\"),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \"Empty file name should trigger assertion.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"flyingapricot":58,"-":19}},{"path":"src/test/java/javatro/display/screens/CardSelectScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"public class CardSelectScreenTest extends ScreenTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"    private CardSelectScreen cardSelectScreen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"            cardSelectScreen \u003d new CardSelectScreenImpl(\"TEST CARD SELECT SCREEN\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"            Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"            super.setUp();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Failed to initialize CardSelectScreen: \" + e.getMessage());","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    public void testScreenInitialization() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertDoesNotThrow(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"                () -\u003e new CardSelectScreenImpl(\"TEST CARD SELECT SCREEN\"),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"                \"CardSelectScreen should initialize without errors.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"    public void testCommandMapContainsExpectedOptions() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        List\u003cOption\u003e actualCommands \u003d cardSelectScreen.getCommandMap();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        // Expected options for CardSelectScreen","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"        List\u003cClass\u003c?\u003e\u003e expectedCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(CardSelectOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(SortBySuitOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(SortByRankOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(PokerHandOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(DeckViewOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(ResumeGameOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"        compareCommandListTypes(expectedCommands, actualCommands);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"    // A concrete implementation for the abstract class to enable testing","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    private static class CardSelectScreenImpl extends CardSelectScreen {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"        public CardSelectScreenImpl(String optionsTitle) throws JavatroException {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"            super(optionsTitle);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        @Override","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"        public void displayScreen() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"            // No-op for testing purposes","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":58,"-":6}},{"path":"src/test/java/javatro/display/screens/DeckViewScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.Deck;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"public class DeckViewScreenTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    private DeckViewScreen deckViewScreen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    private Deck testDeck;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() throws JavatroException {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"        deckViewScreen \u003d new DeckViewScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"        // Create a test deck with a mix of cards","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        testDeck \u003d new Deck(Deck.DeckType.DEFAULT);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        JavatroCore.deck \u003d testDeck;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    public void testBuildCountMatrixCountsCorrectly() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        List\u003cCard\u003e cards \u003d testDeck.getWholeDeck();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        DeckViewScreen.DeckCountData countData \u003d","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                deckViewScreen.buildCountMatrix(new ArrayList\u003c\u003e(cards));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(13, countData.suitTotals[0]); // Spades","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(13, countData.suitTotals[1]); // Hearts","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(13, countData.suitTotals[2]); // Clubs","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(13, countData.suitTotals[3]); // Diamonds","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    public void testBuildDeckTableFormatting() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"        List\u003cCard\u003e cards \u003d testDeck.getWholeDeck();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        DeckViewScreen.DeckCountData countData \u003d","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"                deckViewScreen.buildCountMatrix(new ArrayList\u003c\u003e(cards));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"        StringBuilder table \u003d deckViewScreen.buildDeckTable(\"Test Deck\", countData);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(table, \"Generated table should not be null.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(!table.isEmpty(), \"Generated table should not be empty.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"    public void testGetSuitIndex() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(0, deckViewScreen.getSuitIndex(Card.Suit.SPADES));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(1, deckViewScreen.getSuitIndex(Card.Suit.HEARTS));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(2, deckViewScreen.getSuitIndex(Card.Suit.CLUBS));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(3, deckViewScreen.getSuitIndex(Card.Suit.DIAMONDS));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"    public void testGetRankIndex() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(0, deckViewScreen.getRankIndex(Card.Rank.ACE));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(1, deckViewScreen.getRankIndex(Card.Rank.KING));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(2, deckViewScreen.getRankIndex(Card.Rank.QUEEN));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(3, deckViewScreen.getRankIndex(Card.Rank.JACK));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(4, deckViewScreen.getRankIndex(Card.Rank.TEN));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(5, deckViewScreen.getRankIndex(Card.Rank.NINE));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(12, deckViewScreen.getRankIndex(Card.Rank.TWO));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"    public void testDisplayScreenWithNullDeck() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"        JavatroCore.deck \u003d null;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"                NullPointerException.class,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"                () -\u003e deckViewScreen.displayScreen(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"                \"DeckViewScreen should throw an error when the deck is null.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":73,"-":10}},{"path":"src/test/java/javatro/display/screens/GameScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.Card;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.beans.PropertyChangeEvent;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"public class GameScreenTest extends ScreenTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    private GameScreen gameScreen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    private Storage storage;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        super.setUp();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"        storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"            gameScreen \u003d new GameScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Error creating the new game screen: \" + e);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    public void testCommandMapInitialization() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(6, gameScreen.getCommandMap().size(), \"Command map should contain 6 options.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        assertInstanceOf(PlayCardOption.class, gameScreen.getCommandMap().get(0));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        assertInstanceOf(DiscardCardOption.class, gameScreen.getCommandMap().get(1));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"        assertInstanceOf(PokerHandOption.class, gameScreen.getCommandMap().get(2));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        assertInstanceOf(DeckViewOption.class, gameScreen.getCommandMap().get(3));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"        assertInstanceOf(MainMenuOption.class, gameScreen.getCommandMap().get(4));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        assertInstanceOf(ExitGameOption.class, gameScreen.getCommandMap().get(5));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"    public void testPropertyChangeRoundName() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"        PropertyChangeEvent event \u003d new PropertyChangeEvent(this, \"roundName\", \"\", \"TEST ROUND\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"        gameScreen.propertyChange(event);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(\"TEST ROUND\", gameScreen.roundName, \"Round name should be updated.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    public void testPropertyChangeRoundDescription() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PropertyChangeEvent event \u003d","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"                new PropertyChangeEvent(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"                        this, \"roundDescription\", \"\", \"This is a test round description.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        gameScreen.propertyChange(event);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \"This is a test round description.\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"                gameScreen.roundDescription,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \"Round description should be updated.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"    public void testPropertyChangeBlindScore() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"        PropertyChangeEvent event \u003d new PropertyChangeEvent(this, \"blindScore\", 0, 100);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"        gameScreen.propertyChange(event);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(100, GameScreen.blindScore, \"Blind score should be updated.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"    public void testPropertyChangeRoundScore() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"        PropertyChangeEvent event \u003d new PropertyChangeEvent(this, \"currentScore\", 0L, 500L);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"        gameScreen.propertyChange(event);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(500L, GameScreen.roundScore, \"Round score should be updated.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    public void testPropertyChangeHandsLeft() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"        PropertyChangeEvent event \u003d new PropertyChangeEvent(this, \"remainingPlays\", 0, 5);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"        gameScreen.propertyChange(event);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(5, GameScreen.handsLeft, \"Hands left should be updated.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"    public void testPropertyChangeDiscardsLeft() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"        PropertyChangeEvent event \u003d new PropertyChangeEvent(this, \"remainingDiscards\", 0, 3);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"        gameScreen.propertyChange(event);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(3, GameScreen.discardsLeft, \"Discards left should be updated.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"    public void testPropertyChangeHoldingHand() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"        List\u003cCard\u003e holdingHand \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"        holdingHand.add(new Card(Card.Rank.ACE, Card.Suit.SPADES));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"        holdingHand.add(new Card(Card.Rank.KING, Card.Suit.HEARTS));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"        holdingHand.add(new Card(Card.Rank.QUEEN, Card.Suit.DIAMONDS));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"        holdingHand.add(new Card(Card.Rank.JACK, Card.Suit.CLUBS));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"        holdingHand.add(new Card(Card.Rank.TEN, Card.Suit.SPADES));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"        holdingHand.add(new Card(Card.Rank.NINE, Card.Suit.HEARTS));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"        holdingHand.add(new Card(Card.Rank.EIGHT, Card.Suit.DIAMONDS));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"        holdingHand.add(new Card(Card.Rank.SEVEN, Card.Suit.CLUBS));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        PropertyChangeEvent event \u003d new PropertyChangeEvent(this, \"holdingHand\", null, holdingHand);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"        gameScreen.propertyChange(event);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(8, GameScreen.holdingHand.size(), \"Holding hand should contain 8 cards.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"                Card.Rank.ACE,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"                GameScreen.holdingHand.get(0).rank(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"                \"First card rank should be ACE.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"                Card.Suit.SPADES,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"                GameScreen.holdingHand.get(0).suit(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \"First card suit should be SPADES.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"    public void testPropertyChangeInvalidProperty() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"        PropertyChangeEvent event \u003d new PropertyChangeEvent(this, \"invalidProperty\", null, null);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"        gameScreen.propertyChange(event);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"        // No exception should be thrown for an invalid property change","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(true);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":115,"-":18}},{"path":"src/test/java/javatro/display/screens/LoseScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.Option;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import java.util.concurrent.ThreadLocalRandom;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"public class LoseScreenTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    private LoseScreen loseScreen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() throws JavatroException {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"        loseScreen \u003d new LoseScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    public void testInitialization() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(loseScreen, \"LoseScreen should be initialized.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(2, loseScreen.getCommandMap().size(), \"LoseScreen should have 2 options.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    public void testCommandMapContainsExpectedOptions() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        List\u003cOption\u003e commandMap \u003d loseScreen.getCommandMap();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                commandMap.stream().anyMatch(option -\u003e option instanceof MainMenuOption),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"                \"Command map should contain a MainMenuOption.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"                commandMap.stream().anyMatch(option -\u003e option instanceof ExitGameOption),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"                \"Command map should contain an ExitGameOption.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    public void testRandomQuoteSelection() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        List\u003cString\u003e quotes \u003d","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"                        \"Maybe Go Fish is more our speed...\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"                        \"We folded like a cheap suit!\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"                        \"Time for us to shuffle off and try again!\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"                        \"You know what they say, the house always wins!\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"                        \"Looks like we found out who the real Joker is!\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"                        \"Oh no, were you bluffing too?\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"                        \"Looks like the joke\u0027s on us!\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"                        \"If I had hands I would have covered my eyes!\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"                        \"I\u0027m literally a fool, what\u0027s your excuse?\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"                        \"What a flop!\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"        int randomIndex \u003d ThreadLocalRandom.current().nextInt(quotes.size());","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(true, \"Random index should be within valid range.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"    public void testHARepetitionConstant() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"        final int HA_REPETITIONS \u003d 47;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"        String repeatedHA \u003d \"HA\".repeat(HA_REPETITIONS);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"                HA_REPETITIONS * 2,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                repeatedHA.length(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"                \"The repeated HA string should be double the HA_REPETITIONS value.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":58,"-":14}},{"path":"src/test/java/javatro/display/screens/PlayCardScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"public class PlayCardScreenTest extends ScreenTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private PlayCardScreen playCardScreen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"            playCardScreen \u003d new PlayCardScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"            super.setUp();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Failed to initialize PlayCardScreen: \" + e.getMessage());","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    public void testScreenInitialization() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        assertDoesNotThrow(PlayCardScreen::new, \"PlayCardScreen should initialize without errors.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    public void testCommandMapContainsExpectedOptions() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"        List\u003cOption\u003e actualCommands \u003d playCardScreen.getCommandMap();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"        // Expected options for PlayCardScreen","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        List\u003cClass\u003c?\u003e\u003e expectedCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(CardSelectOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(SortBySuitOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(SortByRankOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(PokerHandOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(DeckViewOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(ResumeGameOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"        compareCommandListTypes(expectedCommands, actualCommands);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":45,"-":3}},{"path":"src/test/java/javatro/display/screens/RunListScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.ViewRunOption;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"import java.util.TreeMap;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"public class RunListScreenTest extends ScreenTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    private Storage storage;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"        super.setUp();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"        storage.resetStorage();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"        // Prepare mock data for the test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        TreeMap\u003cInteger, ArrayList\u003cString\u003e\u003e serializedRunData \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String rowData1 \u003d","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"                \"0,1,0,4,5,1,SMALL\"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    + \" BLIND,0,0,RED,9D,2D,3D,6D,AC,5H,3C,KD,-,-,-,-,-,1,1,1,1,1,1,1,1,1,1,1,1,1,9S,2H,6H,3H,10D,4S,2S,10H,5S,KS,JH,4C,9C,3S,10C,QH,10S,5C,KC,AH,AD,2C,5D,QD,JD,4H,7S,8C,KH,AS,QC,8D,JC,QS,8H,8S,9H,6S,7C,6C,4D,7H,7D,JS,0be01025238ce77a8671d79d1884f7ed0223806cd9f9004300678b4d6b1fe565\";","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String rowData2 \u003d","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"                \"1,1,0,4,5,1,LARGE\"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    + \" BLIND,0,0,BLUE,9D,2D,3D,6D,AC,5H,3C,KD,-,-,-,-,-,1,1,1,1,1,1,1,1,1,1,1,1,1,9S,2H,6H,3H,10D,4S,2S,10H,5S,KS,JH,4C,9C,3S,10C,QH,10S,5C,KC,AH,AD,2C,5D,QD,JD,4H,7S,8C,KH,AS,QC,8D,JC,QS,8H,8S,9H,6S,7C,6C,4D,7H,7D,JS,1d82aa58d1a4d3f5e4afae4c8c1eb4bb5671ff5bfc9480c66b9484f7ae217e13\";","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        ArrayList\u003cString\u003e dataList1 \u003d new ArrayList\u003c\u003e(Arrays.asList(rowData1.split(\",\")));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        ArrayList\u003cString\u003e dataList2 \u003d new ArrayList\u003c\u003e(Arrays.asList(rowData2.split(\",\")));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        serializedRunData.put(0, dataList1);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"        serializedRunData.put(1, dataList2);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"        storage.setSerializedRunData(serializedRunData);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"    public void testRunListScreenInitialization() throws JavatroException {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"        RunListScreen runListScreen \u003d new RunListScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"                2,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"                runListScreen.getCommandMap().size(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \"RunListScreen should have exactly 2 saved runs as options.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"    public void testRunListScreenOptionTypes() throws JavatroException {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"        RunListScreen runListScreen \u003d new RunListScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"                runListScreen.getCommandMap().get(0) instanceof ViewRunOption,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \"The first option should be a ViewRunOption.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"                runListScreen.getCommandMap().get(1) instanceof ViewRunOption,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"                \"The second option should be a ViewRunOption.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"flyingapricot"},"content":"    public void testRunListScreenRunNumbers() throws JavatroException {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"        RunListScreen runListScreen \u003d new RunListScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"        ViewRunOption firstOption \u003d (ViewRunOption) runListScreen.getCommandMap().get(0);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"        ViewRunOption secondOption \u003d (ViewRunOption) runListScreen.getCommandMap().get(1);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"                1, firstOption.getRunNumber(), \"The first ViewRunOption should have run number 1.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"                2,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"                secondOption.getRunNumber(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \"The second ViewRunOption should have run number 2.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"    public void testRunListScreenNoRuns() throws JavatroException {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"        storage.setSerializedRunData(new TreeMap\u003c\u003e()); // Reset the saved data","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"        RunListScreen runListScreen \u003d new RunListScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"                0,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"                runListScreen.getCommandMap().size(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"                \"RunListScreen should have no options when there are no saved runs.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":64,"-":30}},{"path":"src/test/java/javatro/display/screens/RunSelectScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.storage.Storage;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"import java.util.TreeMap;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"public class RunSelectScreenTest extends ScreenTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    private RunSelectScreen runSelectScreen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    private TreeMap\u003cInteger, ArrayList\u003cString\u003e\u003e serializedRunData;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        Storage.saveActive \u003d false;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        Storage storage \u003d Storage.getStorageInstance();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"        serializedRunData \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"        // Load the test data into the TreeMap","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String rowData \u003d","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"                \"0,1,0,4,5,1,SMALL\"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    + \" BLIND,0,0,RED,9D,2D,3D,6D,AC,5H,3C,KD,-,-,-,-,-,1,1,1,1,1,1,1,1,1,1,1,1,1,9S,2H,6H,3H,10D,4S,2S,10H,5S,KS,JH,4C,9C,3S,10C,QH,10S,5C,KC,AH,AD,2C,5D,QD,JD,4H,7S,8C,KH,AS,QC,8D,JC,QS,8H,8S,9H,6S,7C,6C,4D,7H,7D,JS,0be01025238ce77a8671d79d1884f7ed0223806cd9f9004300678b4d6b1fe565\";","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        // Split the row data by comma and store it as an ArrayList","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"        ArrayList\u003cString\u003e dataList \u003d new ArrayList\u003c\u003e(Arrays.asList(rowData.split(\",\")));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"        // Put the data list into the TreeMap with key 0","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        serializedRunData.put(0, dataList);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"        storage.setSerializedRunData(serializedRunData);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"        Storage.getStorageInstance().setRunChosen(1);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"            runSelectScreen \u003d new RunSelectScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Failed to initialize RunSelectScreen: \" + e.getMessage());","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"        super.setUp();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    public void testSerializedRunDataLoading() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(serializedRunData, \"The serializedRunData map should not be null.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"                1,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"                serializedRunData.size(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"                \"The serializedRunData map should contain exactly one entry.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"                81, serializedRunData.get(0).size(), \"The entry should contain exactly 81 items.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"        // Checking specific data points to ensure the data was loaded correctly","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(\"0\", serializedRunData.get(0).get(0));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(\"RED\", serializedRunData.get(0).get(9));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(\"SMALL BLIND\", serializedRunData.get(0).get(6));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(\"9D\", serializedRunData.get(0).get(10));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                \"0be01025238ce77a8671d79d1884f7ed0223806cd9f9004300678b4d6b1fe565\",","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                serializedRunData.get(0).get(80));","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"    public void testInitializationWithoutSaveData() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"        Storage.getStorageInstance().setSerializedRunData(new java.util.TreeMap\u003c\u003e());","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"            runSelectScreen \u003d new RunSelectScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Failed to initialize RunSelectScreen: \" + e.getMessage());","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(runSelectScreen, \"RunSelectScreen should be initialized successfully.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"                1,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"                runSelectScreen.getCommandMap().size(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"                \"Only StartGameOption should be available.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"    public void testInitializationWithSaveData() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(runSelectScreen, \"RunSelectScreen should be initialized successfully.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"                runSelectScreen.getCommandMap().size() \u003e 1,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \"Commands should be available if save data exists.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"    public void testCommandMapContents() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"        List\u003cClass\u003c?\u003e\u003e expectedOptions \u003d","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"                List.of(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"                        StartRunOption.class,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"                        ViewNextRunOption.class,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"                        ViewPrevRunOption.class,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"                        ViewRunListOption.class,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"                        StartGameOption.class);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"        List\u003cOption\u003e actualCommands \u003d runSelectScreen.getCommandMap();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"        List\u003cClass\u003c?\u003e\u003e actualCommandClasses \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        for (Option option : actualCommands) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"            actualCommandClasses.add(option.getClass());","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"                expectedOptions.size(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"                actualCommandClasses.size(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"                \"Command map should contain the expected options.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"        for (Class\u003c?\u003e expectedOption : expectedOptions) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"            assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"                    actualCommandClasses.contains(expectedOption),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    \"Command map should contain: \" + expectedOption.getSimpleName());","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"    public void testDisplayCurrentChosenRun() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertDoesNotThrow(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"                () -\u003e runSelectScreen.displayCurrentChosenRun(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \"Displaying the current chosen run should not throw an exception.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"    public void testRunNumberGetterSetter() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"        runSelectScreen.setRunNumber(5);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"                5,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"                runSelectScreen.getRunNumber(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"                \"Run number should be set and retrieved correctly.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"    public void testInvalidRunNumberHandling() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"        runSelectScreen.setRunNumber(-1);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"                -1,","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"                runSelectScreen.getRunNumber(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"                \"Negative run numbers should be handled appropriately.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":108,"-":43}},{"path":"src/test/java/javatro/display/screens/ScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroCore;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.display.UI;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.JavatroManager;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.Option;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import javatro.utilities.csvutils.CSVUtils;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"import java.io.IOException;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.io.PrintStream;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.Files;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"public abstract class ScreenTest {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    protected final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    protected final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    protected List\u003cClass\u003c?\u003e\u003e expectedCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    protected JavatroManager javatroManager;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    protected static final String SAMPLE_DATA \u003d","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \"0,1,0,4,5,1,SMALL\"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"                + \" BLIND,0,0,RED,3H,5H,8H,10H,4H,JD,JH,10D,-,-,-,-,-,1,1,1,1,1,1,1,1,1,1,1,1,1,9D,10C,AC,6H,AS,2C,3C,AD,6C,JC,5D,6S,3S,7C,5C,QH,QS,10S,KD,7H,QC,7D,8S,QD,KS,2D,3D,9H,2H,JS,2S,4C,8C,9C,AH,4D,4S,KH,9S,6D,8D,7S,5S,KC,1cdb399415e1c91d8ef8b7bd443598dd014c2dc996e65e8b6c93f703f4001437\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"    protected final String SAVEFILE_PATH \u003d \"./savefile.csv\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"        UI javatroView \u003d new UI();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        JavatroCore javatroCore \u003d new JavatroCore();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"            javatroManager \u003d new JavatroManager(javatroView, javatroCore);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"        JavatroManager.runningTests \u003d true;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"    protected void compareCommandListTypes(List\u003cClass\u003c?\u003e\u003e expectedTypes, List\u003cOption\u003e actualList) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"        if (expectedTypes.size() !\u003d actualList.size()) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"            fail(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"                    \"Mismatch in number of commands. Expected: \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"                            + expectedTypes.size()","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"                            + \", but got: \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"                            + actualList.size());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c expectedTypes.size(); i++) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"flyingapricot"},"content":"            Class\u003c?\u003e expectedType \u003d expectedTypes.get(i);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"flyingapricot"},"content":"            Option actualOption \u003d actualList.get(i);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"            if (!expectedType.isInstance(actualOption)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"                fail(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"                        \"Mismatch at index \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"                                + i","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                                + \". Expected type: \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"                                + expectedType.getSimpleName()","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"                                + \", but got: \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"                                + actualOption.getClass().getSimpleName());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"    protected void compareScreenType(Object screen, Class\u003c?\u003e expectedType) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"        if (!expectedType.isInstance(screen)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"            fail(","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"                    \"Expected screen type: \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"                            + expectedType.getSimpleName()","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"                            + \", but got: \"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"                            + screen.getClass().getSimpleName());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"flyingapricot"},"content":"    @AfterEach","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"flyingapricot"},"content":"    public void tearDown() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"flyingapricot"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"flyingapricot"},"content":"        outContent.reset();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"flyingapricot"},"content":"    protected String getOutput() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"flyingapricot"},"content":"        return outContent.toString().trim();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"flyingapricot"},"content":"    protected String readExpectedOutput(String fileName) throws IOException {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"flyingapricot"},"content":"        String path \u003d \"src/test/resources/screens/\" + fileName;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"flyingapricot"},"content":"        return Files.readString(Paths.get(path)).trim();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"flyingapricot"},"content":"    protected void compareOutputToFile(String fileName) throws IOException {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"flyingapricot"},"content":"        String actualOutput \u003d getOutput();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"flyingapricot"},"content":"        CSVUtils.writeSampleToCSV(\"src/test/resources/screens/data.txt\", actualOutput);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"flyingapricot"},"content":"        String expectedOutput \u003d readExpectedOutput(fileName);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"flyingapricot"},"content":"        if (!actualOutput.equals(expectedOutput)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Output mismatch for file: \" + fileName);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"flyingapricot"},"content":"    protected void compareOutputToFile2(String expectedFileName) throws IOException {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"flyingapricot"},"content":"        // Read the expected output file","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"flyingapricot"},"content":"        String expectedOutput \u003d normalizeLineEndings(readExpectedOutput(expectedFileName));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"flyingapricot"},"content":"        // Read the actual output file (data.txt)","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"flyingapricot"},"content":"        String actualOutput \u003d normalizeLineEndings(readExpectedOutput(\"data.txt\"));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"flyingapricot"},"content":"        // Compare outputs","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"flyingapricot"},"content":"        if (!actualOutput.equals(expectedOutput)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Output mismatch between data.txt and \" + expectedFileName);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"flyingapricot"},"content":"    private String normalizeLineEndings(String input) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"flyingapricot"},"content":"        return input.replace(\"\\r\\n\", \"\\n\").replace(\"\\r\", \"\\n\").stripTrailing();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"flyingapricot"},"content":"    /**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"flyingapricot"},"content":"     * Pipes the output of the current screen to a file during testing.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"flyingapricot"},"content":"     *","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"flyingapricot"},"content":"     * @param fileName The name of the file to compare against.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"flyingapricot"},"content":"     * @param renderable The renderable screen object.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"flyingapricot"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"flyingapricot"},"content":"     */","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"flyingapricot"},"content":"    protected void pipeOutputToFile(String fileName, Screen renderable) throws IOException {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"flyingapricot"},"content":"        // Prepare to capture the output","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"flyingapricot"},"content":"        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"flyingapricot"},"content":"        PrintStream originalOut \u003d System.out;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"flyingapricot"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"flyingapricot"},"content":"            JavatroManager.setScreen(renderable);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"flyingapricot"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"flyingapricot"},"content":"        // Save the captured output to a file","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"        try (FileOutputStream fos \u003d","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"                new FileOutputStream(\"src/test/resources/screens/\" + fileName)) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"flyingapricot"},"content":"            fos.write(outContent.toString().getBytes());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"flyingapricot"},"content":"        } finally {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"flyingapricot"},"content":"            // Reset the standard output","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"flyingapricot"},"content":"            System.setOut(originalOut);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"flyingapricot"},"content":"    //  @Test","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"flyingapricot"},"content":"    //  public void testNavigateThroughAllOptions() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"flyingapricot"},"content":"    //    Screen currentScreen \u003d UI.getCurrentScreen();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"flyingapricot"},"content":"    //    List\u003cOption\u003e options \u003d currentScreen.getCommandMap();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"flyingapricot"},"content":"    //","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"flyingapricot"},"content":"    //    if (options.isEmpty()) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"flyingapricot"},"content":"    //      fail(\"No options available to navigate.\");","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"flyingapricot"},"content":"    //    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"flyingapricot"},"content":"    //","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"flyingapricot"},"content":"    //    for (int i \u003d 0; i \u003c options.size(); i++) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"flyingapricot"},"content":"    //      Option option \u003d options.get(i);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"flyingapricot"},"content":"    //      String optionName \u003d option.getClass().getSimpleName();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"flyingapricot"},"content":"    //      try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"flyingapricot"},"content":"    //        // Execute the option and capture output","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"flyingapricot"},"content":"    //        boolean success \u003d option.execute();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"flyingapricot"},"content":"    //","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"flyingapricot"},"content":"    //        // Check if execution was successful","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"flyingapricot"},"content":"    //        assertTrue(success, \"Option execution failed for: \" + optionName);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"flyingapricot"},"content":"    //","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"flyingapricot"},"content":"    //        // Verify output for each option using a standardized file naming format","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"    //        String outputFileName \u003d getExpectedScreenType().getSimpleName() + \"_\" + optionName +","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"    // \"_Output.txt\";","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"flyingapricot"},"content":"    //","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"flyingapricot"},"content":"    //        try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"flyingapricot"},"content":"    //          compareOutputToFile(outputFileName);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"flyingapricot"},"content":"    //        } catch (IOException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"flyingapricot"},"content":"    //          fail(\"Could not compare output to file: \" + outputFileName);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"flyingapricot"},"content":"    //        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"flyingapricot"},"content":"    //","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"flyingapricot"},"content":"    //        // Reset screen to original state before testing next option","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"flyingapricot"},"content":"    //        resetToInitialScreen();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"flyingapricot"},"content":"    //      } catch (Exception e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"flyingapricot"},"content":"    //        fail(\"Failed to execute option: \" + optionName + \" - \" + e.getMessage());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"flyingapricot"},"content":"    //      }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"flyingapricot"},"content":"    //    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"flyingapricot"},"content":"    //  }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"flyingapricot"},"content":"    //","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"flyingapricot"},"content":"    //  /**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"flyingapricot"},"content":"    //   * Resets the screen to its initial state. Must be overridden by child classes if needed.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"flyingapricot"},"content":"    //   */","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"flyingapricot"},"content":"    //  protected void resetToInitialScreen() throws JavatroException {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"flyingapricot"},"content":"    //    UI.setCurrentScreen(newInstanceOfScreen());","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"flyingapricot"},"content":"    //  }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"flyingapricot"},"content":"    //","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"flyingapricot"},"content":"    //  /**","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"flyingapricot"},"content":"    //   * Creates a new instance of the expected screen type. Must be overridden by child classes.","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"flyingapricot"},"content":"    //   */","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"flyingapricot"},"content":"    //  protected abstract Screen newInstanceOfScreen() throws JavatroException;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"flyingapricot":177,"-":32}},{"path":"src/test/java/javatro/display/screens/StartScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.*;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"public class StartScreenTest extends ScreenTest {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"    private StartScreen startScreen;","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"        super.setUp();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"            startScreen \u003d new StartScreen();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Failed to create start screen\" + e);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    public void commandMatchCheck() {","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(RunSelectOption.class);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(HelpMenuOption.class);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"        expectedCommands.add(ExitGameOption.class);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"        List\u003cOption\u003e actualCommands \u003d startScreen.getCommandMap();","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"        compareCommandListTypes(expectedCommands, actualCommands);","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"    public void commandCountCheck() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"        List\u003cOption\u003e actualCommands \u003d startScreen.getCommandMap();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"flyingapricot"},"content":"        assertEquals(3, actualCommands.size());","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-07","isFullCredit":false}],"authorContributionMap":{"flyingapricot":42,"-":3}},{"path":"src/test/java/javatro/display/screens/WinGameScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.JavatroException;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javatro.manager.options.MainMenuOption;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.Option;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import java.util.concurrent.ThreadLocalRandom;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"public class WinGameScreenTest extends ScreenTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    private WinGameScreen winGameScreen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"        // Mock AudioPlayer to prevent actual audio playback during testing","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"        super.setUp();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"            winGameScreen \u003d new WinGameScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Failed to setup screen: \" + winGameScreen);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"flyingapricot"},"content":"    public void testInitialization() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(winGameScreen, \"WinGameScreen should be initialized.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"                2, winGameScreen.getCommandMap().size(), \"WinGameScreen should have 2 options.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"    public void testCommandMapContainsExpectedOptions() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"flyingapricot"},"content":"        List\u003cOption\u003e commandMap \u003d winGameScreen.getCommandMap();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"                commandMap.stream().anyMatch(option -\u003e option instanceof MainMenuOption),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"flyingapricot"},"content":"                \"Command map should contain a MainMenuOption.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"                commandMap.stream().anyMatch(option -\u003e option instanceof ExitGameOption),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"                \"Command map should contain an ExitGameOption.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"    public void testRandomQuoteSelection() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"        // Ensure all quotes are accessible","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"        int totalQuotes \u003d WinGameScreen.QUOTES.size();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"        assertTrue(totalQuotes \u003e 0, \"Quote list should not be empty.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"        boolean allQuotesAccessible \u003d true;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c 1000; i++) { // Run a large number of random selections","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"            int randomIndex \u003d ThreadLocalRandom.current().nextInt(totalQuotes);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"flyingapricot"},"content":"            if (randomIndex \u003e\u003d totalQuotes) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"flyingapricot"},"content":"                allQuotesAccessible \u003d false;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"flyingapricot"},"content":"                break;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"flyingapricot"},"content":"            }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"                allQuotesAccessible, \"All quotes should be accessible through random selection.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"flyingapricot"},"content":"    public void testDisplayScreenDoesNotThrowException() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertDoesNotThrow(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"                () -\u003e winGameScreen.displayScreen(),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"flyingapricot"},"content":"                \"displayScreen() should not throw any exceptions.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"flyingapricot"},"content":"    public void testQuoteIndexWithinBounds() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"flyingapricot"},"content":"        int totalQuotes \u003d WinGameScreen.QUOTES.size();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c 100; i++) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"flyingapricot"},"content":"            int randomIndex \u003d ThreadLocalRandom.current().nextInt(totalQuotes);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"            assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"                    randomIndex \u003c totalQuotes, \"Random quote index should be within valid range.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":67,"-":18}},{"path":"src/test/java/javatro/display/screens/WinRoundScreenTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"flyingapricot"},"content":"package javatro.display.screens;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"flyingapricot"},"content":"import javatro.core.*;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.ExitGameOption;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javatro.manager.options.NextRoundOption;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"flyingapricot"},"content":"import javatro.manager.options.Option;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"flyingapricot"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"flyingapricot"},"content":"import java.util.List;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"flyingapricot"},"content":"import java.util.concurrent.ThreadLocalRandom;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"flyingapricot"},"content":"public class WinRoundScreenTest {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"flyingapricot"},"content":"    private WinRoundScreen winRoundScreen;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"flyingapricot"},"content":"    @BeforeEach","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"flyingapricot"},"content":"    public void setUp() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"flyingapricot"},"content":"        try {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"flyingapricot"},"content":"            winRoundScreen \u003d new WinRoundScreen();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"flyingapricot"},"content":"        } catch (JavatroException e) {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"flyingapricot"},"content":"            fail(\"Did not set up win round screen \" + winRoundScreen);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"flyingapricot"},"content":"    public void testInitialization() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"flyingapricot"},"content":"        assertNotNull(winRoundScreen, \"WinRoundScreen should be initialized.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"                2, winRoundScreen.getCommandMap().size(), \"WinRoundScreen should have 2 options.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"flyingapricot"},"content":"    public void testCommandMapContainsExpectedOptions() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"flyingapricot"},"content":"        List\u003cOption\u003e commandMap \u003d winRoundScreen.getCommandMap();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"                commandMap.stream().anyMatch(option -\u003e option instanceof NextRoundOption),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"flyingapricot"},"content":"                \"Command map should contain a NextRoundOption.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"                commandMap.stream().anyMatch(option -\u003e option instanceof ExitGameOption),","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"flyingapricot"},"content":"                \"Command map should contain an ExitGameOption.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"flyingapricot"},"content":"    @Test","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"flyingapricot"},"content":"    public void testRandomPlanetCardSelection() {","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"flyingapricot"},"content":"        PokerHand.HandType[] handTypes \u003d PokerHand.HandType.values();","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"flyingapricot"},"content":"        int totalHandTypes \u003d handTypes.length;","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"flyingapricot"},"content":"","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"flyingapricot"},"content":"        for (int i \u003d 0; i \u003c 1000; i++) { // Repeat to cover random selection","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"flyingapricot"},"content":"            int randomIndex \u003d ThreadLocalRandom.current().nextInt(totalHandTypes);","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"            assertTrue(randomIndex \u003c totalHandTypes, \"Random index should be within valid range.\");","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"flyingapricot"},"content":"        }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"flyingapricot"},"content":"    }","lastModifiedDate":"2025-04-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"flyingapricot"},"content":"}","lastModifiedDate":"2025-04-08","isFullCredit":false}],"authorContributionMap":{"flyingapricot":47,"-":11}}]
